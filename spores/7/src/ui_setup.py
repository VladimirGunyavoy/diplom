"""
UI Setup - –ì–æ—Ç–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –¥–ª—è –¥–µ–º–æ
================================================

–ö–ª–∞—Å—Å UI_setup –∏–Ω–∫–∞–ø—Å—É–ª–∏—Ä—É–µ—Ç –≤—Å—é –ª–æ–≥–∏–∫—É —Å–æ–∑–¥–∞–Ω–∏—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è UI
–¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤. –ò–∑–±–∞–≤–ª—è–µ—Ç –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–¥–∞
–∏ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤–æ –≤—Å–µ—Ö –¥–µ–º–æ.

–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
‚úÖ –ì–æ—Ç–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ UI –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å UI Manager –∏ Color Manager
‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ –∫–æ–ª–±—ç–∫–∏
‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –º–µ—Ç—Ä–∏–∫–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
"""

import time
import numpy as np
from .ui_manager import UIManager
from .color_manager import ColorManager
from textwrap import dedent


class UI_setup:
    """–ì–æ—Ç–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ UI –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤"""
    
    def __init__(self, color_manager=None, ui_manager=None):
        # –ú–µ–Ω–µ–¥–∂–µ—Ä—ã
        if color_manager is None:
            color_manager = ColorManager()
        self.color_manager = color_manager
        
        if ui_manager is None:
            ui_manager = UIManager(color_manager)
        self.ui_manager = ui_manager
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ
        self.start_time = time.time()
        self.ui_elements = {}
        self.ui_toggle_timer = 0  # –î–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª–∞–≤–∏—à–∏ H
        
        # –•—Ä–∞–Ω–∏–ª–∏—â–µ —Ñ—É–Ω–∫—Ü–∏–π-–ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö
        self.data_providers = {}
    
    def setup_spawn_area_ui(self, spawn_area):
        """–°–æ–∑–¥–∞–µ—Ç UI –¥–ª—è SpawnArea –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∫–æ–ª–±—ç–∫–∏."""
        print("   ‚úì UI –¥–ª—è SpawnArea")

        # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è —ç–∫—Å—Ü–µ–Ω—Ç—Ä–∏—Å–∏—Ç–µ—Ç–∞
        self.ui_elements['eccentricity_info'] = self.ui_manager.create_element(
            'dynamic', 'eccentricity_info',
            text=f'ECCENTRICITY: {spawn_area.eccentricity:.3f}',
            position=(0.55, 0.3),
            style='header' 
        )

        # –°–æ–∑–¥–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
        instructions_text = dedent('''
            <white>SPAWN AREA:
            3 - decrease eccentricity
            4 - increase eccentricity
        ''').strip()
        self.ui_elements['spawn_area_instructions'] = self.ui_manager.create_instructions(
            'spawn_area',
            instructions_text,
            position=(0.5, 0.21),
        )

        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
        def update_eccentricity_text(new_eccentricity):
            self.ui_manager.update_text('eccentricity_info', f'ECCENTRICITY: {new_eccentricity:.3f}')

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–ª–±—ç–∫
        spawn_area.on_eccentricity_change_callbacks.append(update_eccentricity_text)

    def setup_demo_ui(self, data_providers=None, spawn_area=None):
        """
        –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø–æ–ª–Ω—ã–π UI –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–ª–±—ç–∫–∏.
        
        Args:
            data_providers (dict): –°–ª–æ–≤–∞—Ä—å —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.
                                   –ü—Ä–∏–º–µ—Ä: {'get_spore_count': lambda: ...}
        """
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö
        self.data_providers = data_providers if data_providers else {}
        
        print("\nüé® UI_setup: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...")
        
        # 1. –û—Å–Ω–æ–≤–Ω–æ–π UI —Å—Ü–µ–Ω—ã (–ø–æ–∑–∏—Ü–∏—è –∫–∞–º–µ—Ä—ã –∏ —Å—Ç–∞—Ç—É—Å –∫—É—Ä—Å–æ—Ä–∞)
        if 'get_camera_info' in self.data_providers and 'get_cursor_status' in self.data_providers:
            self._create_scene_ui()
            print("   ‚úì –û—Å–Ω–æ–≤–Ω–æ–π UI —Å—Ü–µ–Ω—ã")
        
        # 2. Zoom UI (–µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–≤–∞–π–¥–µ—Ä) 
        if 'get_look_point_info' in self.data_providers:
            self._create_zoom_ui()
            print("   ‚úì Zoom UI")
        
        # 3. Param Manager UI (–µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–≤–∞–π–¥–µ—Ä)
        if 'get_param_info' in self.data_providers:
            self._create_param_ui()
            print("   ‚úì Param Manager UI")
        
        # 4. –°—á–µ—Ç—á–∏–∫ —Å–ø–æ—Ä –∏ –∫–æ–º–∞–Ω–¥–∞ —Å–æ–∑–¥–∞–Ω–∏—è
        if 'get_spore_count' in self.data_providers:
            self.ui_elements['spore_counter'] = self.ui_manager.create_counter(
                'spore_count', 0,
                position=(-0.76, 0.2),
                prefix="Spores: "
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é "F - new spore" —á–µ—Ä–µ–∑ UI Manager
            self.ui_elements['spore_instruction'] = self.ui_manager.create_instructions(
                'spore_control',
                'F - new spore',
                position=(-0.76, 0.27) # –ü–æ–Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–µ –º–µ—à–∞—Ç—å
            )
            print("   ‚úì –°—á–µ—Ç—á–∏–∫ —Å–ø–æ—Ä –∏ –∫–æ–º–∞–Ω–¥–∞ F")
        
        # X. UI –¥–ª—è SpawnArea
        if spawn_area:
            self.setup_spawn_area_ui(spawn_area)
        
        # 5. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ UI —É–±—Ä–∞–Ω–∞
        print("   ‚úì –ë–ª–æ–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —É–±—Ä–∞–Ω")
        
        # 6. –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —É–±—Ä–∞–Ω–∞
        print("   ‚úì –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞")
        
        # 7. –ò–≥—Ä–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã
        self._create_game_commands()
        print("   ‚úì –ò–≥—Ä–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã")
        
        # 8. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã —É–±—Ä–∞–Ω—ã
        print("   ‚úì –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã —É–±—Ä–∞–Ω—ã")
        
        # 9. –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        self._register_update_functions()
        print("   ‚úì –§—É–Ω–∫—Ü–∏–∏ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
        
        print(f"   üìä –í—Å–µ–≥–æ UI —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {self.ui_manager.get_stats()['total']}")
        return self.ui_elements
    
    def _create_game_commands(self):
        """–°–æ–∑–¥–∞–µ—Ç –±–ª–æ–∫ —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –∏–≥—Ä–æ–≤—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏"""
        game_text = """CONTROLS:
WASD - move camera
Space/Shift - up/down
E/T - zoom in/out
R - reset zoom
1 - larger spores
2 - smaller spores
H - hide/show all UI"""
        
        self.ui_elements['game_commands'] = self.ui_manager.create_instructions(
            'game_controls',
            game_text,
            position=(-0.76, 0.46)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≤–∏–¥–∏–º—É—é –æ–±–ª–∞—Å—Ç—å
        )
    
    def _create_scene_ui(self):
        """–°–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ UI —ç–ª–µ–º–µ–Ω—Ç—ã —Å—Ü–µ–Ω—ã"""
        # –ü–æ–∑–∏—Ü–∏–æ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        self.ui_elements['position_info'] = self.ui_manager.create_position_info()
        
        # –°—Ç–∞—Ç—É—Å –∫—É—Ä—Å–æ—Ä–∞  
        self.ui_elements['cursor_status'] = self.ui_manager.create_status_indicator(
            'cursor', "Cursor locked [Alt to unlock]"
        )
    
    def _create_zoom_ui(self):
        """–°–æ–∑–¥–∞–µ—Ç UI —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è zoom manager"""
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ—á–∫–µ –≤–∑–≥–ª—è–¥–∞
        self.ui_elements['look_point'] = self.ui_manager.create_debug_info(
            'look_point', position=(0.5, 0.47)
        )
    
    def _create_param_ui(self):
        """–°–æ–∑–¥–∞–µ—Ç UI —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è param manager"""
        param_value, show_param = self.data_providers['get_param_info']()
        
        self.ui_elements['param_value'] = self.ui_manager.create_element(
            'dynamic', 'param_value',  # –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
            text=f'param value: {round(param_value, 3)}',
            position=(0.57, -0.31),
            style='header'
        )
        
        # –°–∫—Ä—ã–≤–∞–µ–º –µ—Å–ª–∏ show=False
        if not show_param:
            self.ui_manager.hide_element('param_value')
    
    # –ú–µ—Ç–æ–¥ _create_demo_commands() —É–¥–∞–ª–µ–Ω - –ø–ª–∞—à–∫–∞ UI CONTROL –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–∞
    
    def _register_update_functions(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ —Å–ø–æ—Ä
        def update_counters():
            # –°—á–µ—Ç—á–∏–∫ —Å–ø–æ—Ä
            if 'get_spore_count' in self.data_providers:
                spore_count = self.data_providers['get_spore_count']()
                self.ui_manager.update_counter('spore_count', spore_count, prefix="Spores: ")
            
        self.ui_manager.register_update_function('counters', update_counters)
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –∫–∞–º–µ—Ä—ã
        def update_position():
            if 'get_camera_info' in self.data_providers:
                try:
                    pos_x, pos_y, pos_z, rot_x, rot_y, rot_z = self.data_providers['get_camera_info']()
                    text = f"Position: {pos_x:>7.3f}, {pos_y:>7.3f}, {pos_z:>7.3f}"
                    text += f"\nRotation: {rot_x:>7.3f}, {rot_y:>7.3f}, {rot_z:>7.3f}"
                    self.ui_manager.update_text('main', text)
                except Exception:
                    pass
        
        self.ui_manager.register_update_function('position_info', update_position)
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∫—É—Ä—Å–æ—Ä–∞
        def update_cursor_status():
            if 'get_cursor_status' in self.data_providers:
                is_locked = self.data_providers['get_cursor_status']()
                if is_locked:
                    self.ui_manager.update_text('cursor', "Cursor locked [Alt to unlock]")
                else:
                    self.ui_manager.update_text('cursor', "Cursor unlocked [Alt to lock]")
        
        self.ui_manager.register_update_function('cursor_status', update_cursor_status)
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ—á–∫–∏ –≤–∑–≥–ª—è–¥–∞ (–¥–ª—è zoom manager)
        def update_look_point():
            if 'get_look_point_info' in self.data_providers:
                try:
                    x_0, z_0, current_scale, spores_scale = self.data_providers['get_look_point_info']()
                    text = f'LOOK POINT:\n({x_0:6.3f}, {z_0:6.3f})\n'
                    text += f'common scale: {current_scale:6.3f}\n'
                    text += f'spores scale: {spores_scale:6.3f}'
                    self.ui_manager.update_text('look_point', text)
                except Exception:
                    pass
        
        self.ui_manager.register_update_function('look_point', update_look_point)

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ (–¥–ª—è param manager)
        def update_param_value():
            if 'get_param_info' in self.data_providers:
                try:
                    param_value, show_param = self.data_providers['get_param_info']()
                    element = self.ui_manager.get_element('param_value')
                    if element:
                        element.enabled = show_param
                        if show_param:
                            element.text = f'param value: {round(param_value, 3)}'
                except Exception:
                    pass
        
        self.ui_manager.register_update_function('param_value', update_param_value)
    
    def handle_demo_commands(self, key):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ UI
        
        Args:
            key: –ù–∞–∂–∞—Ç–∞—è –∫–ª–∞–≤–∏—à–∞
            
        Returns:
            bool: True –µ—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –±—ã–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞, False –∏–Ω–∞—á–µ
        """
        if key == 'h':
            # –ì–ª–æ–±–∞–ª—å–Ω–æ–µ –≤—ã–∫–ª—é—á–µ–Ω–∏–µ/–≤–∫–ª—é—á–µ–Ω–∏–µ –≤—Å–µ–≥–æ UI
            if time.time() - self.ui_toggle_timer > 0.3:
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ä–µ–∞–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ UI
                all_categories = list(self.ui_manager.elements.keys())
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –≤–∏–¥–∏–º—ã–π —ç–ª–µ–º–µ–Ω—Ç
                any_visible = False
                for category in all_categories:
                    elements = self.ui_manager.elements.get(category, {})
                    for element in elements.values():
                        if element.enabled:
                            any_visible = True
                            break
                    if any_visible:
                        break
                
                # –ï—Å–ª–∏ –µ—Å—Ç—å –≤–∏–¥–∏–º—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã - —Å–∫—Ä—ã–≤–∞–µ–º –í–°–ï, –∏–Ω–∞—á–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –í–°–ï
                if any_visible:
                    for category in all_categories:
                        self.ui_manager.hide_category(category)
                    print("üôà –í–µ—Å—å UI —Å–∫—Ä—ã—Ç (H)")
                else:
                    for category in all_categories:
                        self.ui_manager.show_category(category)
                    print("üëÅÔ∏è –í–µ—Å—å UI –ø–æ–∫–∞–∑–∞–Ω (H)")
                
                self.ui_toggle_timer = time.time()
            return True
        
        return False
    
    def update(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Å–µ UI —ç–ª–µ–º–µ–Ω—Ç—ã (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞)"""
        self.ui_manager.update_dynamic_elements()
    
    def setup_architecture_demo(self):
        """–°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã (–∫–∞–∫ –≤ scripts/2.py)"""
        from textwrap import dedent
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ
        architecture_text = dedent('''
        –ù–û–í–ê–Ø –ê–†–•–ò–¢–ï–ö–¢–£–†–ê SPORE
        üßÆ SporeLogic: —á–∏—Å—Ç–∞—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞ (2D)
        üé® SporeVisual: 3D –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
        üîÑ Spore: –ª–æ–≥–∏–∫–∞ + –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
        ‚úÖ 100% —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å 1.py
        ''').strip()
        
        self.ui_elements['architecture_info'] = self.ui_manager.create_info_block(
            'architecture', architecture_text
        )
        
        # –°—á–µ—Ç—á–∏–∫ –æ–ø–µ—Ä–∞—Ü–∏–π
        self.ui_elements['operation_counter'] = self.ui_manager.create_counter(
            'operations', 0, prefix="–û–ø–µ—Ä–∞—Ü–∏–π: "
        )
        
        # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        test_instructions = dedent('''
        üî¨ T - —Ç–µ—Å—Ç –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
        üßÆ L - —Ç–µ—Å—Ç —á–∏—Å—Ç–æ–π –ª–æ–≥–∏–∫–∏
        üé® V - —Ç–µ—Å—Ç –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
        üîÑ S - —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
        üìä I - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        ''').strip()
        
        self.ui_elements['test_instructions'] = self.ui_manager.create_instructions(
            'test_controls', test_instructions, position=(-0.95, 0.1)
        )
        self.ui_elements['test_instructions'].scale = 0.6
        try:
            from ursina import color
            self.ui_elements['test_instructions'].color = color.cyan
        except:
            pass
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω–æ–π –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        operation_counter = self.ui_manager.create_counter(
            'operations', 0,
            position=(-0.95, 0.3),
            prefix="–û–ø–µ—Ä–∞—Ü–∏–π: "
        )
        self.ui_elements['operation_counter'] = operation_counter
        
        return arch_ui
    
    def update_operation_counter(self, count):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—á–µ—Ç—á–∏–∫ –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω–æ–π –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
        self.ui_manager.update_counter('operations', count, prefix="–û–ø–µ—Ä–∞—Ü–∏–π: ")
    
    def create_info_panel(self, title, content, position=(-0.95, 0.5)):
        """–°–æ–∑–¥–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—É—é –ø–∞–Ω–µ–ª—å"""
        return self.ui_manager.create_info_block(
            f'panel_{title.lower()}', title, content, position
        )
    
    def create_status_panel(self, name, text, position=(0, -0.3)):
        """–°–æ–∑–¥–∞–µ—Ç —Å—Ç–∞—Ç—É—Å–Ω—É—é –ø–∞–Ω–µ–ª—å"""
        return self.ui_manager.create_status_indicator(name, text, position)
    
    def show_demo_commands_help(self):
        """–ü–µ—á–∞—Ç–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É –ø–æ –≤—Å–µ–º –∫–æ–º–∞–Ω–¥–∞–º"""
        print("\nüéÆ –ò–ì–†–û–í–´–ï –ö–û–ú–ê–ù–î–´:")
        print("   F - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Å–ø–æ—Ä—É")
        print("   WASD - –¥–≤–∏–∂–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã")
        print("   Space/Shift - –¥–≤–∏–∂–µ–Ω–∏–µ –≤–≤–µ—Ä—Ö/–≤–Ω–∏–∑")
        print("   E/T - —É–≤–µ–ª–∏—á–∏—Ç—å/—É–º–µ–Ω—å—à–∏—Ç—å –∑—É–º")
        print("   R - —Å–±—Ä–æ—Å–∏—Ç—å –∑—É–º")
        print("   1/2 - —Ä–∞–∑–º–µ—Ä —Å–ø–æ—Ä")
        print("   Z/X - –ø–∞—Ä–∞–º–µ—Ç—Ä (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω)")
        
        print("\nüé® UI –£–ü–†–ê–í–õ–ï–ù–ò–ï:")
        print("   H - —Å–∫—Ä—ã—Ç—å/–ø–æ–∫–∞–∑–∞—Ç—å –≤–µ—Å—å UI")
    
    def show_ui_layout_map(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞—Ä—Ç—É —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è –≤—Å–µ—Ö UI —ç–ª–µ–º–µ–Ω—Ç–æ–≤"""
        print("\nüìç –ö–ê–†–¢–ê –†–ê–°–ü–û–õ–û–ñ–ï–ù–ò–Ø UI –≠–õ–ï–ú–ï–ù–¢–û–í:")
        print("=" * 50)
        print("–õ–ï–í–ê–Ø –°–¢–û–†–û–ù–ê (X < 0):")
        print("  (-0.76, 0.46)  GAME CONTROLS")
        print("  (-0.76, 0.0)   SPORE COUNTER")
        print("  (-0.76, -0.4)  F - NEW SPORE")
        print()
        print("–ü–†–ê–í–ê–Ø –°–¢–û–†–û–ù–ê (X > 0):")
        print("  (0.4, -0.4)    POSITION INFO")
        print("  (0.0, -0.3)    CURSOR STATUS")
        print("  (0.5, 0.47)    LOOK POINT DEBUG")
        print("  (0.57, -0.31)  PARAM VALUE")
        print()
        print("–¶–ï–ù–¢–†:")
        print("  (0, -0.4)      CURSOR STATUS")
        print("=" * 50)
    
    def get_stats(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É UI"""
        elapsed = time.time() - self.start_time
        
        return {
            'ui_elements': self.ui_manager.get_stats(),
            'elapsed_time': elapsed,
            'systems': {
                'has_camera_provider': 'get_camera_info' in self.data_providers,
                'has_zoom_provider': 'get_look_point_info' in self.data_providers,
                'has_param_provider': 'get_param_info' in self.data_providers,
                'has_spore_provider': 'get_spore_count' in self.data_providers,
            }
        }


# –£–¥–æ–±–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è UI_setup
def create_demo_ui(color_manager=None, ui_manager=None):
    """–°–æ–∑–¥–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π UI_setup"""
    return UI_setup(color_manager, ui_manager) 