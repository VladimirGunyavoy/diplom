"""
–î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ù–û–í–û–ô –ê–†–•–ò–¢–ï–ö–¢–£–†–´ SPORE
====================================

–≠—Ç–æ—Ç —Ñ–∞–π–ª –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã:
- SporeLogic: —á–∏—Å—Ç–∞—è –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ª–æ–≥–∏–∫–∞ (2D)
- SporeVisual: 3D –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
- Spore: –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π –∫–ª–∞—Å—Å —Å –ø–æ–ª–Ω–æ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å—é

–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã:
‚úÖ –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ (SRP)
‚úÖ –ù–µ–∑–∞–≤–∏—Å–∏–º–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏–∫–∏
‚úÖ –ü–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º–æ—Å—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
‚úÖ –ß–∏—Å—Ç–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –±–µ–∑ GUI –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –≤ –ª–æ–≥–∏–∫–µ
‚úÖ 100% –æ–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
"""

import sys
import os
from ursina import *
import numpy as np
from colorsys import hsv_to_rgb
from matplotlib.colors import LinearSegmentedColormap
import matplotlib.pyplot as plt

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—É—Ç–µ–π –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ ---
script_dir = os.path.dirname(__file__)
project_root = os.path.abspath(os.path.join(script_dir, '..'))
if project_root not in sys.path:
    sys.path.append(project_root)

# --- –ò–º–ø–æ—Ä—Ç—ã –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞ ---
from src.spawn_area import SpawnArea
from src.cost import Cost
from src.color_manager import ColorManager
from src.scene_setup import SceneSetup
from src.frame import Frame
from src.zoom_manager import ZoomManager
from src.scalable import Scalable, ScalableFrame, ScalableFloor
from src.pendulum import PendulumSystem
from src.window_manager import WindowManager
from src.param_manager import ParamManager

# ===== –ù–û–í–ê–Ø –ê–†–•–ò–¢–ï–ö–¢–£–†–ê =====
from src.spore_logic import SporeLogic      # üßÆ –ß–∏—Å—Ç–∞—è –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ª–æ–≥–∏–∫–∞
from src.spore_visual import SporeVisual    # üé® 3D –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
from src.spore import Spore                 # üîÑ –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π –∫–ª–∞—Å—Å (–ª–æ–≥–∏–∫–∞ + –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è)
from src.spore_manager import SporeManager

print("=== –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ù–û–í–û–ô –ê–†–•–ò–¢–ï–ö–¢–£–†–´ SPORE ===")
print("üèóÔ∏è  SporeLogic (–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞) + SporeVisual (3D) + Spore (–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è)")
print("‚úÖ –ü—Ä–∏–Ω—Ü–∏–ø –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–π –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏")
print("‚úÖ 100% –æ–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å 1.py")
print("=" * 50)

# ===== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø URSINA =====
app = Ursina()

# ===== –ù–ê–°–¢–†–û–ô–ö–ê –°–¶–ï–ù–´ (–∫–∞–∫ –≤ 1.py) =====
color_manager = ColorManager()

scene_setup = SceneSetup(
    init_position=(0.263, -1.451, 0.116), 
    init_rotation_x=42.750, 
    init_rotation_y=-12.135, 
    color_manager=color_manager
)

frame = Frame(color_manager=color_manager)
scene_setup.frame = frame
window_manager = WindowManager(color_manager=color_manager)

settings_param = ParamManager(0, show=False, color_manager=color_manager)

# ===== –°–û–ó–î–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´ –ú–ê–Ø–¢–ù–ò–ö–ê =====
pendulum = PendulumSystem(dt=0.1, damping=0.3)

# ===== ZOOM MANAGER =====
zoom_manager = ZoomManager(scene_setup, color_manager=color_manager)

def set_initial_zoom():
    target_a = 1.602
    zoom_manager.a_transformation = target_a
    inv_point_2d = zoom_manager.identify_invariant_point()
    p = np.array([inv_point_2d[0], 0, inv_point_2d[1]], dtype=float)
    b = (1 - target_a) * p
    zoom_manager.b_translation = b
    zoom_manager.update_transform()

invoke(set_initial_zoom, delay=0.02)

# ===== SPORE MANAGER =====
spore_manager = SporeManager(
    pendulum=pendulum, 
    zoom_manager=zoom_manager, 
    settings_param=settings_param, 
    color_manager=color_manager
)

ball_size = 1/50

setup_register = {
    'x_axis': frame.x_axis,
    'y_axis': frame.y_axis,
    'z_axis': frame.z_axis,
    'origin': frame.origin,
    'floor': scene_setup.floor
}

for name, obj in setup_register.items():
    zoom_manager.register_object(obj, name)

dt = 0.05

# ===== –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø: –°–û–ó–î–ê–ù–ò–ï –õ–û–ì–ò–ö–ò –û–¢–î–ï–õ–¨–ù–û –û–¢ –í–ò–ó–£–ê–õ–ò–ó–ê–¶–ò–ò =====
print("\nüßÆ 1. –°–æ–∑–¥–∞–Ω–∏–µ —á–∏—Å—Ç–æ–π –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ª–æ–≥–∏–∫–∏ (SporeLogic)...")

goal_position = (np.pi, 0)
goal_position_2d = np.array([np.pi, 0])  # 2D —Ü–µ–ª—å
start_position_2d = np.array([0.0, 2.0])  # 2D —Å—Ç–∞—Ä—Ç

# –°–æ–∑–¥–∞–µ–º –ª–æ–≥–∏–∫—É –æ—Ç–¥–µ–ª—å–Ω–æ - –±–µ–∑ GUI –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π!
pure_logic = SporeLogic(
    pendulum=pendulum,
    dt=dt,
    goal_position_2d=goal_position_2d,
    initial_position_2d=start_position_2d
)

print(f"   ‚úì –õ–æ–≥–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: –ø–æ–∑–∏—Ü–∏—è={pure_logic.position_2d}, —Å—Ç–æ–∏–º–æ—Å—Ç—å={pure_logic.cost:.3f}")
print(f"   ‚úì –ë–µ–∑ GUI –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π - —á–∏—Å—Ç–∞—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞!")

# –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É –ª–æ–≥–∏–∫–∏
print("\nüî¨ 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏...")
controls = pure_logic.sample_controls(3, method='random')
print(f"   ‚úì –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {controls}")

simulated_states = pure_logic.simulate_controls(controls)
print(f"   ‚úì –°–∏–º—É–ª—è—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π:")
for i, state in enumerate(simulated_states):
    logic_copy = SporeLogic(pendulum, dt, goal_position_2d, state)
    print(f"     –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ {controls[i]:.2f} ‚Üí —Å–æ—Å—Ç–æ—è–Ω–∏–µ {state} ‚Üí —Å—Ç–æ–∏–º–æ—Å—Ç—å {logic_copy.cost:.3f}")

# ===== –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø: –ù–û–í–ê–Ø –ê–†–•–ò–¢–ï–ö–¢–£–†–ê –í –î–ï–ô–°–¢–í–ò–ò =====
print("\nüé® 3. –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã—Ö —Å–ø–æ—Ä (Spore = Logic + Visual)...")

# –¶–µ–ª–µ–≤–∞—è —Å–ø–æ—Ä–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–æ–≤—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –ø–æ–¥ –∫–∞–ø–æ—Ç–æ–º!
goal = Spore(
    pendulum=pendulum,
    dt=dt,
    scale=ball_size,
    position=(goal_position[0], 0, goal_position[1]),
    goal_position=goal_position,
    is_goal=True,
    color_manager=color_manager
)

print(f"   ‚úì –¶–µ–ª–µ–≤–∞—è —Å–ø–æ—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞:")
print(f"     ‚îî 3D –ø–æ–∑–∏—Ü–∏—è: {goal.real_position}")
print(f"     ‚îî 2D –ª–æ–≥–∏–∫–∞: {goal.logic.position_2d}")
print(f"     ‚îî –°—Ç–æ–∏–º–æ—Å—Ç—å: {goal.cost:.3f}")

# –°—Ç–∞—Ä—Ç–æ–≤–∞—è —Å–ø–æ—Ä–∞
spore = Spore(
    pendulum=pendulum, 
    dt=dt, 
    goal_position=goal_position,
    scale=ball_size,
    position=(0, 0, 2),
    color_manager=color_manager
)
spore.color = color.red

print(f"   ‚úì –°—Ç–∞—Ä—Ç–æ–≤–∞—è —Å–ø–æ—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞:")
print(f"     ‚îî 3D –ø–æ–∑–∏—Ü–∏—è: {spore.real_position}")
print(f"     ‚îî 2D –ª–æ–≥–∏–∫–∞: {spore.logic.position_2d}")
print(f"     ‚îî –°—Ç–æ–∏–º–æ—Å—Ç—å: {spore.cost:.3f}")

# ===== –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø: –û–ë–†–ê–¢–ù–ê–Ø –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–¨ =====
print("\nüîÑ 4. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏...")
print("   ‚úì –í—Å–µ –º–µ—Ç–æ–¥—ã –∏–∑ 1.py —Ä–∞–±–æ—Ç–∞—é—Ç —Ç–æ—á–Ω–æ —Ç–∞–∫ –∂–µ:")

# –≠—Ç–∏ –º–µ—Ç–æ–¥—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–∞–∫ —Ä–∞–Ω—å—à–µ!
pos_2d = spore.calc_2d_pos()
pos_3d = spore.calc_3d_pos([1.0, 2.0])
evolved_3d = spore.evolve_3d(control=0.1)
cloned_spore = spore.clone()

print(f"     ‚îî calc_2d_pos(): {pos_2d}")
print(f"     ‚îî calc_3d_pos([1,2]): {pos_3d}")
print(f"     ‚îî evolve_3d(0.1): {evolved_3d}")
print(f"     ‚îî clone(): {type(cloned_spore)}")

# –û—á–∏—Å—Ç–∫–∞ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–ø–æ—Ä—ã
cloned_spore.disable()

# ===== –°–û–ó–î–ê–ù–ò–ï –û–ë–õ–ê–°–¢–ò –°–ü–ê–í–ù–ê –ò –ü–û–í–ï–†–•–ù–û–°–¢–ò –°–¢–û–ò–ú–û–°–¢–ò =====
print("\nüåç 5. –°–æ–∑–¥–∞–Ω–∏–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è (–∫–∞–∫ –≤ 1.py)...")

spawn_area = SpawnArea(
    focus1=spore, 
    focus2=goal, 
    eccentricity=0.998, 
    dimensions=2, 
    resolution=64, 
    mode='line', 
    color_manager=color_manager
)

# –ü–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç–∏ - —Ç–∞–∫–∞—è –∂–µ –∫–∞–∫ –≤ 1.py
cost_surface = Cost(
    goal_position=goal,
    spawn_area=spawn_area,
    color_manager=color_manager
)

cost_surface.generate_surface(
    mesh_generation={
        'boundary_points': 64,       
        'interior_min_radius': 0.2   
    },
    alpha=0.7,                      
    show_points=True,               
    point_size=0.02,                
    show_edges=True,                
    edge_thickness=1,               
    show_contours=True,             
    contour_levels=22,              
    contour_thickness=3,            
    contour_resolution=60           
)

print("   ‚úì SpawnArea —Å–æ–∑–¥–∞–Ω–∞")
print("   ‚úì Cost –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–∞")

# ===== –î–û–ë–ê–í–õ–ï–ù–ò–ï –í –ú–ï–ù–ï–î–ñ–ï–†–´ =====
spore_manager.add_spore(goal)
spore_manager.add_spore(spore)

zoom_manager.register_object(goal)
zoom_manager.register_object(spore)
zoom_manager.register_object(spawn_area)
zoom_manager.register_object(cost_surface)

# –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏
zoom_manager.update_transform()

print("\nüéÆ 6. –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è...")
print("   ‚úì –í—Å–µ –∫–æ–º–∞–Ω–¥—ã –∏–∑ 1.py —Ä–∞–±–æ—Ç–∞—é—Ç")
print("   ‚úì –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã:")

# ===== –†–ê–°–®–ò–†–ï–ù–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –ù–ê –≠–ö–†–ê–ù–ï =====
architecture_info = Text(
    text="–ù–û–í–ê–Ø –ê–†–•–ò–¢–ï–ö–¢–£–†–ê SPORE\n"
         "üßÆ SporeLogic: —á–∏—Å—Ç–∞—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞ (2D)\n"
         "üé® SporeVisual: 3D –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è\n"
         "üîÑ Spore: –ª–æ–≥–∏–∫–∞ + –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è\n"
         "‚úÖ 100% —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å 1.py",
    position=(-0.95, 0.9),
    scale=0.7,
    color=color.white,
    background=True,
    background_color=color.rgba(0, 0, 0, 0.7)
)

operation_counter = {'count': 0}
operation_info = Text(
    text="–û–ø–µ—Ä–∞—Ü–∏–π: 0",
    position=(-0.95, 0.4),
    scale=0.8,
    color=color.yellow
)

test_info = Text(
    text="üî¨ T - —Ç–µ—Å—Ç –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã\n"
         "üßÆ L - —Ç–µ—Å—Ç —á–∏—Å—Ç–æ–π –ª–æ–≥–∏–∫–∏\n"
         "üé® V - —Ç–µ—Å—Ç –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏\n"
         "üîÑ S - —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è\n"
         "üìä I - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
    position=(-0.95, 0.1),
    scale=0.6,
    color=color.cyan,
    background=True,
    background_color=color.rgba(0, 0, 0, 0.5)
)

# ===== –ù–û–í–´–ï –§–£–ù–ö–¶–ò–ò –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–ò =====

def test_architecture_separation():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã"""
    print("\n=== –¢–ï–°–¢ –†–ê–ó–î–ï–õ–ï–ù–ò–Ø –ê–†–•–ò–¢–ï–ö–¢–£–†–´ ===")
    operation_counter['count'] += 1
    operation_info.text = f"–û–ø–µ—Ä–∞—Ü–∏–π: {operation_counter['count']}"
    
    # 1. –¢–µ—Å—Ç–∏—Ä—É–µ–º —á–∏—Å—Ç—É—é –ª–æ–≥–∏–∫—É
    print("1. –¢–µ—Å—Ç —á–∏—Å—Ç–æ–π –ª–æ–≥–∏–∫–∏ (–±–µ–∑ GUI):")
    test_logic = SporeLogic(pendulum, 0.1, goal_position_2d, np.array([1.0, 1.5]))
    old_pos = test_logic.position_2d.copy()
    old_cost = test_logic.cost
    
    # –≠–≤–æ–ª—é—Ü–∏—è –ª–æ–≥–∏–∫–∏
    new_pos = test_logic.evolve(control=0.3)
    test_logic.set_position_2d(new_pos)
    new_cost = test_logic.cost
    
    print(f"   ‚úì –≠–≤–æ–ª—é—Ü–∏—è: {old_pos} ‚Üí {new_pos}")
    print(f"   ‚úì –°—Ç–æ–∏–º–æ—Å—Ç—å: {old_cost:.3f} ‚Üí {new_cost:.3f}")
    
    # 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é
    print("2. –¢–µ—Å—Ç –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏:")
    test_visual = SporeVisual(model='sphere', color_manager=color_manager, y_coordinate=0.0, scale=0.02)
    test_visual.sync_with_logic(test_logic)
    
    print(f"   ‚úì 2D –ª–æ–≥–∏–∫–∞: {test_logic.position_2d}")
    print(f"   ‚úì 3D –≤–∏–∑—É–∞–ª: {test_visual.real_position}")
    
    # 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ
    print("3. –¢–µ—Å—Ç –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–≥–æ Spore:")
    integrated_spore = Spore(
        dt=0.1, 
        pendulum=pendulum,
        goal_position=goal_position_2d,
        position=[new_pos[0], 0.0, new_pos[1]],
        color_manager=color_manager
    )
    
    print(f"   ‚úì –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–∞—è —Å–ø–æ—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞")
    print(f"   ‚úì –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –ª–æ–≥–∏–∫–∞: {integrated_spore.logic.position_2d}")
    print(f"   ‚úì –í–∏–∑—É–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è: {integrated_spore.real_position}")
    print(f"   ‚úì –ú–µ—Ç–æ–¥—ã —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç–∞—é—Ç: calc_2d_pos={integrated_spore.calc_2d_pos()}")
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞
    test_visual.disable()
    integrated_spore.disable()
    
    print("=== –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù ===")

def test_pure_logic():
    """–¢–µ—Å—Ç —á–∏—Å—Ç–æ–π –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ª–æ–≥–∏–∫–∏"""
    print("\n=== –¢–ï–°–¢ –ß–ò–°–¢–û–ô –õ–û–ì–ò–ö–ò ===")
    operation_counter['count'] += 1
    operation_info.text = f"–û–ø–µ—Ä–∞—Ü–∏–π: {operation_counter['count']}"
    
    # –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤
    logics = []
    for i in range(3):
        start_pos = np.array([np.random.uniform(-2, 2), np.random.uniform(-2, 2)])
        logic = SporeLogic(pendulum, 0.1, goal_position_2d, start_pos)
        logics.append(logic)
        print(f"   –õ–æ–≥–∏–∫–∞ {i+1}: pos={logic.position_2d}, cost={logic.cost:.3f}")
    
    # –≠–≤–æ–ª—é—Ü–∏—è –∫–∞–∂–¥–æ–π –ª–æ–≥–∏–∫–∏
    print("\n–≠–≤–æ–ª—é—Ü–∏—è –ª–æ–≥–∏–∫–∏:")
    for i, logic in enumerate(logics):
        controls = logic.sample_controls(1, method='random')
        old_pos = logic.position_2d.copy()
        new_pos = logic.evolve(control=controls[0])
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –ª–æ–≥–∏–∫—É —Å –Ω–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–µ–π –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –Ω–æ–≤–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏
        new_logic = SporeLogic(pendulum, 0.1, goal_position_2d, new_pos)
        
        print(f"   –õ–æ–≥–∏–∫–∞ {i+1}: {old_pos} ‚Üí {new_pos} (control={controls[0]:.2f}, cost={new_logic.cost:.3f})")
    
    print("=== –ß–ò–°–¢–ê–Ø –õ–û–ì–ò–ö–ê –ü–†–û–¢–ï–°–¢–ò–†–û–í–ê–ù–ê ===")

def test_visual_sync():
    """–¢–µ—Å—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏"""
    print("\n=== –¢–ï–°–¢ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò ===")
    operation_counter['count'] += 1
    operation_info.text = f"–û–ø–µ—Ä–∞—Ü–∏–π: {operation_counter['count']}"
    
    # –ë–µ—Ä–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–ø–æ—Ä—É –∏ —Ç–µ—Å—Ç–∏—Ä—É–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
    if spore_manager.objects:
        test_spore = spore_manager.objects[0] if len(spore_manager.objects) > 0 else spore
        
        print(f"   –î–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:")
        print(f"     ‚îî 2D –ª–æ–≥–∏–∫–∞: {test_spore.logic.position_2d}")
        print(f"     ‚îî 3D –≤–∏–∑—É–∞–ª: {test_spore.real_position}")
        
        # –ú–µ–Ω—è–µ–º –ª–æ–≥–∏–∫—É
        old_logic_pos = test_spore.logic.position_2d.copy()
        new_logic_pos = test_spore.logic.evolve(control=0.2)
        test_spore.logic.set_position_2d(new_logic_pos)
        
        print(f"   –ò–∑–º–µ–Ω–∏–ª–∏ –ª–æ–≥–∏–∫—É: {old_logic_pos} ‚Üí {new_logic_pos}")
        
        # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º
        test_spore.sync_with_logic()
        
        print(f"   –ü–æ—Å–ª–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:")
        print(f"     ‚îî 2D –ª–æ–≥–∏–∫–∞: {test_spore.logic.position_2d}")
        print(f"     ‚îî 3D –≤–∏–∑—É–∞–ª: {test_spore.real_position}")
        print(f"     ‚îî –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: {'‚úÖ' if np.allclose(test_spore.logic.position_2d, [test_spore.real_position[0], test_spore.real_position[2]]) else '‚ùå'}")
    
    print("=== –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –ü–†–û–¢–ï–°–¢–ò–†–û–í–ê–ù–ê ===")

def show_architecture_info():
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ"""
    print("\n=== –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û–ë –ê–†–•–ò–¢–ï–ö–¢–£–†–ï ===")
    operation_counter['count'] += 1
    operation_info.text = f"–û–ø–µ—Ä–∞—Ü–∏–π: {operation_counter['count']}"
    
    print("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–ø–æ—Ä:")
    print(f"   ‚îî –í—Å–µ–≥–æ —Å–ø–æ—Ä: {len(spore_manager.objects)}")
    
    if spore_manager.objects:
        total_cost = sum(s.cost for s in spore_manager.objects)
        avg_cost = total_cost / len(spore_manager.objects)
        print(f"   ‚îî –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {total_cost:.3f}")
        print(f"   ‚îî –°—Ä–µ–¥–Ω—è—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {avg_cost:.3f}")
        
        print("\nüèóÔ∏è –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:")
        for i, spore_obj in enumerate(spore_manager.objects):
            print(f"   –°–ø–æ—Ä–∞ {i+1}:")
            print(f"     ‚îî –¢–∏–ø: {type(spore_obj).__name__}")
            print(f"     ‚îî –ò–º–µ–µ—Ç –ª–æ–≥–∏–∫—É: {'‚úÖ' if hasattr(spore_obj, 'logic') else '‚ùå'}")
            print(f"     ‚îî –ù–∞—Å–ª–µ–¥—É–µ—Ç –æ—Ç SporeVisual: {'‚úÖ' if isinstance(spore_obj, SporeVisual) else '‚ùå'}")
            print(f"     ‚îî 2D/3D —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: {'‚úÖ' if hasattr(spore_obj, 'sync_with_logic') else '‚ùå'}")
    
    print("=== –ò–ù–§–û–†–ú–ê–¶–ò–Ø –ü–û–ö–ê–ó–ê–ù–ê ===")

# ===== –û–ë–†–ê–ë–û–¢–ö–ê –í–í–û–î–ê (–†–ê–°–®–ò–†–ï–ù–ù–ê–Ø) =====
def input(key):
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å –Ω–æ–≤—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏"""
    # –û–±—ã—á–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã (–∫–∞–∫ –≤ 1.py)
    scene_setup.input_handler(key)
    zoom_manager.input_handler(key)
    spore_manager.input_handler(key)
    settings_param.input_handler(key)
    spawn_area.input_handler(key)
    
    # –ù–û–í–´–ï –ö–û–ú–ê–ù–î–´ –ê–†–•–ò–¢–ï–ö–¢–£–†–´
    if key == 't':
        test_architecture_separation()
    elif key == 'l':
        test_pure_logic()
    elif key == 'v':
        test_visual_sync()
    elif key == 's':
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö —Å–ø–æ—Ä
        print("\nüîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö —Å–ø–æ—Ä...")
        for spore_obj in spore_manager.objects:
            if hasattr(spore_obj, 'sync_with_logic'):
                spore_obj.sync_with_logic()
        print("   ‚úì –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    elif key == 'i':
        show_architecture_info()

# ===== –û–ë–ù–û–í–õ–ï–ù–ò–ï (–∫–∞–∫ –≤ 1.py) =====
def update():
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã"""
    scene_setup.update(time.dt)
    zoom_manager.identify_invariant_point()
    settings_param.update()

# ===== –§–ò–ù–ê–õ–¨–ù–ê–Ø –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø =====
print("\nüéâ 7. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≥–æ—Ç–æ–≤–∞!")
print("\nüìã –ù–û–í–´–ï –ö–û–ú–ê–ù–î–´:")
print("   T - —Ç–µ—Å—Ç —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã")
print("   L - —Ç–µ—Å—Ç —á–∏—Å—Ç–æ–π –ª–æ–≥–∏–∫–∏") 
print("   V - —Ç–µ—Å—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏")
print("   S - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è")
print("   I - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ")
print("\nüìã –û–ë–´–ß–ù–´–ï –ö–û–ú–ê–ù–î–´ (–∫–∞–∫ –≤ 1.py):")
print("   F - —Å–æ–∑–¥–∞—Ç—å —Å–ø–æ—Ä—É")
print("   –û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–∞–∫ —Ä–∞–Ω—å—à–µ")
print("\n" + "="*50)
print("üöÄ –ù–û–í–ê–Ø –ê–†–•–ò–¢–ï–ö–¢–£–†–ê –ì–û–¢–û–í–ê –ö –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ!")
print("="*50)

# ===== –ó–ê–ü–£–°–ö =====
if __name__ == '__main__':
    app.run() 