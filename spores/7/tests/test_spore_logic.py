#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è SporeLogic - –ø—Ä–æ–≤–µ—Ä—è–µ–º –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫—É—é –ª–æ–≥–∏–∫—É –±–µ–∑ GUI.
–ó–∞–ø—É—Å—Ç–∏—Ç–µ: python test_spore_logic.py
"""

import sys
import os
import numpy as np

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src (–∏–∑ tests –≤ –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞)
sys.path.append('../src')

from src.pendulum import PendulumSystem
from src.spore_logic import SporeLogic

def test_spore_logic():
    print("=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ SporeLogic ===")
    
    # –°–æ–∑–¥–∞–µ–º —Å–∏—Å—Ç–µ–º—É –º–∞—è—Ç–Ω–∏–∫–∞
    pendulum = PendulumSystem(dt=0.1, damping=0.3)
    print(f"‚úì –°–æ–∑–¥–∞–Ω PendulumSystem: dt={pendulum.dt}, damping={pendulum.damping}")
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    goal_pos_2d = np.array([np.pi, 0.0])  # (x, z)
    initial_pos_2d = np.array([0.0, 2.0])  # (x, z)
    dt = 0.1
    
    # –°–æ–∑–¥–∞–µ–º SporeLogic
    print(f"\n--- –°–æ–∑–¥–∞–Ω–∏–µ SporeLogic ---")
    spore_logic = SporeLogic(
        pendulum=pendulum,
        dt=dt,
        goal_position_2d=goal_pos_2d,
        initial_position_2d=initial_pos_2d
    )
    print(f"‚úì –°–æ–∑–¥–∞–Ω SporeLogic: {spore_logic}")
    
    # –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    print(f"\n--- –¢–µ—Å—Ç 1: –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ---")
    pos = spore_logic.get_position_2d()
    print(f"‚úì –ü–æ–∑–∏—Ü–∏—è: {pos}")
    print(f"‚úì –°—Ç–æ–∏–º–æ—Å—Ç—å: {spore_logic.cost:.3f}")
    assert np.allclose(pos, initial_pos_2d), f"–û–∂–∏–¥–∞–ª–∏ {initial_pos_2d}, –ø–æ–ª—É—á–∏–ª–∏ {pos}"
    
    # –¢–µ—Å—Ç 2: –≠–≤–æ–ª—é—Ü–∏—è –±–µ–∑ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    print(f"\n--- –¢–µ—Å—Ç 2: –≠–≤–æ–ª—é—Ü–∏—è –±–µ–∑ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è ---")
    next_state = spore_logic.evolve(control=0)
    print(f"‚úì –≠–≤–æ–ª—é—Ü–∏—è {pos} -> {next_state}")
    assert len(next_state) == 2, f"–û–∂–∏–¥–∞–ª–∏ 2D —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –ø–æ–ª—É—á–∏–ª–∏ {len(next_state)}D"
    
    # –¢–µ—Å—Ç 3: –≠–≤–æ–ª—é—Ü–∏—è —Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º
    print(f"\n--- –¢–µ—Å—Ç 3: –≠–≤–æ–ª—é—Ü–∏—è —Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º ---")
    control = 0.5
    next_state_with_control = spore_logic.evolve(control=control)
    print(f"‚úì –≠–≤–æ–ª—é—Ü–∏—è —Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º {control}: {pos} -> {next_state_with_control}")
    
    # –¢–µ—Å—Ç 4: step (—Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π SporeLogic)
    print(f"\n--- –¢–µ—Å—Ç 4: Step (–Ω–æ–≤–∞—è SporeLogic) ---")
    new_spore = spore_logic.step(control=0.2)
    print(f"‚úì –ò—Å—Ö–æ–¥–Ω–∞—è: {spore_logic}")
    print(f"‚úì –ù–æ–≤–∞—è: {new_spore}")
    assert not np.allclose(spore_logic.get_position_2d(), new_spore.get_position_2d()), "–ü–æ–∑–∏—Ü–∏–∏ –¥–æ–ª–∂–Ω—ã –æ—Ç–ª–∏—á–∞—Ç—å—Å—è"
    
    # –¢–µ—Å—Ç 5: clone
    print(f"\n--- –¢–µ—Å—Ç 5: –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ ---")
    cloned_spore = spore_logic.clone()
    print(f"‚úì –û—Ä–∏–≥–∏–Ω–∞–ª: {spore_logic}")
    print(f"‚úì –ö–ª–æ–Ω: {cloned_spore}")
    assert np.allclose(spore_logic.get_position_2d(), cloned_spore.get_position_2d()), "–ö–ª–æ–Ω –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å —Ç—É –∂–µ –ø–æ–∑–∏—Ü–∏—é"
    assert spore_logic is not cloned_spore, "–ö–ª–æ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–º –æ–±—ä–µ–∫—Ç–æ–º"
    
    # –¢–µ—Å—Ç 6: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏–π
    print(f"\n--- –¢–µ—Å—Ç 6: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏–π ---")
    random_controls = spore_logic.sample_random_controls(5)
    mesh_controls = spore_logic.sample_mesh_controls(5)
    print(f"‚úì –°–ª—É—á–∞–π–Ω—ã–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {random_controls}")
    print(f"‚úì –°–µ—Ç–æ—á–Ω—ã–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {mesh_controls}")
    
    a, b = pendulum.get_control_bounds()
    assert len(random_controls) == 5, "–î–æ–ª–∂–Ω–æ –±—ã—Ç—å 5 —Å–ª—É—á–∞–π–Ω—ã—Ö —É–ø—Ä–∞–≤–ª–µ–Ω–∏–π"
    assert len(mesh_controls) == 5, "–î–æ–ª–∂–Ω–æ –±—ã—Ç—å 5 —Å–µ—Ç–æ—á–Ω—ã—Ö —É–ø—Ä–∞–≤–ª–µ–Ω–∏–π"
    assert np.all(random_controls >= a) and np.all(random_controls <= b), "–°–ª—É—á–∞–π–Ω—ã–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –≥—Ä–∞–Ω–∏—Ü–∞—Ö"
    
    # –¢–µ—Å—Ç 7: –°–∏–º—É–ª—è—Ü–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏–π
    print(f"\n--- –¢–µ—Å—Ç 7: –°–∏–º—É–ª—è—Ü–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏–π ---")
    controls = [0, 0.5, -0.5]
    simulated_states = spore_logic.simulate_controls(controls)
    print(f"‚úì –£–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {controls}")
    print(f"‚úì –†–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è:")
    for i, state in enumerate(simulated_states):
        print(f"   {controls[i]} -> {state}")
    
    assert simulated_states.shape == (3, 2), f"–û–∂–∏–¥–∞–ª–∏ —Ñ–æ—Ä–º—É (3, 2), –ø–æ–ª—É—á–∏–ª–∏ {simulated_states.shape}"
    
    # –¢–µ—Å—Ç 8: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—à–∏–±–æ–∫
    print(f"\n--- –¢–µ—Å—Ç 8: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—à–∏–±–æ–∫ ---")
    try:
        # –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å —Ü–µ–ª–∏
        SporeLogic(pendulum, dt, [1, 2, 3], initial_pos_2d)
        assert False, "–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—à–∏–±–∫–∞ –¥–ª—è 3D —Ü–µ–ª–∏"
    except ValueError as e:
        print(f"‚úì –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è 3D —Ü–µ–ª–∏: {e}")
    
    try:
        # –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å –Ω–∞—á–∞–ª—å–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
        SporeLogic(pendulum, dt, goal_pos_2d, [1, 2, 3])
        assert False, "–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—à–∏–±–∫–∞ –¥–ª—è 3D –Ω–∞—á–∞–ª—å–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏"
    except ValueError as e:
        print(f"‚úì –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è 3D –Ω–∞—á–∞–ª—å–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏: {e}")
    
    try:
        # –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å –≤ evolve
        spore_logic.evolve(state=[1, 2, 3])
        assert False, "–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—à–∏–±–∫–∞ –¥–ª—è 3D —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤ evolve"
    except ValueError as e:
        print(f"‚úì –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è 3D —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤ evolve: {e}")
    
    print(f"\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã SporeLogic –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
    return True

if __name__ == "__main__":
    try:
        test_spore_logic()
        print(f"\n‚úÖ SporeLogic –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1) 