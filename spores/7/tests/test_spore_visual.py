#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è SporeVisual - –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é –∏ 2D‚Üî3D –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é.
–ó–∞–ø—É—Å—Ç–∏—Ç–µ: cd tests && python3 test_spore_visual.py
"""

import sys
import os
import numpy as np

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src (–∏–∑ tests –≤ –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞)
sys.path.append('..')
sys.path.append('.')

# –ú–æ–∫–∞–µ–º ursina –î–û –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –µ–≥–æ –∏—Å–ø–æ–ª—å–∑—É—é—Ç
class MockColor:
    def rgba(self, r, g, b, a):
        return (r, g, b, a)

class MockEntity:
    def __init__(self, *args, **kwargs):
        self.position = kwargs.get('position', (0, 0, 0))
        self.scale = kwargs.get('scale', (1, 1, 1))
        self.color = kwargs.get('color', (1, 1, 1, 1))

# –ú–æ–∫–∞–µ–º –º–æ–¥—É–ª—å ursina –ø–µ—Ä–µ–¥ –∏–º–ø–æ—Ä—Ç–æ–º
mock_ursina = type('MockUrsina', (), {
    'Entity': MockEntity,
    'color': MockColor()
})()

sys.modules['ursina'] = mock_ursina

# –î–æ–±–∞–≤–ª—è–µ–º Entity –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –¥–ª—è import *
import builtins
builtins.Entity = MockEntity

# –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥—É–ª–∏
from src.pendulum import PendulumSystem
from src.spore_logic import SporeLogic
from src.color_manager import ColorManager
from src.spore_visual import SporeVisual

def test_spore_visual():
    print("=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ SporeVisual ===")
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    color_manager = ColorManager()
    print(f"‚úì –°–æ–∑–¥–∞–Ω ColorManager")
    
    # –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ SporeVisual
    print(f"\n--- –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ SporeVisual ---")
    spore_visual = SporeVisual(
        model='sphere',
        color_manager=color_manager,
        is_goal=False,
        y_coordinate=0.5,
        position=(1.0, 0.5, 2.0),
        scale=0.1
    )
    print(f"‚úì –°–æ–∑–¥–∞–Ω SporeVisual: {spore_visual}")
    print(f"‚úì Y –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞: {spore_visual.y_coordinate}")
    print(f"‚úì real_position: {spore_visual.real_position}")
    
    # –¢–µ—Å—Ç 2: –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è 3D‚Üí2D
    print(f"\n--- –¢–µ—Å—Ç 2: –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è 3D‚Üí2D ---")
    pos_2d = spore_visual.get_logic_position_2d()
    print(f"‚úì 3D –ø–æ–∑–∏—Ü–∏—è: {spore_visual.real_position}")
    print(f"‚úì 2D –ø–æ–∑–∏—Ü–∏—è: {pos_2d}")
    expected_2d = np.array([1.0, 2.0])  # (x, z) –∏–∑ (1.0, 0.5, 2.0)
    assert np.allclose(pos_2d, expected_2d), f"–û–∂–∏–¥–∞–ª–∏ {expected_2d}, –ø–æ–ª—É—á–∏–ª–∏ {pos_2d}"
    
    # –¢–µ—Å—Ç 3: –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è 2D‚Üí3D
    print(f"\n--- –¢–µ—Å—Ç 3: –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è 2D‚Üí3D ---")
    new_2d_pos = np.array([3.0, 4.0])
    spore_visual.set_logic_position_2d(new_2d_pos)
    print(f"‚úì –ù–æ–≤–∞—è 2D –ø–æ–∑–∏—Ü–∏—è: {new_2d_pos}")
    print(f"‚úì –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è 3D –ø–æ–∑–∏—Ü–∏—è: {spore_visual.real_position}")
    expected_3d = np.array([3.0, 0.5, 4.0])  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º Y
    assert np.allclose(spore_visual.real_position, expected_3d), f"–û–∂–∏–¥–∞–ª–∏ {expected_3d}, –ø–æ–ª—É—á–∏–ª–∏ {spore_visual.real_position}"
    
    # –¢–µ—Å—Ç 4: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å SporeLogic
    print(f"\n--- –¢–µ—Å—Ç 4: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å SporeLogic ---")
    pendulum = PendulumSystem(dt=0.1, damping=0.3)
    spore_logic = SporeLogic(
        pendulum=pendulum,
        dt=0.1,
        goal_position_2d=np.array([np.pi, 0.0]),
        initial_position_2d=np.array([0.0, 2.0])
    )
    print(f"‚úì –°–æ–∑–¥–∞–Ω SporeLogic: {spore_logic}")
    
    # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º
    spore_visual.sync_with_logic(spore_logic)
    print(f"‚úì –ü–æ—Å–ª–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:")
    print(f"  SporeLogic –ø–æ–∑–∏—Ü–∏—è: {spore_logic.get_position_2d()}")
    print(f"  SporeVisual 3D: {spore_visual.real_position}")
    print(f"  SporeVisual 2D: {spore_visual.get_logic_position_2d()}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    assert np.allclose(spore_logic.get_position_2d(), spore_visual.get_logic_position_2d()), "–ü–æ–∑–∏—Ü–∏–∏ –¥–æ–ª–∂–Ω—ã —Å–æ–≤–ø–∞–¥–∞—Ç—å –ø–æ—Å–ª–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"
    
    # –¢–µ—Å—Ç 5: –ò–∑–º–µ–Ω–µ–Ω–∏–µ Y –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
    print(f"\n--- –¢–µ—Å—Ç 5: –ò–∑–º–µ–Ω–µ–Ω–∏–µ Y –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã ---")
    old_2d = spore_visual.get_logic_position_2d()
    old_3d = spore_visual.real_position.copy()
    print(f"‚úì –î–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è Y: 2D={old_2d}, 3D={old_3d}")
    
    spore_visual.set_y_coordinate(1.5)
    new_2d = spore_visual.get_logic_position_2d()
    new_3d = spore_visual.real_position
    print(f"‚úì –ü–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è Y –Ω–∞ 1.5: 2D={new_2d}, 3D={new_3d}")
    
    # 2D –ø–æ–∑–∏—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –æ—Å—Ç–∞—Ç—å—Å—è —Ç–æ–π –∂–µ, Y –¥–æ–ª–∂–Ω–∞ –∏–∑–º–µ–Ω–∏—Ç—å—Å—è
    assert np.allclose(old_2d, new_2d), "2D –ø–æ–∑–∏—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –æ—Å—Ç–∞—Ç—å—Å—è –Ω–µ–∏–∑–º–µ–Ω–Ω–æ–π"
    assert new_3d[1] == 1.5, f"Y –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å 1.5, –ø–æ–ª—É—á–∏–ª–∏ {new_3d[1]}"
    assert spore_visual.y_coordinate == 1.5, "y_coordinate –¥–æ–ª–∂–Ω–∞ –æ–±–Ω–æ–≤–∏—Ç—å—Å—è"
    
    # –¢–µ—Å—Ç 6: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–æ–º
    print(f"\n--- –¢–µ—Å—Ç 6: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–æ–º ---")
    print(f"‚úì –¢–µ–∫—É—â–∏–π —Ü–≤–µ—Ç (default): {spore_visual.color}")
    
    spore_visual.set_color_type('ghost')
    print(f"‚úì –¶–≤–µ—Ç –ø–æ—Å–ª–µ —Å–º–µ–Ω—ã –Ω–∞ 'ghost': {spore_visual.color}")
    
    spore_visual.set_color_type('goal')  
    print(f"‚úì –¶–≤–µ—Ç –ø–æ—Å–ª–µ —Å–º–µ–Ω—ã –Ω–∞ 'goal': {spore_visual.color}")
    
    # –¢–µ—Å—Ç 7: –¶–µ–ª–µ–≤–∞—è —Å–ø–æ—Ä–∞ (is_goal=True)
    print(f"\n--- –¢–µ—Å—Ç 7: –¶–µ–ª–µ–≤–∞—è —Å–ø–æ—Ä–∞ ---")
    goal_visual = SporeVisual(
        color_manager=color_manager,
        is_goal=True,
        position=(np.pi, 0.0, 0.0)
    )
    print(f"‚úì –°–æ–∑–¥–∞–Ω–∞ —Ü–µ–ª–µ–≤–∞—è —Å–ø–æ—Ä–∞: {goal_visual}")
    print(f"‚úì is_goal: {goal_visual.is_goal}")
    print(f"‚úì –¶–≤–µ—Ç —Ü–µ–ª–µ–≤–æ–π —Å–ø–æ—Ä—ã: {goal_visual.color}")
    
    # –¢–µ—Å—Ç 8: apply_transform (–∏–º–∏—Ç–∞—Ü–∏—è ZoomManager)
    print(f"\n--- –¢–µ—Å—Ç 8: apply_transform ---")
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    spore_visual.real_position = np.array([1.0, 0.0, 2.0])
    spore_visual.real_scale = np.array([0.1, 0.1, 0.1])
    
    print(f"‚úì –î–æ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏:")
    print(f"  real_position: {spore_visual.real_position}")
    print(f"  real_scale: {spore_visual.real_scale}")
    print(f"  position: {spore_visual.position}")
    print(f"  scale: {spore_visual.scale}")
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—é (a=2, b=[1,1,1], spores_scale=0.5)
    a = 2.0
    b = np.array([1.0, 1.0, 1.0])
    spores_scale = 0.5
    
    spore_visual.apply_transform(a, b, spores_scale=spores_scale)
    
    print(f"‚úì –ü–æ—Å–ª–µ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ (a={a}, b={b}, spores_scale={spores_scale}):")
    print(f"  position: {spore_visual.position}")
    print(f"  scale: {spore_visual.scale}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º—É–ª—ã —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏
    expected_position = spore_visual.real_position * a + b  # [1,0,2]*2 + [1,1,1] = [3,1,5]
    expected_scale = spore_visual.real_scale * a * spores_scale  # [0.1,0.1,0.1]*2*0.5 = [0.1,0.1,0.1]
    
    assert np.allclose(spore_visual.position, expected_position), f"–ü–æ–∑–∏—Ü–∏—è: –æ–∂–∏–¥–∞–ª–∏ {expected_position}, –ø–æ–ª—É—á–∏–ª–∏ {spore_visual.position}"
    assert np.allclose(spore_visual.scale, expected_scale), f"–ú–∞—Å—à—Ç–∞–±: –æ–∂–∏–¥–∞–ª–∏ {expected_scale}, –ø–æ–ª—É—á–∏–ª–∏ {spore_visual.scale}"
    
    # –¢–µ—Å—Ç 9: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—à–∏–±–æ–∫
    print(f"\n--- –¢–µ—Å—Ç 9: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—à–∏–±–æ–∫ ---")
    try:
        spore_visual.set_logic_position_2d([1, 2, 3])  # 3D –≤–º–µ—Å—Ç–æ 2D
        assert False, "–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—à–∏–±–∫–∞ –¥–ª—è 3D –ø–æ–∑–∏—Ü–∏–∏"
    except ValueError as e:
        print(f"‚úì –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è 3D –ø–æ–∑–∏—Ü–∏–∏: {e}")
    
    print(f"\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã SporeVisual –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
    return True

if __name__ == "__main__":
    try:
        test_spore_visual()
        print(f"\n‚úÖ SporeVisual –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1) 