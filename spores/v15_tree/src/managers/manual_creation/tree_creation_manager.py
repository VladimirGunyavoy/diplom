from typing import Optional, List
import numpy as np
from ursina import destroy

from .shared_dependencies import SharedDependencies
from ...managers.spore_manager import SporeManager
from ...core.spore import Spore
from ...visual.link import Link


class TreeCreationManager:
    """
    –£–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ–º –¥–µ—Ä–µ–≤—å–µ–≤ —Ä–∞–∑–Ω–æ–π –≥–ª—É–±–∏–Ω—ã.

    –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏:
    - –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ—Ä–µ–≤—å–µ–≤ —Å–ø–æ—Ä–æ–≤ –≤ –ø–æ–∑–∏—Ü–∏–∏ –∫—É—Ä—Å–æ—Ä–∞
    - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞–º–∏ —Å–æ–∑–¥–∞–Ω–∏—è (spores/tree)
    - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–ª—É–±–∏–Ω—ã –¥–µ—Ä–µ–≤–∞
    - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å SporeTree –ª–æ–≥–∏–∫–æ–π
    """

    def __init__(self, deps: SharedDependencies, spore_manager: SporeManager):
        self.deps = deps
        self.spore_manager = spore_manager

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è
        self.creation_mode = 'spores'  # 'spores' –∏–ª–∏ 'tree'
        self.tree_depth = 2

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ dt –≤–µ–∫—Ç–æ—Ä–∞ –æ—Ç –ø—Ä–∏–∑—Ä–∞—á–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞
        self.ghost_tree_dt_vector = None

        # –î–û–ë–ê–í–ò–¢–¨: –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
        self.created_spores: List[Spore] = []
        self.created_links: List[Link] = []
        self.created_spore_keys: List[str] = []  # –ö–ª—é—á–∏ –≤ zoom_manager
        self.created_link_keys: List[str] = []   # –ö–ª—é—á–∏ –≤ zoom_manager

        print("   ‚úì Tree Creation Manager —Å–æ–∑–¥–∞–Ω")

    def toggle_creation_mode(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Ä–µ–∂–∏–º —Å–æ–∑–¥–∞–Ω–∏—è."""
        if self.creation_mode == 'spores':
            self.creation_mode = 'tree'
            print("üå≤ –†–µ–∂–∏–º: –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ—Ä–µ–≤—å–µ–≤")
        else:
            self.creation_mode = 'spores'
            print("üåü –†–µ–∂–∏–º: –°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–æ—Ä")

    def set_tree_depth(self, depth: int):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≥–ª—É–±–∏–Ω—É –¥–µ—Ä–µ–≤–∞."""
        self.tree_depth = max(1, min(depth, 2))
        print(f"üå≤ –ì–ª—É–±–∏–Ω–∞ –¥–µ—Ä–µ–≤–∞: {self.tree_depth}")

    def create_tree_at_cursor(self, preview_position_2d: np.ndarray, depth: Optional[int] = None) -> Optional[List[Spore]]:
        """
        –°–æ–∑–¥–∞–µ—Ç –¥–µ—Ä–µ–≤–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π –≥–ª—É–±–∏–Ω—ã.
        
        Args:
            preview_position_2d: –ü–æ–∑–∏—Ü–∏—è –∫—É—Ä—Å–æ—Ä–∞ –≤ 2D –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö
            depth: –ì–ª—É–±–∏–Ω–∞ –¥–µ—Ä–µ–≤–∞ (1 –∏–ª–∏ 2). –ï—Å–ª–∏ None, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç self.tree_depth

        Returns:
            –°–ø–∏—Å–æ–∫ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Å–ø–æ—Ä –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ

        –õ–û–ì–ò–ö–ê: –¥–µ—Ä–µ–≤–æ ‚Üí —Å–ø–æ—Ä—ã –∏ –ª–∏–Ω–∫–∏ ‚Üí –¥–æ–±–∞–≤–ª—è–µ–º –≤ –æ–±—â–∏–π –≥—Ä–∞—Ñ ‚Üí –∑–∞–±—ã–≤–∞–µ–º –¥–µ—Ä–µ–≤–æ
        """
        if depth is None:
            depth = self.tree_depth
        depth = int(depth)  # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ depth - —ç—Ç–æ int
        print("üö® –í–´–ó–í–ê–ù create_tree_at_cursor()!!! –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –¥–µ—Ä–µ–≤–∞!")
        try:
            from ...visual.spore_tree_visual import SporeTreeVisual
            from ...logic.tree.spore_tree import SporeTree
            from ...logic.tree.spore_tree_config import SporeTreeConfig

            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π dt
            dt = self._get_current_dt()

            # –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –¥–ª—è –¥–µ—Ä–µ–≤–∞
            tree_position = np.array([preview_position_2d[0], preview_position_2d[1]])

            # –°–æ–∑–¥–∞–µ–º –ª–æ–≥–∏–∫—É –¥–µ—Ä–µ–≤–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ dt –≤–µ–∫—Ç–æ—Ä–∞–º–∏
            if self.ghost_tree_dt_vector is not None and len(self.ghost_tree_dt_vector) == 12:
                # –ë–µ—Ä–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è, —Ç.–∫. SporeTree –æ–∂–∏–¥–∞–µ—Ç –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ dt
                dt_children_abs = np.abs(self.ghost_tree_dt_vector[:4])
                dt_grandchildren_abs = np.abs(self.ghost_tree_dt_vector[4:])

                print(f"üå≤ –ò—Å–ø–æ–ª—å–∑—É–µ–º dt –∏–∑ –ø—Ä–∏–∑—Ä–∞—á–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞")
                print(f"   üìä dt_children: {dt_children_abs}")
                print(f"   üìä dt_grandchildren: {dt_grandchildren_abs}")

                tree_config = SporeTreeConfig(
                    initial_position=tree_position,
                    dt_base=dt
                )

                tree_logic = SporeTree(
                    pendulum=self.deps.pendulum,
                    config=tree_config,
                    dt_children=dt_children_abs,
                    dt_grandchildren=dt_grandchildren_abs,
                    auto_create=False
                )
                
                # –°–æ–∑–¥–∞–µ–º –¥–µ—Ç–µ–π (–≤—Å–µ–≥–¥–∞)
                tree_logic.create_children()
                
                # –°–æ–∑–¥–∞–µ–º –≤–Ω—É–∫–æ–≤ –µ—Å–ª–∏ –Ω—É–∂–Ω–∞ –≥–ª—É–±–∏–Ω–∞ 2
                if depth >= 2:
                    tree_logic.create_grandchildren()
            else:
                # –°–æ–∑–¥–∞–µ–º –æ–±—ã—á–Ω–æ–µ –¥–µ—Ä–µ–≤–æ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ dt
                print(f"üå≤ –°–æ–∑–¥–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –¥–µ—Ä–µ–≤–æ")

                tree_config = SporeTreeConfig(
                    initial_position=tree_position,
                    dt_base=dt
                )

                tree_logic = SporeTree(
                    pendulum=self.deps.pendulum,
                    config=tree_config,
                    auto_create=True
                )
                
                # –°–æ–∑–¥–∞–µ–º –¥–µ—Ç–µ–π (–≤—Å–µ–≥–¥–∞)
                tree_logic.create_children()
                
                # –°–æ–∑–¥–∞–µ–º –≤–Ω—É–∫–æ–≤ –µ—Å–ª–∏ –Ω—É–∂–Ω–∞ –≥–ª—É–±–∏–Ω–∞ 2
                if depth >= 2:
                    tree_logic.create_grandchildren()

            # –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é –¥–µ—Ä–µ–≤–∞
            goal_position = self.deps.config.get('spore', {}).get('goal_position', [0, 0])
            
            # DEBUG: –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            print(f"üîç DEBUG: –ü–æ–ª–Ω—ã–π self.config['spore']: {self.deps.config.get('spore', '–ù–ï–¢ –ö–õ–Æ–ß–ê!')}")
            spore_config = self.deps.config.get('spore', {})
            print(f"üîç DEBUG: spore_config: {spore_config}")
            spore_scale = spore_config.get('scale', '–ù–ï–¢ SCALE!')
            print(f"üîç DEBUG: spore scale –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {spore_scale}")
            print(f"üîç DEBUG: zoom_manager.spores_scale: {self.deps.zoom_manager.spores_scale}")

            # –ü–†–û–í–ï–†–ö–ê: –ï—Å–ª–∏ scale –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç - —ç—Ç–æ –±–∞–≥!
            if 'scale' not in spore_config:
                print(f"‚ùå –ë–ê–ì: scale –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ spore_config! –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º 0.02")
                spore_config = spore_config.copy()
                spore_config['scale'] = 0.02

            # –í–ê–ñ–ù–û: –ü–µ—Ä–µ–¥–∞–µ–º –≤–µ—Å—å config, –Ω–µ —Ç–æ–ª—å–∫–æ spore_config, —á—Ç–æ–±—ã –≤–∫–ª—é—á–∏—Ç—å goal_position
            visual_config = self.deps.config.copy()
            visual_config['spore']['goal_position'] = goal_position

            # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä SporeTreeVisual
            tree_visual = SporeTreeVisual(
                color_manager=self.deps.color_manager,
                zoom_manager=self.deps.zoom_manager,
                config=visual_config,
                id_manager=self.spore_manager.id_manager  # –ü–µ—Ä–µ–¥–∞–µ–º id_manager
            )

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ª–æ–≥–∏–∫—É –¥–µ—Ä–µ–≤–∞
            tree_visual.set_tree_logic(tree_logic)
            
            # –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é
            tree_visual.create_visual()

            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–ø–æ—Ä—ã –∏ –ª–∏–Ω–∫–∏ –∏–∑ –¥–µ—Ä–µ–≤–∞
            created_spores = []
            created_links = []

            # –°–æ–±–∏—Ä–∞–µ–º —Å–ø–æ—Ä—ã
            if tree_visual.root_spore:
                created_spores.append(tree_visual.root_spore)

            created_spores.extend(tree_visual.child_spores)

            if depth >= 2:
                created_spores.extend(tree_visual.grandchild_spores)

            # –ü–†–ê–í–ò–õ–¨–ù–´–ô –ü–û–†–Ø–î–û–ö: –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å–∏—Å—Ç–µ–º—É, –ø–æ—Ç–æ–º –ø—Ä–∏–º–µ–Ω—è–µ–º —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏
            # 1. –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–æ—Ä—ã –≤ spore_manager
            for spore in created_spores:
                if spore:
                    self.spore_manager.add_spore_manual(spore)

            # 2. –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å–ø–æ—Ä—ã –≤ zoom_manager (–∏—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ –ø—Ä–∏—Å–≤–æ–µ–Ω–Ω—ã–µ ID)
            spore_keys = []
            for spore in created_spores:
                if spore:
                    key = f"tree_spore_{spore.id}"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ –ø—Ä–∏—Å–≤–æ–µ–Ω–Ω—ã–π ID
                    self.deps.zoom_manager.register_object(spore, key)
                    spore_keys.append(key)
                    spore._zoom_manager_key = key

            # –î–û–ë–ê–í–ò–¢–¨: –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
            self.created_spores.extend(created_spores)
            self.created_spore_keys.extend(spore_keys)

            # –°–æ–±–∏—Ä–∞–µ–º –ª–∏–Ω–∫–∏
            created_links.extend(tree_visual.child_links)

            if self.tree_depth >= 2:
                created_links.extend(tree_visual.grandchild_links)

            # 3. –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ª–∏–Ω–∫–∏ –≤ zoom_manager (–∏—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ –ø—Ä–∏—Å–≤–æ–µ–Ω–Ω—ã–µ ID)
            link_keys = []
            for link in created_links:
                if link:
                    key = f"tree_link_{link.id}"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ –ø—Ä–∏—Å–≤–æ–µ–Ω–Ω—ã–π ID
                    self.deps.zoom_manager.register_object(link, key)
                    link_keys.append(key)
                    link._zoom_manager_key = key

            # –î–û–ë–ê–í–ò–¢–¨: –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
            self.created_links.extend(created_links)
            self.created_link_keys.extend(link_keys)

            # 4. –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∫–æ –≤—Å–µ–º –æ–±—ä–µ–∫—Ç–∞–º —Å—Ä–∞–∑—É
            self.deps.zoom_manager.update_transform()

            # –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º SporeTreeVisual
            tree_visual.root_spore = None
            tree_visual.child_spores.clear()
            tree_visual.grandchild_spores.clear()
            tree_visual.child_links.clear()
            tree_visual.grandchild_links.clear()
            tree_visual.visual_created = False

            tree_visual = None
            tree_logic = None

            print(f"üå≤ –î–µ—Ä–µ–≤–æ —Å–æ–∑–¥–∞–Ω–æ –≤ ({preview_position_2d[0]:.3f}, {preview_position_2d[1]:.3f})")
            print(f"   üìä –ì–ª—É–±–∏–Ω–∞: {self.tree_depth}, dt: {dt:.4f}")
            print(f"   üéØ –°–æ–∑–¥–∞–Ω–æ: {len(created_spores)} —Å–ø–æ—Ä + {len(created_links)} –ª–∏–Ω–∫–æ–≤")

            return created_spores

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ—Ä–µ–≤–∞: {e}")
            import traceback
            traceback.print_exc()
            return None

    def _get_current_dt(self) -> float:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π dt –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."""
        return self.deps.config.get('pendulum', {}).get('dt', 0.1)

    def clear_all_created_objects(self) -> None:
        """–û—á–∏—â–∞–µ—Ç –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —ç—Ç–∏–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º."""
        print(f"üßπ TreeCreationManager: –æ—á–∏—Å—Ç–∫–∞ {len(self.created_spores)} —Å–ø–æ—Ä –∏ {len(self.created_links)} –ª–∏–Ω–∫–æ–≤")
        
        # 1. –£–¥–∞–ª—è–µ–º –ª–∏–Ω–∫–∏
        for i, link in enumerate(self.created_links):
            try:
                # –î–µ—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∏–∑ zoom_manager
                if i < len(self.created_link_keys):
                    self.deps.zoom_manager.unregister_object(self.created_link_keys[i])
                
                # –£–Ω–∏—á—Ç–æ–∂–∞–µ–º –æ–±—ä–µ–∫—Ç
                destroy(link)
                print(f"   ‚úì –£–¥–∞–ª–µ–Ω –ª–∏–Ω–∫: {self.created_link_keys[i] if i < len(self.created_link_keys) else f'link_{i}'}")
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ª–∏–Ω–∫–∞ {i}: {e}")
        
        # 2. –£–¥–∞–ª—è–µ–º —Å–ø–æ—Ä—ã (–ù–ï –∏–∑ spore_manager - —ç—Ç–æ —Å–¥–µ–ª–∞–µ—Ç —Å–∞–º spore_manager)
        for i, spore in enumerate(self.created_spores):
            try:
                # –¢–æ–ª—å–∫–æ –¥–µ—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∏–∑ zoom_manager
                if i < len(self.created_spore_keys):
                    self.deps.zoom_manager.unregister_object(self.created_spore_keys[i])
                    print(f"   ‚úì –î–µ—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ —Å–ø–æ—Ä–∞: {self.created_spore_keys[i]}")
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –¥–µ—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å–ø–æ—Ä—ã {i}: {e}")
        
        # 3. –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–∫–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
        self.created_spores.clear()
        self.created_links.clear()
        self.created_spore_keys.clear()
        self.created_link_keys.clear()
        
        print("   ‚úì TreeCreationManager –æ—á–∏—â–µ–Ω")
