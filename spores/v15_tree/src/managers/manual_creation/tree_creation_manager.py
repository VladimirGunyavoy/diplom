from typing import Optional, List
import numpy as np
from ursina import destroy

from ...managers.zoom_manager import ZoomManager
from ...managers.spore_manager import SporeManager
from ...managers.color_manager import ColorManager
from ...logic.pendulum import PendulumSystem
from ...core.spore import Spore
from ...visual.link import Link


class TreeCreationManager:
    """
    –£–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ–º –¥–µ—Ä–µ–≤—å–µ–≤ —Ä–∞–∑–Ω–æ–π –≥–ª—É–±–∏–Ω—ã.

    –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏:
    - –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ—Ä–µ–≤—å–µ–≤ —Å–ø–æ—Ä–æ–≤ –≤ –ø–æ–∑–∏—Ü–∏–∏ –∫—É—Ä—Å–æ—Ä–∞
    - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞–º–∏ —Å–æ–∑–¥–∞–Ω–∏—è (spores/tree)
    - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–ª—É–±–∏–Ω—ã –¥–µ—Ä–µ–≤–∞
    - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å SporeTree –ª–æ–≥–∏–∫–æ–π
    """

    def __init__(self,
                 spore_manager: SporeManager,
                 zoom_manager: ZoomManager,
                 pendulum: PendulumSystem,
                 color_manager: ColorManager,
                 config: dict):

        self.spore_manager = spore_manager
        self.zoom_manager = zoom_manager
        self.pendulum = pendulum
        self.color_manager = color_manager
        self.config = config

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è
        self.creation_mode = 'spores'  # 'spores' –∏–ª–∏ 'tree'
        self.tree_depth = 2
        self._global_tree_counter = 0

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ dt –≤–µ–∫—Ç–æ—Ä–∞ –æ—Ç –ø—Ä–∏–∑—Ä–∞—á–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞
        self.ghost_tree_dt_vector = None

        print("   ‚úì Tree Creation Manager —Å–æ–∑–¥–∞–Ω")

    def toggle_creation_mode(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Ä–µ–∂–∏–º —Å–æ–∑–¥–∞–Ω–∏—è."""
        if self.creation_mode == 'spores':
            self.creation_mode = 'tree'
            print("üå≤ –†–µ–∂–∏–º: –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ—Ä–µ–≤—å–µ–≤")
        else:
            self.creation_mode = 'spores'
            print("üåü –†–µ–∂–∏–º: –°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–æ—Ä")

    def set_tree_depth(self, depth: int):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≥–ª—É–±–∏–Ω—É –¥–µ—Ä–µ–≤–∞."""
        self.tree_depth = max(1, min(depth, 2))
        print(f"üå≤ –ì–ª—É–±–∏–Ω–∞ –¥–µ—Ä–µ–≤–∞: {self.tree_depth}")

    def create_tree_at_cursor(self, preview_position_2d: np.ndarray) -> Optional[List[Spore]]:
        """
        –°–æ–∑–¥–∞–µ—Ç –¥–µ—Ä–µ–≤–æ –≤ –ø–æ–∑–∏—Ü–∏–∏ –∫—É—Ä—Å–æ—Ä–∞.

        Args:
            preview_position_2d: –ü–æ–∑–∏—Ü–∏—è –∫—É—Ä—Å–æ—Ä–∞ –≤ 2D –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö

        Returns:
            –°–ø–∏—Å–æ–∫ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Å–ø–æ—Ä –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ

        –õ–û–ì–ò–ö–ê: –¥–µ—Ä–µ–≤–æ ‚Üí —Å–ø–æ—Ä—ã –∏ –ª–∏–Ω–∫–∏ ‚Üí –¥–æ–±–∞–≤–ª—è–µ–º –≤ –æ–±—â–∏–π –≥—Ä–∞—Ñ ‚Üí –∑–∞–±—ã–≤–∞–µ–º –¥–µ—Ä–µ–≤–æ
        """
        try:
            from ...visual.spore_tree_visual import SporeTreeVisual
            from ...logic.tree.spore_tree import SporeTree
            from ...logic.tree.spore_tree_config import SporeTreeConfig

            self._global_tree_counter += 1

            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π dt
            dt = self._get_current_dt()

            # –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –¥–ª—è –¥–µ—Ä–µ–≤–∞
            tree_position = np.array([preview_position_2d[0], preview_position_2d[1]])

            # –°–æ–∑–¥–∞–µ–º –ª–æ–≥–∏–∫—É –¥–µ—Ä–µ–≤–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ dt –≤–µ–∫—Ç–æ—Ä–∞–º–∏
            if self.ghost_tree_dt_vector is not None and len(self.ghost_tree_dt_vector) == 12:
                # –ë–µ—Ä–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è, —Ç.–∫. SporeTree –æ–∂–∏–¥–∞–µ—Ç –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ dt
                dt_children_abs = np.abs(self.ghost_tree_dt_vector[:4])
                dt_grandchildren_abs = np.abs(self.ghost_tree_dt_vector[4:])

                print(f"üå≤ –ò—Å–ø–æ–ª—å–∑—É–µ–º dt –∏–∑ –ø—Ä–∏–∑—Ä–∞—á–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞")
                print(f"   üìä dt_children: {dt_children_abs}")
                print(f"   üìä dt_grandchildren: {dt_grandchildren_abs}")

                tree_config = SporeTreeConfig(
                    dt_base=dt,
                    tree_depth=self.tree_depth,
                    position=tree_position
                )

                tree_logic = SporeTree(
                    pendulum=self.pendulum,
                    config=tree_config,
                    dt_children=dt_children_abs,
                    dt_grandchildren=dt_grandchildren_abs,
                    auto_create=False
                )
            else:
                # –°–æ–∑–¥–∞–µ–º –æ–±—ã—á–Ω–æ–µ –¥–µ—Ä–µ–≤–æ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ dt
                print(f"üå≤ –°–æ–∑–¥–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –¥–µ—Ä–µ–≤–æ")

                tree_config = SporeTreeConfig(
                    dt_base=dt,
                    tree_depth=self.tree_depth,
                    position=tree_position
                )

                tree_logic = SporeTree(
                    pendulum=self.pendulum,
                    config=tree_config,
                    auto_create=True
                )

            # –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é –¥–µ—Ä–µ–≤–∞
            goal_position = self.config.get('spore', {}).get('goal_position', [0, 0])
            spore_config = self.config.get('spore', {})

            tree_visual = SporeTreeVisual(
                tree=tree_logic,
                pendulum=self.pendulum,
                goal_position=goal_position,
                config=spore_config,
                color_manager=self.color_manager,
                zoom_manager=self.zoom_manager,
                spore_manager=self.spore_manager
            )

            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–ø–æ—Ä—ã –∏ –ª–∏–Ω–∫–∏ –∏–∑ –¥–µ—Ä–µ–≤–∞
            created_spores = []
            created_links = []

            # –°–æ–±–∏—Ä–∞–µ–º —Å–ø–æ—Ä—ã
            if tree_visual.root_spore:
                created_spores.append(tree_visual.root_spore)

            created_spores.extend(tree_visual.child_spores)

            if self.tree_depth >= 2:
                created_spores.extend(tree_visual.grandchild_spores)

            # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–∞—Å—à—Ç–∞–± –∫–æ –≤—Å–µ–º —Å–ø–æ—Ä–∞–º –¥–µ—Ä–µ–≤–∞
            for spore in created_spores:
                if spore:
                    spore.apply_transform(
                        self.zoom_manager.a_transformation,
                        self.zoom_manager.b_translation,
                        spores_scale=self.zoom_manager.spores_scale
                    )

            # –°–æ–±–∏—Ä–∞–µ–º –ª–∏–Ω–∫–∏
            created_links.extend(tree_visual.child_links)

            if self.tree_depth >= 2:
                created_links.extend(tree_visual.grandchild_links)

            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ª–∏–Ω–∫–∏ –≤ zoom manager
            for i, link in enumerate(created_links):
                if link:
                    self.zoom_manager.register_object(link, f"tree_link_{self._global_tree_counter}_{i}")

            # –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º SporeTreeVisual
            tree_visual.root_spore = None
            tree_visual.child_spores.clear()
            tree_visual.grandchild_spores.clear()
            tree_visual.child_links.clear()
            tree_visual.grandchild_links.clear()
            tree_visual.visual_created = False

            tree_visual = None
            tree_logic = None

            print(f"üå≤ –î–µ—Ä–µ–≤–æ —Å–æ–∑–¥–∞–Ω–æ –≤ ({preview_position_2d[0]:.3f}, {preview_position_2d[1]:.3f})")
            print(f"   üìä –ì–ª—É–±–∏–Ω–∞: {self.tree_depth}, dt: {dt:.4f}")
            print(f"   üéØ –°–æ–∑–¥–∞–Ω–æ: {len(created_spores)} —Å–ø–æ—Ä + {len(created_links)} –ª–∏–Ω–∫–æ–≤")

            return created_spores

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ—Ä–µ–≤–∞: {e}")
            import traceback
            traceback.print_exc()
            return None

    def _get_current_dt(self) -> float:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π dt –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."""
        return self.config.get('pendulum', {}).get('dt', 0.1)
