from typing import Optional, List
import numpy as np
from ursina import destroy

from .shared_dependencies import SharedDependencies
from ...visual.prediction_visualizer import PredictionVisualizer
from ...visual.link import Link


class PredictionManager:
    """
    –£–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è–º–∏ min/max —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –ø—Ä–∏–∑—Ä–∞—á–Ω—ã–º–∏ –¥–µ—Ä–µ–≤—å—è–º–∏.

    –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏:
    - –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π min/max —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è (4 –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è)
    - –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–∑—Ä–∞—á–Ω—ã—Ö –¥–µ—Ä–µ–≤—å–µ–≤ –¥–ª—è –ø—Ä–µ–≤—å—é
    - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–∏–Ω–∫–∞–º–∏ –∫ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è–º
    - –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
    """

    def __init__(self, deps: SharedDependencies):
        self.deps = deps

        # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è min/max —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        self.prediction_visualizers: List[PredictionVisualizer] = []
        self.prediction_links: List[Link] = []  # –õ–∏–Ω–∫–∏ –æ—Ç –ø—Ä–µ–≤—å—é —Å–ø–æ—Ä—ã –∫ –ø—Ä–∏–∑—Ä–∞–∫–∞–º
        self.show_predictions = True

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ SharedDependencies
        self.min_control = deps.min_control
        self.max_control = deps.max_control

        # –¢–µ–∫—É—â–∞—è –≥–ª—É–±–∏–Ω–∞ –¥–µ—Ä–µ–≤–∞ –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
        self.tree_depth = 2

        print(f"   ‚úì Prediction Manager —Å–æ–∑–¥–∞–Ω (—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {self.min_control} .. {self.max_control})")

    def update_predictions(self, preview_spore, preview_position_2d: np.ndarray, creation_mode: str, tree_depth: int) -> None:
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è.

        Args:
            preview_spore: –ü—Ä–µ–≤—å—é —Å–ø–æ—Ä–∞ –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
            preview_position_2d: –ü–æ–∑–∏—Ü–∏—è –ø—Ä–µ–≤—å—é –≤ 2D
            creation_mode: 'spores' –∏–ª–∏ 'tree'
            tree_depth: –ì–ª—É–±–∏–Ω–∞ –¥–µ—Ä–µ–≤–∞ –¥–ª—è —Ä–µ–∂–∏–º–∞ 'tree'
        """
        # print(f"üîç PredictionManager.update_predictions –≤—ã–∑–≤–∞–Ω:")
        # print(f"   show_predictions: {self.show_predictions}")
        # print(f"   preview_spore: {preview_spore is not None}")
        # print(f"   creation_mode: {creation_mode}")
        # print(f"   tree_depth: {tree_depth}")
        
        if not self.show_predictions:
            print("   ‚ùå –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã (show_predictions=False)")
            return
        
        if not preview_spore:
            print("   ‚ùå –ù–µ—Ç –ø—Ä–µ–≤—å—é —Å–ø–æ—Ä—ã")
            return

        self.tree_depth = tree_depth
        # print(f"   ‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã, —Å–æ–∑–¥–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è...")

        if creation_mode == 'tree':
            # print("   üå≤ –†–µ–∂–∏–º –¥–µ—Ä–µ–≤–∞")
            self._update_tree_preview(preview_spore, preview_position_2d)
        else:
            # print("   üß¨ –†–µ–∂–∏–º —Å–ø–æ—Ä")
            self._update_spore_predictions(preview_spore, preview_position_2d)
        
        # print(f"   üìä –°–æ–∑–¥–∞–Ω–æ visualizers: {len(self.prediction_visualizers)}")
        # print(f"   üìä –°–æ–∑–¥–∞–Ω–æ links: {len(self.prediction_links)}")

    def _update_spore_predictions(self, preview_spore, preview_position_2d: np.ndarray) -> None:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è: 2 –≤–ø–µ—Ä–µ–¥ (min/max) + 2 –Ω–∞–∑–∞–¥ (min/max)."""
        
        # print(f"üîç _update_spore_predictions –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç—É")
        
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
        self.clear_predictions()

        if not preview_spore:
            return

        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π dt
            dt = self._get_current_dt()

            # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è 4 –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π: forward/backward + min/max
            prediction_configs = [
                {'name': 'forward_min', 'control': self.min_control, 'dt': dt, 'direction': 'forward'},
                {'name': 'forward_max', 'control': self.max_control, 'dt': dt, 'direction': 'forward'},
                {'name': 'backward_min', 'control': self.min_control, 'dt': -dt, 'direction': 'backward'},
                {'name': 'backward_max', 'control': self.max_control, 'dt': -dt, 'direction': 'backward'}
            ]

            for config in prediction_configs:
                # –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
                predicted_pos_2d = self.deps.pendulum.step(
                    preview_position_2d,
                    config['control'],
                    config['dt']
                )

                # –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
                prediction_viz = PredictionVisualizer(
                    parent_spore=preview_spore,
                    color_manager=self.deps.color_manager,
                    zoom_manager=self.deps.zoom_manager,
                    cost_function=None,
                    config={
                        'spore': {'show_ghosts': True},
                        'angel': {'show_angels': False, 'show_pillars': False}
                    },
                    spore_id=self.deps.zoom_manager.get_unique_spore_id()
                )

                # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
                prediction_viz.update(predicted_pos_2d)

                # –°–æ–∑–¥–∞–µ–º –ª–∏–Ω–∫ –æ—Ç –ø—Ä–µ–≤—å—é —Å–ø–æ—Ä—ã –∫ –ø—Ä–∏–∑—Ä–∞–∫—É
                if prediction_viz.ghost_spore:
                    # –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–µ–Ω—è–µ–º –º–µ—Å—Ç–∞–º–∏ parent –∏ child
                    if config['direction'] == 'forward':
                        # –í–ø–µ—Ä–µ–¥: –ø—Ä–µ–≤—å—é ‚Üí –±—É–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                        parent_spore = preview_spore
                        child_spore = prediction_viz.ghost_spore
                    else:  # backward
                        # –ù–∞–∑–∞–¥: –ø—Ä–æ—à–ª–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ‚Üí –ø—Ä–µ–≤—å—é (–ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–ª–∏)
                        parent_spore = prediction_viz.ghost_spore
                        child_spore = preview_spore

                    prediction_link = Link(
                        parent_spore=parent_spore,
                        child_spore=child_spore,
                        color_manager=self.deps.color_manager,
                        zoom_manager=self.deps.zoom_manager,
                        config=self.deps.config
                    )

                    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–≤–µ—Ç –ª–∏–Ω–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                    if config['direction'] == 'forward':
                        # –û–±—ã—á–Ω—ã–µ —Ü–≤–µ—Ç–∞ –¥–ª—è –ª–∏–Ω–∫–æ–≤ –≤–ø–µ—Ä–µ–¥
                        if 'min' in config['name']:
                            link_color_name = 'ghost_min'  # –°–∏–Ω–∏–π –¥–ª—è min
                        else:  # max
                            link_color_name = 'ghost_max'  # –ö—Ä–∞—Å–Ω—ã–π –¥–ª—è max
                    else:  # backward
                        # –¢–µ –∂–µ —Ü–≤–µ—Ç–∞ –¥–ª—è –ª–∏–Ω–∫–æ–≤ –Ω–∞–∑–∞–¥
                        if 'min' in config['name']:
                            link_color_name = 'ghost_min'  # –°–∏–Ω–∏–π –¥–ª—è min
                        else:  # max
                            link_color_name = 'ghost_max'  # –ö—Ä–∞—Å–Ω—ã–π –¥–ª—è max

                    prediction_link.color = self.deps.color_manager.get_color('link', link_color_name)

                    # –û–±–Ω–æ–≤–ª—è–µ–º –≥–µ–æ–º–µ—Ç—Ä–∏—é –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤ zoom manager
                    prediction_link.update_geometry()
                    link_id = self.deps.zoom_manager.get_unique_link_id()
                    self.deps.zoom_manager.register_object(prediction_link, link_id)
                    prediction_link._zoom_manager_key = link_id  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è

                    self.prediction_links.append(prediction_link)

                self.prediction_visualizers.append(prediction_viz)

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π: {e}")
            import traceback
            traceback.print_exc()

    def _update_tree_preview(self, preview_spore, preview_position_2d: np.ndarray) -> None:
        """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–∏–∑—Ä–∞—á–Ω–æ–µ –¥–µ—Ä–µ–≤–æ –¥–ª—è –ø—Ä–µ–≤—å—é."""

        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
        self.clear_predictions()

        if not preview_spore:
            return

        try:
            # –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è –¥–µ—Ä–µ–≤–∞
            from ...logic.tree.spore_tree import SporeTree
            from ...logic.tree.spore_tree_config import SporeTreeConfig

            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π dt
            dt = self._get_current_dt()

            # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥ –¥–µ—Ä–µ–≤–∞
            tree_config = SporeTreeConfig(
                initial_position=preview_position_2d.copy(),
                dt_base=dt,
                dt_grandchildren_factor=0.2,
                show_debug=False
            )

            # –°–æ–∑–¥–∞–µ–º –ª–æ–≥–∏–∫—É –¥–µ—Ä–µ–≤–∞
            tree_logic = SporeTree(
                pendulum=self.deps.pendulum,
                config=tree_config,
                auto_create=False
            )

            # –°–æ–∑–¥–∞–µ–º –¥–µ—Ç–µ–π
            tree_logic.create_children()

            # –°–æ–∑–¥–∞–µ–º –≤–Ω—É–∫–æ–≤ –µ—Å–ª–∏ –Ω—É–∂–Ω–∞ –≥–ª—É–±–∏–Ω–∞ 2
            if self.tree_depth >= 2:
                tree_logic.create_grandchildren()

            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –ø—Ä–∏–∑—Ä–∞—á–Ω—ã–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
            self._create_ghost_tree_from_logic(tree_logic, preview_spore)

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–∑—Ä–∞—á–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞: {e}")

    def _create_ghost_tree_from_logic(self, tree_logic, preview_spore):
        """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–∏–∑—Ä–∞—á–Ω—ã–µ —Å–ø–æ—Ä—ã –∏ –ª–∏–Ω–∫–∏ –∏–∑ –ª–æ–≥–∏–∫–∏ –¥–µ—Ä–µ–≤–∞."""

        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–∑—Ä–∞—á–Ω—ã–µ —Å–ø–æ—Ä—ã –¥–ª—è –¥–µ—Ç–µ–π
        child_ghosts = []
        for i, child_data in enumerate(tree_logic.children):
            ghost_viz = self._create_ghost_spore_from_data(child_data, f"child_{i}", 0.4)
            if ghost_viz and ghost_viz.ghost_spore:
                child_ghosts.append(ghost_viz.ghost_spore)

        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–∑—Ä–∞—á–Ω—ã–µ —Å–ø–æ—Ä—ã –¥–ª—è –≤–Ω—É–∫–æ–≤ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        grandchild_ghosts = []
        if hasattr(tree_logic, 'grandchildren') and tree_logic.grandchildren:
            for i, grandchild_data in enumerate(tree_logic.grandchildren):
                ghost_viz = self._create_ghost_spore_from_data(grandchild_data, f"grandchild_{i}", 0.3)
                if ghost_viz and ghost_viz.ghost_spore:
                    grandchild_ghosts.append(ghost_viz.ghost_spore)

        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–∑—Ä–∞—á–Ω—ã–µ –ª–∏–Ω–∫–∏ –æ—Ç –∫–æ—Ä–Ω—è –∫ –¥–µ—Ç—è–º —Å —Ü–≤–µ—Ç–æ–º –ø–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é
        for i, child_ghost in enumerate(child_ghosts):
            if child_ghost and i < len(tree_logic.children):
                # –ü–æ–ª—É—á–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–±–µ–Ω–∫–∞ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –¥–µ—Ä–µ–≤–∞
                child_control = tree_logic.children[i]['control']

                # –í—ã–±–∏—Ä–∞–µ–º —Ü–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∑–Ω–∞–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                if child_control >= 0:
                    link_color = 'ghost_max'  # –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ - –∫—Ä–∞—Å–Ω—ã–π
                else:
                    link_color = 'ghost_min'  # –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ - —Å–∏–Ω–∏–π

                self._create_ghost_link(
                    preview_spore,
                    child_ghost,
                    f"root_to_child_{i}",
                    link_color
                )

        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–∑—Ä–∞—á–Ω—ã–µ –ª–∏–Ω–∫–∏ –æ—Ç –¥–µ—Ç–µ–π –∫ –≤–Ω—É–∫–∞–º (–µ—Å–ª–∏ tree_depth >= 2)
        if self.tree_depth >= 2 and grandchild_ghosts:
            for i, grandchild_ghost in enumerate(grandchild_ghosts):
                if grandchild_ghost:
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—è –≤–Ω—É–∫–∞ –∏–∑ –¥–∞–Ω–Ω—ã—Ö
                    grandchild_data = tree_logic.grandchildren[i]
                    parent_idx = grandchild_data['parent_idx']

                    if parent_idx < len(child_ghosts) and child_ghosts[parent_idx]:
                        self._create_ghost_link(
                            child_ghosts[parent_idx],
                            grandchild_ghost,
                            f"child_{parent_idx}_to_grandchild_{i}",
                            'ghost_min' if i % 2 == 0 else 'ghost_max'  # –ß–µ—Ä–µ–¥—É–µ–º —Ü–≤–µ—Ç–∞
                        )

    def _create_ghost_spore_from_data(self, spore_data, name_suffix, alpha):
        """–°–æ–∑–¥–∞–µ—Ç –æ–¥–Ω—É –ø—Ä–∏–∑—Ä–∞—á–Ω—É—é —Å–ø–æ—Ä—É –∏–∑ –¥–∞–Ω–Ω—ã—Ö –¥–µ—Ä–µ–≤–∞."""

        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é —Å–ø–æ—Ä—ã
        final_position = spore_data['position']  # –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å [x, z]

        # –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
        prediction_viz = PredictionVisualizer(
            parent_spore=None,  # –î–ª—è –ø—Ä–∏–∑—Ä–∞–∫–æ–≤ –¥–µ—Ä–µ–≤–∞ –Ω–µ –Ω—É–∂–µ–Ω parent
            color_manager=self.deps.color_manager,
            zoom_manager=self.deps.zoom_manager,
            cost_function=None,
            config={
                'spore': {'show_ghosts': True},
                'angel': {'show_angels': False, 'show_pillars': False}
            },
            spore_id=self.deps.zoom_manager.get_unique_spore_id()
        )

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –ø—Ä–∏–∑—Ä–∞–∫–∞
        if prediction_viz.ghost_spore:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å
            base_color = self.deps.color_manager.get_color('spore', 'default')
            try:
                prediction_viz.ghost_spore.color = (base_color.r, base_color.g, base_color.b, alpha)
            except:
                prediction_viz.ghost_spore.color = (0.6, 0.4, 0.9, alpha)

            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é
            prediction_viz.update(final_position)

            # –ü—Ä–∏–∑—Ä–∞—á–Ω—ã–µ —Å–ø–æ—Ä—ã –±–æ–ª—å—à–µ –Ω–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—é—Ç—Å—è –≤ ZoomManager - –æ–Ω–∏ –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–µ
            # –ü—Ä–æ—Å—Ç–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º ID
            prediction_viz.ghost_spore.id = f"tree_ghost_{name_suffix}"

        # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
        self.prediction_visualizers.append(prediction_viz)
        return prediction_viz

    def _create_ghost_link(self, parent_spore, child_spore, link_suffix, color_name):
        """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–∏–∑—Ä–∞—á–Ω—ã–π –ª–∏–Ω–∫ –º–µ–∂–¥—É –¥–≤—É–º—è —Å–ø–æ—Ä–∞–º–∏."""
        try:
            ghost_link = Link(
                parent_spore=parent_spore,
                child_spore=child_spore,
                color_manager=self.deps.color_manager,
                zoom_manager=self.deps.zoom_manager,
                config=self.deps.config
            )

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–≤–µ—Ç –ª–∏–Ω–∫–∞
            ghost_link.color = self.deps.color_manager.get_color('link', color_name)

            # –î–µ–ª–∞–µ–º –ª–∏–Ω–∫ –ø–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–º
            if hasattr(ghost_link, 'alpha'):
                ghost_link.alpha = 0.6

            # –û–±–Ω–æ–≤–ª—è–µ–º –≥–µ–æ–º–µ—Ç—Ä–∏—é –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º
            ghost_link.update_geometry()
            link_id = self.deps.zoom_manager.get_unique_link_id()
            self.deps.zoom_manager.register_object(ghost_link, link_id)
            ghost_link._zoom_manager_key = link_id  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è

            # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
            self.prediction_links.append(ghost_link)

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–∑—Ä–∞—á–Ω–æ–≥–æ –ª–∏–Ω–∫–∞ {link_suffix}: {e}")

    def clear_predictions(self) -> None:
        """–û—á–∏—â–∞–µ—Ç –≤—Å–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –∏ –∏—Ö –ª–∏–Ω–∫–∏."""

        # –ü—Ä–∏–∑—Ä–∞—á–Ω—ã–µ —Å–ø–æ—Ä—ã –±–æ–ª—å—à–µ –Ω–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—é—Ç—Å—è –≤ ZoomManager, –ø—Ä–æ—Å—Ç–æ —É–Ω–∏—á—Ç–æ–∂–∞–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä—ã
        for viz in self.prediction_visualizers:
            viz.destroy()
        self.prediction_visualizers.clear()

        # –û—á–∏—â–∞–µ–º –ª–∏–Ω–∫–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
        for i, link in enumerate(self.prediction_links):
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –∫–ª—é—á –µ—Å–ª–∏ –µ—Å—Ç—å
            if hasattr(link, '_zoom_manager_key'):
                try:
                    self.deps.zoom_manager.unregister_object(link._zoom_manager_key)
                except:
                    pass
            else:
                # Fallback - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –∫–ª—é—á –ª–∏–Ω–∫–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
                link_key = getattr(link, '_zoom_manager_key', None)
                if link_key:
                    try:
                        self.deps.zoom_manager.unregister_object(link_key)
                    except:
                        pass

            try:
                destroy(link)
            except:
                pass
        self.prediction_links.clear()

    def set_show_predictions(self, enabled: bool) -> None:
        """–í–∫–ª—é—á–∞–µ—Ç/–≤—ã–∫–ª—é—á–∞–µ—Ç –ø–æ–∫–∞–∑ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π."""
        self.show_predictions = enabled
        if not enabled:
            self.clear_predictions()

    def _get_current_dt(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π dt –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞."""
        return self.deps.config.get('pendulum', {}).get('dt', 0.1)

    def destroy(self) -> None:
        """–û—á–∏—â–∞–µ—Ç –≤—Å–µ —Ä–µ—Å—É—Ä—Å—ã –º–µ–Ω–µ–¥–∂–µ—Ä–∞."""
        self.clear_predictions()
        print("   ‚úì Prediction Manager —É–Ω–∏—á—Ç–æ–∂–µ–Ω")
