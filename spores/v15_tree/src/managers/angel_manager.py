from ursina import destroy
from ..visual.link import Link
from ..visual.pillar import Pillar
import numpy as np
from typing import Optional, List, Dict

# –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Å–æ–≤ –¥–ª—è –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π —Ç–∏–ø–æ–≤
from ..managers.color_manager import ColorManager
from ..managers.zoom_manager import ZoomManager
from ..logic.cost_function import CostFunction
from ..core.spore import Spore

class AngelManager:
    # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–ª—è –æ—Ç—Å—Ç—É–ø–∞ –∞–Ω–≥–µ–ª–æ–≤ –æ—Ç –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ –∫–æ—Å—Ç–∞
    ANGEL_HEIGHT_OFFSET_RATIO: float = 0.01
    
    def __init__(self, 
                 color_manager: Optional[ColorManager] = None, 
                 zoom_manager: Optional[ZoomManager] = None, 
                 config: Optional[Dict] = None):
        
        self.color_manager: Optional[ColorManager] = color_manager
        self.zoom_manager: Optional[ZoomManager] = zoom_manager
        self.cost_function: Optional[CostFunction] = None # –ë—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∏–∑–≤–Ω–µ
        self.config: Dict = config if config is not None else {}
        
        self.angels: List[Spore] = []
        self.pillars: List[Pillar] = []
        self.links: List[Link] = []

        self.ghost_link_angel: Optional[Link] = None # –û–¥–Ω–∞ —Å–≤—è–∑—å –¥–ª—è –ø—Ä–∏–∑—Ä–∞–∫–∞ —Å –Ω—É–ª–µ–≤—ã–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –∞–Ω–≥–µ–ª–æ–≤
        self.angels_visible: bool = config.get('angel', {}).get('show_angels', False)
        self.pillars_visible: bool = config.get('angel', {}).get('show_pillars', False)

    def clear_all(self) -> None:
        """–£–¥–∞–ª—è–µ—Ç –≤—Å–µ —Å—É—â–Ω–æ—Å—Ç–∏, —É–ø—Ä–∞–≤–ª—è–µ–º—ã–µ —ç—Ç–∏–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º."""
        self.clear_ghosts()
        for e in self.angels + self.pillars + self.links:
            if hasattr(e, 'is_ghost') and e.is_ghost:
                continue
            destroy(e)
        self.angels, self.pillars, self.links = [], [], []

    def clear_ghosts(self) -> None:
        """–£–¥–∞–ª—è–µ—Ç –≤—Å–µ –ø—Ä–∏–∑—Ä–∞—á–Ω—ã–µ —Å—É—â–Ω–æ—Å—Ç–∏."""
        if self.ghost_link_angel:
            # destroy(self.ghost_link_angel.parent_spore) # –†–æ–¥–∏—Ç–µ–ª—å - —Ä–µ–∞–ª—å–Ω—ã–π –∞–Ω–≥–µ–ª, –µ–≥–æ —É–¥–∞–ª—è—Ç—å –Ω–µ –Ω—É–∂–Ω–æ
            destroy(self.ghost_link_angel.child_spore) # –£–¥–∞–ª—è–µ–º –∞–Ω–≥–µ–ª–∞-–ø–æ—Ç–æ–º–∫–∞
            destroy(self.ghost_link_angel)
            self.ghost_link_angel = None

    def on_spore_created(self, spore: Spore) -> None:
        """
        –í—ã–∑—ã–≤–∞–µ—Ç—Å—è SporeManager-–æ–º –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¢–û–õ–¨–ö–û –ù–ê–°–¢–û–Ø–©–ï–ô —Å–ø–æ—Ä—ã.
        –°–æ–∑–¥–∞–µ—Ç —Å—Ç–æ–ª–±, –∞–Ω–≥–µ–ª–∞ –∏ —Å–≤—è–∑—å.
        """
        angel_config = self.config.get('angel', {})
        
        # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ–ø–µ—Ä—å –Ω–µ –¥–æ–ª–∂–Ω–∞ –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –¥–ª—è –ø—Ä–∏–∑—Ä–∞–∫–æ–≤
        if (hasattr(spore, 'is_ghost') and spore.is_ghost) or not self.cost_function:
            return

        # --- –ö–æ–¥ –Ω–∏–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –ù–ê–°–¢–û–Ø–©–ò–• —Å–ø–æ—Ä ---

        spore_2d_pos = spore.calc_2d_pos()
        display_height = self.cost_function.get_cost(spore_2d_pos)
        y_offset = display_height * self.ANGEL_HEIGHT_OFFSET_RATIO

        # –°–æ–∑–¥–∞–µ–º —Å—Ç–æ–ª–±, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ –≤ –∫–æ–Ω—Ñ–∏–≥–µ
        if angel_config.get('show_pillars', True):
            pillar_width = angel_config['pillar_width']
            pillar = Pillar(
                model='cube',
                color=self.color_manager.get_color('angel', 'pillar'),
            )
            pillar.real_position = spore.real_position + np.array([0, (display_height + y_offset) / 2, 0])
            pillar.real_scale = np.array([pillar_width, display_height + y_offset, pillar_width])
            pillar.enabled = self.pillars_visible  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å —Å–æ–≥–ª–∞—Å–Ω–æ —Ñ–ª–∞–≥—É
            self.pillars.append(pillar)
            if self.zoom_manager:
                self.zoom_manager.register_object(pillar, f"pillar_{spore.id}")

        # –°–æ–∑–¥–∞–µ–º –∞–Ω–≥–µ–ª–∞, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ –≤ –∫–æ–Ω—Ñ–∏–≥–µ
        angel = None
        if angel_config.get('show_angels', True):
            angel_real_position = spore.real_position + np.array([0, display_height + y_offset, 0])
            angel = spore.clone(new_position=angel_real_position)
            if spore.is_goal:
                angel.color = self.color_manager.get_color('spore', 'goal')
            else:
                angel.color = self.color_manager.get_color('angel', 'default')
            angel.enabled = self.angels_visible  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å —Å–æ–≥–ª–∞—Å–Ω–æ —Ñ–ª–∞–≥—É
            self.angels.append(angel)
            if self.zoom_manager:
                self.zoom_manager.register_object(angel, f"angel_{spore.id}")

        # –°–æ–∑–¥–∞–Ω–∏–µ —Å–≤—è–∑–∏, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ –∏ –∞–Ω–≥–µ–ª—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç
        if angel and angel_config.get('show_links', True):
            last_non_goal_angel = None
            for a in reversed(self.angels[:-1]):
                if not a.is_goal and not (hasattr(a, 'is_ghost') and a.is_ghost):
                    last_non_goal_angel = a
                    break
            if not angel.is_goal and last_non_goal_angel and self.zoom_manager:
                new_link = Link(parent_spore=last_non_goal_angel, child_spore=angel, color_manager=self.color_manager, zoom_manager=self.zoom_manager, config=self.config, link_type='angel')
                new_link.color = self.color_manager.get_color('angel', 'link')
                new_link.enabled = self.angels_visible  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å —Å–æ–≥–ª–∞—Å–Ω–æ —Ñ–ª–∞–≥—É
                self.links.append(new_link)
                link_id = self.zoom_manager.get_unique_link_id()
                self.zoom_manager.register_object(new_link, link_id)
                new_link._zoom_manager_key = link_id  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
                new_link.update_geometry()
                new_link.apply_transform(self.zoom_manager.a_transformation, self.zoom_manager.b_translation, spores_scale=self.zoom_manager.spores_scale)

    def update_ghost_link_angel(self, parent_spore: Spore, ghost_spore_child: Spore) -> None:
        """–°–æ–∑–¥–∞–µ—Ç/–æ–±–Ω–æ–≤–ª—è–µ—Ç –∞–Ω–≥–µ–ª—å—Å–∫—É—é —Å–≤—è–∑—å –¥–ª—è –ø—Ä–∏–∑—Ä–∞–∫–∞ —Å –Ω—É–ª–µ–≤—ã–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º."""
        if not self.cost_function or not self.zoom_manager:
            return

        # –ù–∞—Ö–æ–¥–∏–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –∞–Ω–≥–µ–ª–∞ (–ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –Ω–∞—Å—Ç–æ—è—â–µ–≥–æ)
        parent_angel = self.angels[-1] if self.angels else None
        if not parent_angel:
            return

        if not self.ghost_link_angel:
            # –°–æ–∑–¥–∞–µ–º –∞–Ω–≥–µ–ª–∞-—Ä–µ–±–µ–Ω–∫–∞
            child_angel = ghost_spore_child.clone()
            child_angel.color = self.color_manager.get_color('angel', 'ghost')
            self.zoom_manager.register_object(child_angel, "ghost_link_angel_child")

            # –°–æ–∑–¥–∞–µ–º —Å–≤—è–∑—å
            self.ghost_link_angel = Link(parent_spore=parent_angel, child_spore=child_angel, color_manager=self.color_manager, zoom_manager=self.zoom_manager, config=self.config, link_type='angel')
            self.ghost_link_angel.color = self.color_manager.get_color('angel', 'ghost_link')
            self.ghost_link_angel.enabled = self.angels_visible  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å —Å–æ–≥–ª–∞—Å–Ω–æ —Ñ–ª–∞–≥—É
            child_angel.enabled = self.angels_visible  # –ò –¥–ª—è –∞–Ω–≥–µ–ª–∞-—Ä–µ–±–µ–Ω–∫–∞ —Ç–æ–∂–µ
            self.zoom_manager.register_object(self.ghost_link_angel, "ghost_link_angel")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –∞–Ω–≥–µ–ª–∞-—Ä–µ–±–µ–Ω–∫–∞
        child_angel = self.ghost_link_angel.child_spore
        spore_2d_pos = ghost_spore_child.calc_2d_pos()
        display_height = self.cost_function.get_cost(spore_2d_pos)
        y_offset = display_height * self.ANGEL_HEIGHT_OFFSET_RATIO
        child_angel.real_position = ghost_spore_child.real_position + np.array([0, display_height + y_offset, 0])
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–∞–º—É —Å–≤—è–∑—å
        self.ghost_link_angel.parent_spore = parent_angel
        self.ghost_link_angel.update_geometry()
        self.ghost_link_angel.apply_transform(self.zoom_manager.a_transformation, self.zoom_manager.b_translation, spores_scale=self.zoom_manager.spores_scale)
    
    def toggle_angels(self) -> None:
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –≤–∏–¥–∏–º–æ—Å—Ç—å –≤—Å–µ—Ö –∞–Ω–≥–µ–ª–æ–≤, —Å—Ç–æ–ª–±–æ–≤ –∏ —Å–≤—è–∑–µ–π."""
        self.angels_visible = not self.angels_visible
        self.pillars_visible = not self.pillars_visible
        
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å –∞–Ω–≥–µ–ª–æ–≤
        for angel in self.angels:
            angel.enabled = self.angels_visible
        
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å —Å—Ç–æ–ª–±–æ–≤
        for pillar in self.pillars:
            pillar.enabled = self.pillars_visible
        
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å —Å–≤—è–∑–µ–π
        for link in self.links:
            link.enabled = self.angels_visible  # –°–≤—è–∑–∏ –≤–∏–¥–Ω—ã –∫–æ–≥–¥–∞ –≤–∏–¥–Ω—ã –∞–Ω–≥–µ–ª—ã
        
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å –ø—Ä–∏–∑—Ä–∞—á–Ω–æ–π —Å–≤—è–∑–∏
        if self.ghost_link_angel:
            self.ghost_link_angel.enabled = self.angels_visible
            if hasattr(self.ghost_link_angel, 'child_spore'):
                self.ghost_link_angel.child_spore.enabled = self.angels_visible
        
        status = "–≤–∫–ª—é—á–µ–Ω—ã" if self.angels_visible else "–≤—ã–∫–ª—é—á–µ–Ω—ã"
        print(f"üëº –ê–Ω–≥–µ–ª—ã {status}") 