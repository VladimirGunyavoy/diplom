from ursina import held_keys, mouse
import time
import numpy as np
from typing import Optional

# –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Å–æ–≤ –¥–ª—è –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π —Ç–∏–ø–æ–≤
# –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
from ..visual.scene_setup import SceneSetup
from ..managers.zoom_manager import ZoomManager
from ..managers.spore_manager import SporeManager
from ..managers.spawn_area_manager import SpawnAreaManager
from ..managers.param_manager import ParamManager
from ..visual.ui_setup import UI_setup

# Forward declaration –¥–ª—è ManualSporeManager
from typing import TYPE_CHECKING
if TYPE_CHECKING:
    from ..managers.manual_spore_manager import ManualSporeManager
    from ..managers.angel_manager import AngelManager
    from ..visual.cost_visualizer import CostVisualizer
    from ..managers.dt_manager import DTManager
    
from ..utils.debug_output import always_print


class InputManager:
    """
    –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞.
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–µ–Ω–µ–¥–∂–µ—Ä—ã –∏ –æ–±—ä–µ–∫—Ç—ã —Å—Ü–µ–Ω—ã,
    –∏ –¥–µ–ª–µ–≥–∏—Ä—É–µ—Ç –∏–º –∫–æ–º–∞–Ω–¥—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–∂–∞—Ç–æ–π –∫–ª–∞–≤–∏—à–∏.
    """
    def __init__(self, 
                 scene_setup: Optional[SceneSetup] = None, 
                 zoom_manager: Optional[ZoomManager] = None, 
                 spore_manager: Optional[SporeManager] = None, 
                 spawn_area_manager: Optional[SpawnAreaManager] = None, 
                 param_manager: Optional[ParamManager] = None, 
                 ui_setup: Optional[UI_setup] = None,
                 angel_manager: Optional['AngelManager'] = None,
                 cost_visualizer: Optional['CostVisualizer'] = None,
                 manual_spore_manager: Optional["ManualSporeManager"] = None,
                 dt_manager: Optional['DTManager'] = None):
        
        self.scene_setup: Optional[SceneSetup] = scene_setup
        self.zoom_manager: Optional[ZoomManager] = zoom_manager
        self.spore_manager: Optional[SporeManager] = spore_manager
        self.dt_manager: Optional['DTManager'] = dt_manager
        self.spawn_area_manager: Optional[SpawnAreaManager] = spawn_area_manager
        self.param_manager: Optional[ParamManager] = param_manager
        self.ui_setup: Optional[UI_setup] = ui_setup
        self.angel_manager: Optional['AngelManager'] = angel_manager
        self.cost_visualizer: Optional['CostVisualizer'] = cost_visualizer
        self.manual_spore_manager: Optional["ManualSporeManager"] = manual_spore_manager
        self.dt_manager: Optional['DTManager'] = dt_manager

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ø–æ—Ä –ø–æ –∫–ª–∞–≤–∏—à–µ 'f'
        self.f_key_down_time: float = 0
        self.long_press_threshold: float = 0.4
        self.spawn_interval: float = 0.1
        self.next_spawn_time: float = 0  # –í—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–ø–∞–≤–Ω–∞
        
        # v13_manual: –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∫–ª–∏–∫–æ–≤ –º—ã—à–∏
        self.previous_mouse_left = False

    def update(self) -> None:
        """
        –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –¥–æ–ª–∂–µ–Ω –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –∫–∞–∂–¥—ã–π –∫–∞–¥—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –≤–≤–æ–¥–∞.
        """
        # v13_manual: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–æ–≤ –º—ã—à–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–ø–æ—Ä
        if self.manual_spore_manager:
            current_mouse_left = mouse.left
            # –û–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –õ–ö–ú (–ø–µ—Ä–µ—Ö–æ–¥ —Å False –Ω–∞ True)
            if current_mouse_left and not self.previous_mouse_left:
                created_spores = self.manual_spore_manager.create_spore_at_cursor()
                if created_spores:
                    print(f"   üñ±Ô∏è –õ–ö–ú: –°–æ–∑–¥–∞–Ω–æ {len(created_spores)} —Å–ø–æ—Ä (1 —Ä–æ–¥–∏—Ç–µ–ª—å + 2 —Ä–µ–±—ë–Ω–∫–∞ + 2 –ª–∏–Ω–∫–∞)")
            self.previous_mouse_left = current_mouse_left
        
        # –õ–æ–≥–∏–∫–∞ –¥–ª—è –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ø–æ—Ä –ø—Ä–∏ —É–¥–µ—Ä–∂–∞–Ω–∏–∏ 'f'
        if held_keys['f']:  # type: ignore
            if self.f_key_down_time > 0:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞–∂–∞—Ç–∏–µ –±—ã–ª–æ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ
                now = time.time()
                if now >= self.next_spawn_time:
                    if self.spore_manager:
                        self.spore_manager.generate_new_spore()
                    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
                    self.next_spawn_time = now + self.spawn_interval
        else:
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –µ—Å–ª–∏ –∫–ª–∞–≤–∏—à–∞ –Ω–µ –Ω–∞–∂–∞—Ç–∞
            self.f_key_down_time = 0

    def handle_input(self, key: str) -> None:
        """
        –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫. –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
        """
        # –û—Ç–ª–∞–¥–∫–∞: –≤—ã–≤–æ–¥–∏–º –ø–æ–ª—É—á–µ–Ω–Ω—É—é –∫–ª–∞–≤–∏—à—É –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫—É—Ä—Å–æ—Ä–∞
        # print(f"[InputManager] handle_input called with key: '{key}'. Cursor locked: {self.scene_setup.cursor_locked if self.scene_setup else 'N/A'}")

        # –ë–∞–∑–æ–≤–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (–≤—ã—Ö–æ–¥) –±—ã–ª–æ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –Ω–∞ –≥–ª–æ–±–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å
        # –≤ main_demo.py, —á—Ç–æ–±—ã —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –∑–∞–º–æ—Ä–æ–∑–∫–∏ –≤–≤–æ–¥–∞.
        # if key == 'q' or key == 'escape':
        #     application.quit()
        #     return

        # –û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã —Ä–∞–±–æ—Ç–∞—é—Ç —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –∫—É—Ä—Å–æ—Ä —Å–≤–æ–±–æ–¥–µ–Ω
        # if self.scene_setup and self.scene_setup.cursor_locked:
        #     # –û—Ç–ª–∞–¥–∫–∞: –≤—ã–≤–æ–¥–∏–º, –ø–æ—á–µ–º—É –º—ã –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
        #     print(f"[InputManager] Aborting: Cursor is locked.")
        #     return
        
        # –≠—Ç–æ—Ç –ø—Ä–∏–Ω—Ç –±—ã–ª –≤ —Ñ–∞–π–ª–µ, –Ω–æ —è –µ–≥–æ –æ—Å—Ç–∞–≤–ª—é –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –æ—Ç–ª–∞–¥–∫–∏
        # print(f"[InputManager] Passed lock check. Processing key '{key}'...")
        # # 1. UI –∫–æ–º–∞–Ω–¥—ã (—Å–∞–º—ã–π –≤—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
        # if self.ui_setup:
        #     # –û—Ç–ª–∞–¥–∫–∞: —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ UI?
        #     print(f"[InputManager] Calling ui_setup.handle_demo_commands('{key}')...")
        #     processed = self.ui_setup.handle_demo_commands(key)
        #     print(f"[InputManager] ...ui_setup.handle_demo_commands returned: {processed}")
        #     # handle_demo_commands –≤–µ—Ä–Ω–µ—Ç True, –µ—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –±—ã–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞
        #     if processed:
        #         return

        # 2. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ø–æ—Ä–∞–º–∏
        if key == 'f':
            if self.spore_manager:
                self.spore_manager.generate_new_spore()
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä—ã –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–π –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            now = time.time()
            self.f_key_down_time = now
            self.next_spawn_time = now + self.long_press_threshold
            return
        
        if key == 'g':
            if self.spore_manager:
                self.spore_manager.activate_random_candidate()
            return
        
        if key == 'v':
            if self.spore_manager:
                self.spore_manager.evolve_all_candidates_to_completion()
            return
        
        if key == 'p':
            # –ü—Ä–∏–º–µ–Ω–∏—Ç—å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –ø–∞—Ä—ã –∫ –ø—Ä–∏–∑—Ä–∞—á–Ω–æ–º—É –¥–µ—Ä–µ–≤—É –ø–æ–¥ –∫—É—Ä—Å–æ—Ä–æ–º
            if self.manual_spore_manager:
                self._apply_optimal_pairs_to_ghost_tree()
            return
        
        if key == 'u':
            if self.scene_setup and hasattr(self.scene_setup, 'frame'):
                self.scene_setup.frame.toggle_visibility()  # type: ignore
            return
            
        # 3. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        if self.zoom_manager:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–∂–∞—Ç –ª–∏ Ctrl
            ctrl_pressed = held_keys['left control'] or held_keys['right control']  # type: ignore
            
            if ctrl_pressed:
                # Ctrl + –∫–æ–ª–µ—Å–∏–∫–æ = —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ dt
                if key == 'scroll up' and self.dt_manager:
                    self.dt_manager.increase_dt()
                    return
                elif key == 'scroll down' and self.dt_manager:
                    self.dt_manager.decrease_dt()
                    return
            else:
                # –û–±—ã—á–Ω–æ–µ –∫–æ–ª–µ—Å–∏–∫–æ = –∑—É–º
                if key == 'e' or key == 'scroll up':
                    self.zoom_manager.zoom_in()
                elif key == 't' or key == 'scroll down':
                    self.zoom_manager.zoom_out()
        
        # –û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –∑—É–º–∞
            if key == 'r': 
                self.zoom_manager.reset_zoom()
            elif key == '1': 
                self.zoom_manager.increase_spores_scale()
            elif key == '2': 
                self.zoom_manager.decrease_spores_scale()

        if key == 'm':  # Reset dt to original
            if self.dt_manager:
                self.dt_manager.reset_dt()
            return

        # 4. –ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ dt
        if key == 'j':  # Show dt info
            if self.dt_manager:
                self.dt_manager.print_stats()
            return

        
        # 4. –û—á–∏—Å—Ç–∫–∞ –æ–±—ä–µ–∫—Ç–æ–≤ (v13_manual)
        if  held_keys['c'] and self.spore_manager and held_keys['left control']:  # type: ignore
            print("üßπ –ö–ª–∞–≤–∏—à–∞ C: –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —Å–ø–æ—Ä –∏ –æ–±—ä–µ–∫—Ç–æ–≤")
            
            # üÜï –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ manual_spore_manager
            if self.manual_spore_manager:
                print(f"   üîç ManualSporeManager –Ω–∞–π–¥–µ–Ω: {type(self.manual_spore_manager)}")
                if hasattr(self.manual_spore_manager, 'clear_all'):
                    print(f"   üîç –ú–µ—Ç–æ–¥ clear_all –Ω–∞–π–¥–µ–Ω")
                    print(f"   üìä created_links –¥–æ –æ—á–∏—Å—Ç–∫–∏: {len(self.manual_spore_manager.created_links)}")
                    self.manual_spore_manager.clear_all()  
                else:
                    print(f"   ‚ùå –ú–µ—Ç–æ–¥ clear_all –ù–ï –Ω–∞–π–¥–µ–Ω!")
            else:
                print(f"   ‚ùå ManualSporeManager –ù–ï –Ω–∞–π–¥–µ–Ω!")
            
            self.spore_manager.clear_all_manual()
            
        # 5. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º
        # if self.param_manager:
        #     if key == 'z': 
        #         self.param_manager.increase()
        #     elif key == 'x': 
        #         self.param_manager.decrease()


        if key == 'z' or key == 'backspace':
            if self.manual_spore_manager:
                print("üóëÔ∏è –ö–ª–∞–≤–∏—à–∞ —É–¥–∞–ª–µ–Ω–∏—è: –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≥—Ä—É–ø–ø—ã —Å–ø–æ—Ä")
                success = self.manual_spore_manager.delete_last_spore_group()
                if success:
                    print("   ‚úÖ –ü–æ—Å–ª–µ–¥–Ω—è—è –≥—Ä—É–ø–ø–∞ —Å–ø–æ—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞")
                else:
                    print("   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≥—Ä—É–ø–ø—É (–≤–æ–∑–º–æ–∂–Ω–æ, –Ω–µ—Ç –≥—Ä—É–ø–ø –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è)")
            else:
                print("   ‚ùå ManualSporeManager –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return

        # 5. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±–ª–∞—Å—Ç—å—é —Å–ø–∞–≤–Ω–∞
        if self.spawn_area_manager:
            if key == '3' or key == 'arrow_up': 
                self.spawn_area_manager.decrease_eccentricity()
            elif key == '4' or key == 'arrow_down': 
                self.spawn_area_manager.increase_eccentricity()
        
        # 6. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–¥–∏—É—Å–æ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
        if self.spore_manager:
            if key == '5':
                self.spore_manager.adjust_min_radius(1/1.2)  # –£–º–µ–Ω—å—à–∏—Ç—å —Ä–∞–¥–∏—É—Å (√∑1.2)
            elif key == '6':
                self.spore_manager.adjust_min_radius(1.2)    # –£–≤–µ–ª–∏—á–∏—Ç—å —Ä–∞–¥–∏—É—Å (√ó1.2)
        
        # 7. –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∞–Ω–≥–µ–ª–æ–≤
        if key == 'y':
            if self.angel_manager:
                self.angel_manager.toggle_angels()
            else:
                always_print("‚ö†Ô∏è Angel Manager –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # –ö–æ–º–∞–Ω–¥—ã –¥–µ—Ä–µ–≤—å–µ–≤
        if key == 'k':
            if self.manual_spore_manager and hasattr(self.manual_spore_manager, 'toggle_creation_mode'):
                self.manual_spore_manager.toggle_creation_mode()
            return

        # –ì–ª—É–±–∏–Ω–∞ –¥–µ—Ä–µ–≤–∞ (—Ç–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ –¥–µ—Ä–µ–≤–∞)
        if self.manual_spore_manager and hasattr(self.manual_spore_manager, 'creation_mode'):
            if self.manual_spore_manager.creation_mode == 'tree':
                if key == '7' and hasattr(self.manual_spore_manager, 'set_tree_depth'):
                    self.manual_spore_manager.set_tree_depth(1)
                    return
                if key == '8' and hasattr(self.manual_spore_manager, 'set_tree_depth'):
                    self.manual_spore_manager.set_tree_depth(2)
                    return

        # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–µ—Ä–µ–≤–∞
        if key == 'o':
            if self.manual_spore_manager and hasattr(self.manual_spore_manager, 'optimize_tree'):
                self.manual_spore_manager.optimize_tree()  # –ï—Å–ª–∏ –¥–æ–±–∞–≤–∏—Ç–µ —ç—Ç–æ—Ç –º–µ—Ç–æ–¥
            return

    def _apply_optimal_pairs_to_ghost_tree(self) -> None:
        """
        –ù–∞—Ö–æ–¥–∏—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –ø–∞—Ä—ã –¥–ª—è –ø—Ä–∏–∑—Ä–∞—á–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞ –ø–æ–¥ –∫—É—Ä—Å–æ—Ä–æ–º
        –∏ –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ dt –≤ ghost_tree_dt_vector
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º—ã –≤ —Ä–µ–∂–∏–º–µ –¥–µ—Ä–µ–≤–∞ –≥–ª—É–±–∏–Ω—ã 2
            if not self.manual_spore_manager:
                print(f"‚ùå ManualSporeManager –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
                
            if self.manual_spore_manager.creation_mode != 'tree' or self.manual_spore_manager.tree_depth != 2:
                print(f"‚ùå –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–∞—Ä –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –¥–µ—Ä–µ–≤—å–µ–≤ –≥–ª—É–±–∏–Ω—ã 2")
                print(f"   –¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º: {self.manual_spore_manager.creation_mode}")
                print(f"   –¢–µ–∫—É—â–∞—è –≥–ª—É–±–∏–Ω–∞: {self.manual_spore_manager.tree_depth}")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –∫—É—Ä—Å–æ—Ä–∞
            mouse_pos = self.manual_spore_manager.get_mouse_world_position()
            if mouse_pos is None:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é –∫—É—Ä—Å–æ—Ä–∞")
                return

            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ numpy array
            cursor_position_2d = np.array([mouse_pos[0], mouse_pos[1]])
            
            print(f"üéØ –ü–æ–∏—Å–∫ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö –ø–∞—Ä –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ {cursor_position_2d}")
            
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω—É–∂–Ω—ã–µ –∫–ª–∞—Å—Å—ã
            from ..logic.tree.spore_tree import SporeTree
            from ..logic.tree.spore_tree_config import SporeTreeConfig
            from ..logic.tree.pairs.find_optimal_pairs import find_optimal_pairs
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π dt –∏–∑ —Å–∏—Å—Ç–µ–º—ã
            dt = self.dt_manager.get_dt() if self.dt_manager else 0.05
            
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –¥–µ—Ä–µ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–∞—Ä
            tree_config = SporeTreeConfig(
                initial_position=cursor_position_2d,
                dt_base=dt,
                dt_grandchildren_factor=0.2,
                show_debug=False
            )
            
            temp_tree = SporeTree(
                pendulum=self.manual_spore_manager.deps.pendulum,
                config=tree_config,
                auto_create=True  # –°–æ–∑–¥–∞–µ—Ç –ø–æ–ª–Ω–æ–µ –¥–µ—Ä–µ–≤–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
            )
            
            print(f"üå≤ –í—Ä–µ–º–µ–Ω–Ω–æ–µ –¥–µ—Ä–µ–≤–æ —Å–æ–∑–¥–∞–Ω–æ: {len(temp_tree.children)} –¥–µ—Ç–µ–π, {len(temp_tree.grandchildren)} –≤–Ω—É–∫–æ–≤")
            
            # –ò—â–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –ø–∞—Ä—ã
            pairs = find_optimal_pairs(temp_tree, show=True)
            
            if pairs is None:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–∞—Ä—ã")
                return
            
            # –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ä–æ–≤–Ω–æ 4 –ø–∞—Ä—ã
            if len(pairs) != 4:
                raise Exception(f"–û–®–ò–ë–ö–ê: –ù–∞–π–¥–µ–Ω–æ {len(pairs)} –ø–∞—Ä, –∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ä–æ–≤–Ω–æ 4!")
            
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(pairs)} –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö –ø–∞—Ä")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º dt –∏–∑ –ø–∞—Ä
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤—ã –∏—Å—Ö–æ–¥–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
            dt_children = np.array([child['dt'] for child in temp_tree.children])
            dt_grandchildren = np.array([gc['dt'] for gc in temp_tree.grandchildren])
            
            print(f"üìä –ò—Å—Ö–æ–¥–Ω—ã–µ dt –¥–µ—Ç–µ–π: {dt_children}")
            print(f"üìä –ò—Å—Ö–æ–¥–Ω—ã–µ dt –≤–Ω—É–∫–æ–≤: {dt_grandchildren}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º dt –≤–Ω—É–∫–æ–≤ —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–∞–π–¥–µ–Ω–Ω—ã–º –ø–∞—Ä–∞–º
            for pair_idx, (gc_i, gc_j, meeting_info) in enumerate(pairs):
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∞ (–í–ê–ñ–ù–û: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∑–Ω–∞–∫–∏!)
                optimal_dt_i = meeting_info['time_gc']      # –≤—Ä–µ–º—è –¥–ª—è gc_i
                optimal_dt_j = meeting_info['time_partner'] # –≤—Ä–µ–º—è –¥–ª—è gc_j
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –º–∞—Å—Å–∏–≤ dt_grandchildren
                dt_grandchildren[gc_i] = optimal_dt_i
                dt_grandchildren[gc_j] = optimal_dt_j
                
                print(f"   –ü–∞—Ä–∞ {pair_idx+1}: gc_{gc_i} ‚Üî gc_{gc_j}")
                print(f"     gc_{gc_i}: {temp_tree.grandchildren[gc_i]['dt']:+.6f} ‚Üí {optimal_dt_i:+.6f}")
                print(f"     gc_{gc_j}: {temp_tree.grandchildren[gc_j]['dt']:+.6f} ‚Üí {optimal_dt_j:+.6f}")
                print(f"     –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∏: {meeting_info['distance']:.6f}")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π dt_vector –∏–∑ 12 —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            # –ü–µ—Ä–≤—ã–µ 4 - dt –¥–µ—Ç–µ–π, —Å–ª–µ–¥—É—é—â–∏–µ 8 - dt –≤–Ω—É–∫–æ–≤
            dt_vector = np.concatenate([dt_children, dt_grandchildren])
            
            print(f"üéØ –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π dt_vector:")
            print(f"   dt_children (0:4): {dt_vector[:4]}")  
            print(f"   dt_grandchildren (4:12): {dt_vector[4:12]}")
            
            # –ü–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –≤ –ø—Ä–∏–∑—Ä–∞—á–Ω–æ–µ –¥–µ—Ä–µ–≤–æ
            self.manual_spore_manager.ghost_tree_dt_vector = dt_vector
            
            # –í–ê–ñ–ù–û: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∞—Ä–µ–Ω–Ω–æ–µ –¥–µ—Ä–µ–≤–æ
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∏–∑—Ä–∞—á–Ω–æ–µ –¥–µ—Ä–µ–≤–æ —Å –Ω–æ–≤—ã–º dt_vector
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º —Å –Ω–æ–≤—ã–º dt_vector
            self.manual_spore_manager.prediction_manager.clear_predictions()
            self.manual_spore_manager._update_predictions()

            print(f"üîÑ –ü—Ä–∏–∑—Ä–∞—á–Ω–æ–µ –¥–µ—Ä–µ–≤–æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–æ —Å –Ω–æ–≤—ã–º–∏ dt")
            
            print(f"üå≤ –ü—Ä–∏–∑—Ä–∞—á–Ω–æ–µ –¥–µ—Ä–µ–≤–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ —Å–æ —Å–ø–∞—Ä–µ–Ω–Ω—ã–º–∏ dt!")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä: {e}")
            import traceback
            traceback.print_exc()