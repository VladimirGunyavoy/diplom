from ursina import destroy
import numpy as np
from typing import Dict, Optional

from ..core.spore import Spore
from ..visual.pillar import Pillar
from ..managers.color_manager import ColorManager
from ..managers.zoom_manager import ZoomManager
from ..logic.cost_function import CostFunction

class PredictionVisualizer:
    """
    –£–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª–Ω—ã–º –Ω–∞–±–æ—Ä–æ–º –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –æ–¥–Ω–æ–≥–æ
    –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –±—É–¥—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è ("–ø—Ä–∏–∑—Ä–∞–∫–∞").

    –≠—Ç–æ –≤–∫–ª—é—á–∞–µ—Ç –≤ —Å–µ–±—è:
    - –°–∞–º—É —Å–ø–æ—Ä—É-–ø—Ä–∏–∑—Ä–∞–∫–∞.
    - "–ê–Ω–≥–µ–ª–∞" (–≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é —Å—Ç–æ–∏–º–æ—Å—Ç–∏).
    - "–°—Ç–æ–ª–±" –ø–æ–¥ –∞–Ω–≥–µ–ª–æ–º.

    –ö–ª–∞—Å—Å –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤–∫–ª—é—á–∞—Ç—å –∏ –≤—ã–∫–ª—é—á–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–µ —á–∞—Å—Ç–∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
    —á–µ—Ä–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.
    """
    ANGEL_HEIGHT_OFFSET_RATIO: float = 0.01

    def __init__(self,
                 parent_spore: Optional[Spore],
                 color_manager: ColorManager,
                 zoom_manager: ZoomManager,
                 cost_function: Optional[CostFunction],
                 config: Dict,
                 spore_id: str):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–ª—è –æ–¥–Ω–æ–≥–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è.

        Args:
            parent_spore: –†–µ–∞–ª—å–Ω–∞—è —Å–ø–æ—Ä–∞, –æ—Ç –∫–æ—Ç–æ—Ä–æ–π –¥–µ–ª–∞–µ—Ç—Å—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ, –∏–ª–∏ None –¥–ª—è –ø—Ä–∏–∑—Ä–∞—á–Ω—ã—Ö –¥–µ—Ä–µ–≤—å–µ–≤.
            color_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä —Ü–≤–µ—Ç–æ–≤.
            zoom_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è.
            cost_function: –§—É–Ω–∫—Ü–∏—è —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –≤—ã—Å–æ—Ç—ã –∞–Ω–≥–µ–ª–æ–≤.
            config: –°–ª–æ–≤–∞—Ä—å —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π —Ñ–ª–∞–≥–∏ 'show_ghosts', 'show_angels', 'show_pillars'.
            spore_id: –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è —ç—Ç–æ–≥–æ –Ω–∞–±–æ—Ä–∞ –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤.
        """
        self.parent_spore: Optional[Spore] = parent_spore
        self.color_manager: ColorManager = color_manager
        self.zoom_manager: ZoomManager = zoom_manager
        self.cost_function: Optional[CostFunction] = cost_function
        self.config: Dict = config
        self.id: str = spore_id

        # –§–ª–∞–≥–∏ –≤–∏–¥–∏–º–æ—Å—Ç–∏
        self.show_ghost_spore: bool = self.config.get('spore',{}).get('show_ghosts', True)
        self.show_angel: bool = self.config.get('angel', {}).get('show_angels', True)
        self.show_pillar: bool = self.config.get('angel', {}).get('show_pillars', True)

        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç–æ–ª–±–æ–≤
        angel_config = self.config.get('angel', {})
        self.pillar_width: float = angel_config.get('ghost_pillar_width', angel_config.get('pillar_width', 0.05))

        # –°—É—â–Ω–æ—Å—Ç–∏ Ursina
        self.ghost_spore: Optional[Spore] = None
        self.angel: Optional[Spore] = None
        self.pillar: Optional[Pillar] = None
        
        # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: –±—É—Ñ–µ—Ä—ã –¥–ª—è –º–∞—Å—Å–∏–≤–æ–≤ —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å np.array() –≤ update()
        self._position_3d_buffer = np.array([0.0, 0.0, 0.0], dtype=float)
        self._angel_offset_buffer = np.array([0.0, 0.0, 0.0], dtype=float)
        self._pillar_offset_buffer = np.array([0.0, 0.0, 0.0], dtype=float)
        self._pillar_scale_buffer = np.array([0.0, 0.0, 0.0], dtype=float)
        
        self._create_entities()

    def _create_entities(self) -> None:
        """–°–æ–∑–¥–∞–µ—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å—É—â–Ω–æ—Å—Ç–∏ Ursina."""
        
        # 1. –°–æ–∑–¥–∞–µ–º —Å–ø–æ—Ä—É-–ø—Ä–∏–∑—Ä–∞–∫–∞ (–±–∞–∑–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç)
        if self.show_ghost_spore:
            if self.parent_spore is not None:
                # –û–±—ã—á–Ω—ã–π —Å–ª—É—á–∞–π - –∫–ª–æ–Ω–∏—Ä—É–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é —Å–ø–æ—Ä—É
                self.ghost_spore = self.parent_spore.clone()
                self.ghost_spore.is_ghost = True
                self.ghost_spore.id = f"prediction_ghost_{self.id}"
                self.ghost_spore.color = self.color_manager.get_color('spore', 'ghost')
                self.ghost_spore.set_y_coordinate(0.0)
                # –ü—Ä–∏–∑—Ä–∞—á–Ω—ã–µ —Å–ø–æ—Ä—ã –Ω–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—é—Ç—Å—è –≤ ZoomManager - –æ–Ω–∏ –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–µ
            else:
                # –°–ª—É—á–∞–π –ø—Ä–∏–∑—Ä–∞—á–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞ - —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–ø–æ—Ä—É
                from ..core.spore import Spore
                from ..logic.pendulum import PendulumSystem
                
                # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –º–∞—è—Ç–Ω–∏–∫ –¥–ª—è –ø—Ä–∏–∑—Ä–∞–∫–∞
                temp_pendulum = PendulumSystem()
                
                correct_scale = getattr(self.zoom_manager, 'config', {}).get('spore', {}).get('scale', 0.02)
                self.ghost_spore = Spore(
                    dt=0.1,
                    pendulum=temp_pendulum,
                    goal_position=(0, 0),
                    model='sphere',
                    position=(0, 0, 0),
                    scale=correct_scale,  # üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π scale
                    color_manager=self.color_manager,
                    is_ghost=True
                )
                self.ghost_spore.id = f"prediction_ghost_{self.id}"
                self.ghost_spore.color = self.color_manager.get_color('spore', 'ghost')
                self.ghost_spore.set_y_coordinate(0.0)
                # –ü—Ä–∏–∑—Ä–∞—á–Ω—ã–µ —Å–ø–æ—Ä—ã –Ω–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—é—Ç—Å—è –≤ ZoomManager - –æ–Ω–∏ –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–µ

        # –î–ª—è –∞–Ω–≥–µ–ª–∞ –∏ —Å—Ç–æ–ª–±–∞ –Ω—É–∂–µ–Ω ghost_spore, –¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω –Ω–µ–≤–∏–¥–∏–º—ã–π, –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
        if not self.ghost_spore and self.parent_spore is not None:
            self.ghost_spore = self.parent_spore.clone()
            self.ghost_spore.enabled = False
            self.ghost_spore.set_y_coordinate(0.0)
        elif not self.ghost_spore:
            # –°–ª—É—á–∞–π –∫–æ–≥–¥–∞ –Ω–µ—Ç parent_spore - —Å–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –ø—Ä–∏–∑—Ä–∞—á–Ω—É—é —Å–ø–æ—Ä—É
            from ..core.spore import Spore
            from ..logic.pendulum import PendulumSystem
            
            temp_pendulum = PendulumSystem()
            self.ghost_spore = Spore(
                dt=0.1,
                pendulum=temp_pendulum,
                goal_position=(0, 0),
                model='sphere',
                position=(0, 0, 0),
                color_manager=self.color_manager,
                is_ghost=True
            )
            self.ghost_spore.enabled = False
            self.ghost_spore.set_y_coordinate(0.0)

        # 2. –°–æ–∑–¥–∞–µ–º –∞–Ω–≥–µ–ª–∞
        if self.show_angel and self.cost_function and self.ghost_spore:
            if hasattr(self.ghost_spore, 'clone'):
                self.angel = self.ghost_spore.clone()
                self.angel.id = f"ghost_angel_{self.id}"
                self.angel.color = self.color_manager.get_color('angel', 'ghost')
                self.zoom_manager.register_object(self.angel, self.angel.id)

        # 3. –°–æ–∑–¥–∞–µ–º —Å—Ç–æ–ª–±
        if self.show_pillar and self.cost_function and self.ghost_spore:
            self.pillar = Pillar(
                model='cube',
                color=self.color_manager.get_color('angel', 'ghost_pillar')
            )
            self.pillar.id = f"ghost_pillar_{self.id}"
            self.zoom_manager.register_object(self.pillar, self.pillar.id)


    def update(self, predicted_state_2d: np.ndarray) -> None:
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ–ª–æ–∂–µ–Ω–∏–µ –∏ –º–∞—Å—à—Ç–∞–± –≤—Å–µ—Ö –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ
        –Ω–æ–≤–æ–≥–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è.

        Args:
            predicted_state_2d (np.array): –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–æ–µ 2D —Å–æ—Å—Ç–æ—è–Ω–∏–µ (—É–≥–æ–ª, —É–≥–ª–æ–≤–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å).
        """
        if not self.ghost_spore:
            return

        # 1. –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é —Å–ø–æ—Ä—ã-–ø—Ä–∏–∑—Ä–∞–∫–∞ (Y=0 –¥–ª—è –ø–ª–æ—Å–∫–æ—Å—Ç–∏ XZ)
        # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: –∏—Å–ø–æ–ª—å–∑—É–µ–º –±—É—Ñ–µ—Ä –≤–º–µ—Å—Ç–æ np.array()
        self._position_3d_buffer[0] = predicted_state_2d[0]
        self._position_3d_buffer[1] = 0.0
        self._position_3d_buffer[2] = predicted_state_2d[1]
        self.ghost_spore.real_position = self._position_3d_buffer.copy()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–≥–∏—á–µ—Å–∫—É—é –ø–æ–∑–∏—Ü–∏—é –Ω–∞–ø—Ä—è–º—É—é, –Ω–µ –∑–∞—Ç—Ä–∞–≥–∏–≤–∞—è Y
        self.ghost_spore.logic.set_position_2d(predicted_state_2d)
        self.ghost_spore.apply_transform(
            self.zoom_manager.a_transformation,
            self.zoom_manager.b_translation,
            spores_scale=self.zoom_manager.spores_scale
        )
        
        if not self.cost_function:
            return

        # 2. –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–ª—è –≤—ã—Å–æ—Ç—ã
        display_height = self.cost_function.get_cost(predicted_state_2d)
        y_offset = display_height * self.ANGEL_HEIGHT_OFFSET_RATIO

        # 3. –û–±–Ω–æ–≤–ª—è–µ–º –∞–Ω–≥–µ–ª–∞
        if self.angel:
            # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: –∏—Å–ø–æ–ª—å–∑—É–µ–º –±—É—Ñ–µ—Ä –≤–º–µ—Å—Ç–æ np.array([0, height, 0])
            self._angel_offset_buffer[0] = 0.0
            self._angel_offset_buffer[1] = display_height + y_offset
            self._angel_offset_buffer[2] = 0.0
            self.angel.real_position = self.ghost_spore.real_position + self._angel_offset_buffer
            self.angel.apply_transform(
                self.zoom_manager.a_transformation,
                self.zoom_manager.b_translation,
                spores_scale=self.zoom_manager.spores_scale
            )

        # 4. –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–æ–ª–±
        if self.pillar:
            # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: –∏—Å–ø–æ–ª—å–∑—É–µ–º –±—É—Ñ–µ—Ä—ã –≤–º–µ—Å—Ç–æ np.array()
            pillar_height = (display_height + y_offset) / 2
            self._pillar_offset_buffer[0] = 0.0
            self._pillar_offset_buffer[1] = pillar_height
            self._pillar_offset_buffer[2] = 0.0
            self.pillar.real_position = self.ghost_spore.real_position + self._pillar_offset_buffer
            
            self._pillar_scale_buffer[0] = self.pillar_width
            self._pillar_scale_buffer[1] = display_height + y_offset
            self._pillar_scale_buffer[2] = self.pillar_width
            self.pillar.real_scale = self._pillar_scale_buffer.copy()
            
            self.pillar.apply_transform(
                self.zoom_manager.a_transformation,
                self.zoom_manager.b_translation,
                spores_scale=self.zoom_manager.spores_scale
            )

    def destroy(self) -> None:
        """–£–Ω–∏—á—Ç–æ–∂–∞–µ—Ç –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —ç—Ç–∏–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ–º —Å—É—â–Ω–æ—Å—Ç–∏."""
        if self.ghost_spore:
            destroy(self.ghost_spore)
        if self.angel:
            destroy(self.angel)
        if self.pillar:
            destroy(self.pillar)
        
        self.ghost_spore = None
        self.angel = None
        self.pillar = None
        
    def set_visibility(self, is_visible: bool) -> None:
        """–£–ø—Ä–∞–≤–ª—è–µ—Ç –≤–∏–¥–∏–º–æ—Å—Ç—å—é –≤—Å–µ—Ö —Å—É—â–Ω–æ—Å—Ç–µ–π."""
        if self.ghost_spore and self.show_ghost_spore:
            self.ghost_spore.enabled = is_visible
        if self.angel and self.show_angel:
            self.angel.enabled = is_visible
        if self.pillar and self.show_pillar:
            self.pillar.enabled = is_visible 