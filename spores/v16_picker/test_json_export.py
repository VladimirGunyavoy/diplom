#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ JSON —ç–∫—Å–ø–æ—Ä—Ç–∞ –≥—Ä–∞—Ñ–∞.
"""

import sys
import os
import json

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º –ø—Ä–æ–µ–∫—Ç–∞
sys.path.append(os.path.join(os.path.dirname(__file__), 'src'))

def test_json_export():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–π JSON —ç–∫—Å–ø–æ—Ä—Ç —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –Ω–æ–º–µ—Ä–∞–º–∏ –ª–∏–Ω–∫–æ–≤."""
    
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ì–û JSON –≠–ö–°–ü–û–†–¢–ê")
    print("=" * 50)
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏
        from src.managers.spore_manager import SporeManager
        from src.managers.buffer_merge_manager import BufferMergeManager
        from src.logic.pendulum import PendulumSystem
        from src.managers.zoom_manager import ZoomManager
        from src.managers.color_manager import ColorManager
        from src.managers.param_manager import ParamManager
        
        print("‚úÖ –ú–æ–¥—É–ª–∏ —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
        
        # –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config = {
            'pendulum': {'dt': 0.1},
            'spore': {'scale': 0.05, 'goal_position': [3.14159, 0]},
            'link': {'show': True}
        }
        
        # –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        pendulum = PendulumSystem(config.get('pendulum', {}))
        zoom_manager = ZoomManager()
        color_manager = ColorManager()
        param_manager = ParamManager()
        
        # –°–æ–∑–¥–∞–µ–º SporeManager
        spore_manager = SporeManager(
            pendulum=pendulum,
            zoom_manager=zoom_manager,
            settings_param=param_manager,
            color_manager=color_manager,
            config=config
        )
        
        # –°–æ–∑–¥–∞–µ–º BufferMergeManager
        buffer_manager = BufferMergeManager(
            distance_threshold=0.001,
            config=config
        )
        
        print("‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä—ã —Å–æ–∑–¥–∞–Ω—ã")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–æ–≤—ã—Ö –º–µ—Ç–æ–¥–æ–≤ —ç–∫—Å–ø–æ—Ä—Ç–∞
        export_methods = [
            'export_graph_to_json',
            'save_graph_json'
        ]
        
        for method_name in export_methods:
            if hasattr(buffer_manager, method_name):
                print(f"‚úÖ –ú–µ—Ç–æ–¥ {method_name} –Ω–∞–π–¥–µ–Ω")
            else:
                print(f"‚ùå –ú–µ—Ç–æ–¥ {method_name} –ù–ï –Ω–∞–π–¥–µ–Ω")
                return False
        
        print("\nüîç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –≠–ö–°–ü–û–†–¢–ê:")
        print("-" * 30)
        
        # –¢–µ—Å—Ç 1: –≠–∫—Å–ø–æ—Ä—Ç –ø—É—Å—Ç–æ–≥–æ –≥—Ä–∞—Ñ–∞
        print("1. –¢–µ—Å—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞ –ø—É—Å—Ç–æ–≥–æ –≥—Ä–∞—Ñ–∞:")
        graph_data = buffer_manager.export_graph_to_json(spore_manager)
        
        if isinstance(graph_data, dict):
            print("   ‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å")
            print(f"   üìä –°–ø–æ—Ä: {len(graph_data.get('spores', []))}")
            print(f"   üîó –õ–∏–Ω–∫–æ–≤: {len(graph_data.get('links', []))}")
            print(f"   üìã –í–µ—Ä—Å–∏—è: {graph_data.get('version', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
        else:
            print("   ‚ùå –î–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Å–ª–æ–≤–∞—Ä—å")
            return False
        
        # –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
        print("2. –¢–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö:")
        required_keys = ['timestamp', 'version', 'spores', 'links', 'stats']
        for key in required_keys:
            if key in graph_data:
                print(f"   ‚úÖ –ö–ª—é—á '{key}' –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            else:
                print(f"   ‚ùå –ö–ª—é—á '{key}' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                return False
        
        # –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        print("3. –¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:")
        stats = graph_data.get('stats', {})
        if 'total_spores' in stats and 'total_links' in stats:
            print(f"   ‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞: {stats['total_spores']} —Å–ø–æ—Ä, {stats['total_links']} –ª–∏–Ω–∫–æ–≤")
        else:
            print("   ‚ùå –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
            return False
        
        # –¢–µ—Å—Ç 4: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª
        print("4. –¢–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª:")
        try:
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É –¥–ª—è —Ç–µ—Å—Ç–æ–≤
            test_dir = "test_exports"
            os.makedirs(test_dir, exist_ok=True)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
            test_filepath = buffer_manager.save_graph_json(spore_manager, "test_export.json")
            
            if os.path.exists(test_filepath):
                print(f"   ‚úÖ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {test_filepath}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
                with open(test_filepath, 'r', encoding='utf-8') as f:
                    saved_data = json.load(f)
                
                if saved_data == graph_data:
                    print("   ‚úÖ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                else:
                    print("   ‚ùå –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —ç–∫—Å–ø–æ—Ä—Ç—É")
                    return False
                
                # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
                os.remove(test_filepath)
                print("   üóëÔ∏è –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω")
                
            else:
                print("   ‚ùå –§–∞–π–ª –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω")
                return False
                
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {e}")
            return False
        
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π JSON —ç–∫—Å–ø–æ—Ä—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print("‚úÖ –ù–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã –ø–æ–∏—Å–∫–∞ –ª–∏–Ω–∫–æ–≤ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —ç–∫—Å–ø–æ—Ä—Ç")
        
        return True
        
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        print("üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        return False
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_link_numbering():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω—É–º–µ—Ä–∞—Ü–∏–∏ –ª–∏–Ω–∫–æ–≤ –≤ —ç–∫—Å–ø–æ—Ä—Ç–µ."""
    
    print("\nüî¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ù–£–ú–ï–†–ê–¶–ò–ò –õ–ò–ù–ö–û–í")
    print("=" * 40)
    
    try:
        from src.managers.spore_manager import SporeManager
        from src.managers.buffer_merge_manager import BufferMergeManager
        from src.logic.pendulum import PendulumSystem
        from src.managers.zoom_manager import ZoomManager
        from src.managers.color_manager import ColorManager
        from src.managers.param_manager import ParamManager
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config = {
            'pendulum': {'dt': 0.1},
            'spore': {'scale': 0.05, 'goal_position': [3.14159, 0]},
            'link': {'show': True}
        }
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        pendulum = PendulumSystem(config.get('pendulum', {}))
        zoom_manager = ZoomManager()
        color_manager = ColorManager()
        param_manager = ParamManager()
        
        spore_manager = SporeManager(
            pendulum=pendulum,
            zoom_manager=zoom_manager,
            settings_param=param_manager,
            color_manager=color_manager,
            config=config
        )
        
        buffer_manager = BufferMergeManager(
            distance_threshold=0.001,
            config=config
        )
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–µ—Ç–æ–¥—ã –ø–æ–∏—Å–∫–∞ –ª–∏–Ω–∫–æ–≤
        print("1. –¢–µ—Å—Ç –º–µ—Ç–æ–¥–æ–≤ –ø–æ–∏—Å–∫–∞ –ª–∏–Ω–∫–æ–≤:")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ª–∏–Ω–∫–æ–≤
        all_links = spore_manager.list_all_links()
        print(f"   üìã –í—Å–µ–≥–æ –ª–∏–Ω–∫–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: {len(all_links)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∏—Å–∫ –ø–æ –Ω–æ–º–µ—Ä—É
        for i in range(1, 6):  # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 5 –Ω–æ–º–µ—Ä–æ–≤
            link = spore_manager.find_link_by_number(i)
            if link is None:
                print(f"   ‚ÑπÔ∏è –õ–∏–Ω–∫ #{i} –Ω–µ –Ω–∞–π–¥–µ–Ω (–æ–∂–∏–¥–∞–µ–º–æ –¥–ª—è –ø—É—Å—Ç–æ–≥–æ –≥—Ä–∞—Ñ–∞)")
            else:
                print(f"   ‚úÖ –õ–∏–Ω–∫ #{i} –Ω–∞–π–¥–µ–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ª–∏–Ω–∫–µ
        link_info = spore_manager.get_link_info(1)
        if link_info.get('found') == False:
            print("   ‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ª–∏–Ω–∫")
        else:
            print("   ‚ùå –î–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –æ—à–∏–±–∫—É –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ª–∏–Ω–∫–∞")
        
        print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω—É–º–µ—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –Ω—É–º–µ—Ä–∞—Ü–∏–∏: {e}")
        return False

if __name__ == "__main__":
    print("üöÄ –ó–ê–ü–£–°–ö –¢–ï–°–¢–û–í JSON –≠–ö–°–ü–û–†–¢–ê")
    print("=" * 60)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ—Å—Ç—ã
    success1 = test_json_export()
    success2 = test_link_numbering()
    
    if success1 and success2:
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("‚úÖ JSON —ç–∫—Å–ø–æ—Ä—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print("‚úÖ –ù—É–º–µ—Ä–∞—Ü–∏—è –ª–∏–Ω–∫–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
        sys.exit(0)
    else:
        print("\n‚ùå –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ó–ê–í–ï–†–®–ò–õ–ò–°–¨ –° –û–®–ò–ë–ö–ê–ú–ò")
        sys.exit(1)
