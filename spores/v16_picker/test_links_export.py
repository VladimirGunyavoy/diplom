#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞ —Å–≤—è–∑–µ–π –≤ JSON.
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ —Å–≤—è–∑–∏ –º–µ–∂–¥—É —Å–ø–æ—Ä–∞–º–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –≤ –≥—Ä–∞—Ñ –∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è –≤ JSON.
"""

import sys
import os
import json

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
script_dir = os.path.dirname(os.path.abspath(__file__))
sys.path.append(script_dir)

def test_links_export():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —ç–∫—Å–ø–æ—Ä—Ç —Å–≤—è–∑–µ–π –º–µ–∂–¥—É —Å–ø–æ—Ä–∞–º–∏."""
    
    print("üîç –¢–ï–°–¢ –≠–ö–°–ü–û–†–¢–ê –°–í–Ø–ó–ï–ô –í JSON")
    print("=" * 50)
    
    # –ü—É—Ç—å –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É JSON —Ñ–∞–π–ª—É
    json_path = os.path.join(script_dir, 'scripts', 'run', 'buffer', 'real_graph_latest.json')
    
    if not os.path.exists(json_path):
        print(f"‚ùå JSON —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {json_path}")
        print("üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ main_demo.py –∏ —Å–æ–∑–¥–∞–π—Ç–µ –¥–µ—Ä–µ–≤–æ —á–µ—Ä–µ–∑ K ‚Üí O ‚Üí M ‚Üí –õ–ö–ú")
        return False
    
    try:
        with open(json_path, 'r', encoding='utf-8') as f:
            data = json.load(f)
        
        print(f"‚úÖ JSON —Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: {json_path}")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        spores = data.get('spores', [])
        links = data.get('links', [])
        stats = data.get('statistics', {})
        
        print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"   –°–ø–æ—Ä –≤ JSON: {len(spores)}")
        print(f"   –°–≤—è–∑–µ–π –≤ JSON: {len(links)}")
        print(f"   –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats.get('total_spores', 0)} —Å–ø–æ—Ä, {stats.get('total_links', 0)} —Å–≤—è–∑–µ–π")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤—è–∑–∏ —É –∫–∞–∂–¥–æ–π —Å–ø–æ—Ä—ã
        print(f"\nüîó –ê–ù–ê–õ–ò–ó –°–í–Ø–ó–ï–ô –ü–û –°–ü–û–†–ê–ú:")
        spores_with_links = 0
        total_in_links = 0
        total_out_links = 0
        
        for i, spore in enumerate(spores):
            in_links = spore.get('in_links', [])
            out_links = spore.get('out_links', [])
            
            if in_links or out_links:
                spores_with_links += 1
                total_in_links += len(in_links)
                total_out_links += len(out_links)
                
                print(f"   –°–ø–æ—Ä–∞ {i} (ID: {spore.get('spore_id', 'unknown')}):")
                print(f"      –í—Ö–æ–¥—è—â–∏–µ: {in_links}")
                print(f"      –ò—Å—Ö–æ–¥—è—â–∏–µ: {out_links}")
        
        print(f"\nüìà –ò–¢–û–ì–ò:")
        print(f"   –°–ø–æ—Ä —Å–æ —Å–≤—è–∑—è–º–∏: {spores_with_links} –∏–∑ {len(spores)}")
        print(f"   –í—Å–µ–≥–æ –≤—Ö–æ–¥—è—â–∏—Ö: {total_in_links}")
        print(f"   –í—Å–µ–≥–æ –∏—Å—Ö–æ–¥—è—â–∏—Ö: {total_out_links}")
        print(f"   –û—Ç–¥–µ–ª—å–Ω—ã—Ö —Å–≤—è–∑–µ–π: {len(links)}")
        
        # –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–≤—è–∑—è—Ö
        if links:
            print(f"\nüîó –î–ï–¢–ê–õ–ò –°–í–Ø–ó–ï–ô:")
            for i, link in enumerate(links[:5]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                print(f"   –°–≤—è–∑—å {i}: {link.get('parent_spore_id')} ‚Üí {link.get('child_spore_id')}")
                print(f"      –¢–∏–ø: {link.get('link_type', 'unknown')}")
                print(f"      –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {link.get('direction', 'unknown')}")
                print(f"      dt: {link.get('dt', 0.0)}")
            
            if len(links) > 5:
                print(f"   ... –∏ –µ—â–µ {len(links) - 5} —Å–≤—è–∑–µ–π")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å
        success = len(links) > 0 or total_in_links > 0 or total_out_links > 0
        
        if success:
            print(f"\n‚úÖ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù: –°–≤—è–∑–∏ –Ω–∞–π–¥–µ–Ω—ã –≤ JSON!")
            print(f"üí° –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ - —Å–≤—è–∑–∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è –∏–∑ –≥—Ä–∞—Ñ–∞")
        else:
            print(f"\n‚ùå –¢–ï–°–¢ –ù–ï –ü–†–û–ô–î–ï–ù: –°–≤—è–∑–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ JSON")
            print(f"üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ –¥–µ—Ä–µ–≤–æ –±—ã–ª–æ —Å–æ–∑–¥–∞–Ω–æ –∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–æ")
        
        return success
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è JSON: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == '__main__':
    test_links_export()
