"""
Picker Manager - –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –±–ª–∏–∑–∫–∏—Ö —Å–ø–æ—Ä –∫ —Ç–æ—á–∫–µ –≤–∑–≥–ª—è–¥–∞
==========================================================

–ö–ª–∞—Å—Å –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–ø–æ—Ä, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è
–≤–±–ª–∏–∑–∏ —Ç–µ–∫—É—â–µ–π —Ç–æ—á–∫–∏ –≤–∑–≥–ª—è–¥–∞ –∫–∞–º–µ—Ä—ã.

–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:
- –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è look_point –æ—Ç ZoomManager
- –ü–æ–∏—Å–∫ —Å–ø–æ—Ä –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≥—Ä–∞—Ñ–µ –Ω–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–∏ < 0.05
- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –±–ª–∏–∑–∫–∏—Ö —Å–ø–æ—Ä
- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –∫–æ–Ω—Å–æ–ª—å
"""

import numpy as np
from typing import List, Dict, Any, Optional, Tuple
from ..managers.zoom_manager import ZoomManager
from ..managers.spore_manager import SporeManager
from ..core.spore import Spore


class PickerManager:
    """
    –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–ø–æ—Ä, –±–ª–∏–∑–∫–∏—Ö –∫ —Ç–æ—á–∫–µ –≤–∑–≥–ª—è–¥–∞ –∫–∞–º–µ—Ä—ã.
    
    –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏:
    - –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è look_point –æ—Ç ZoomManager
    - –ü–æ–∏—Å–∫ –±–ª–∏–∑–∫–∏—Ö —Å–ø–æ—Ä –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≥—Ä–∞—Ñ–µ SporeManager
    - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –±–ª–∏–∑–∫–∏—Ö —Å–ø–æ—Ä
    - –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    """
    
    def __init__(self,
                 zoom_manager: ZoomManager,
                 spore_manager: SporeManager,
                 distance_threshold: float = 0.05,
                 verbose_output: bool = True):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è PickerManager.

        Args:
            zoom_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä –∑—É–º–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è look_point
            spore_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–ø–æ—Ä –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–µ–∞–ª—å–Ω–æ–º—É –≥—Ä–∞—Ñ—É
            distance_threshold: –ü–æ—Ä–æ–≥–æ–≤–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –±–ª–∏–∑–æ—Å—Ç–∏
            verbose_output: –í—ã–≤–æ–¥–∏—Ç—å –ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–∏ –∫–∞–∂–¥–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏
        """
        self.zoom_manager: ZoomManager = zoom_manager
        self.spore_manager: SporeManager = spore_manager
        self.distance_threshold: float = distance_threshold
        self.verbose_output: bool = verbose_output
        
        # –°–ø–∏—Å–æ–∫ –±–ª–∏–∑–∫–∏—Ö —Å–ø–æ—Ä
        self.close_spores: List[Dict[str, Any]] = []
        
        # –ü—Ä–µ–¥—ã–¥—É—â–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã look_point –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        self.last_look_point: Optional[Tuple[float, float]] = None
        
        # –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è look_point
        self._subscribe_to_look_point_changes()
        
        print(f"üéØ PickerManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω "
              f"(threshold: {distance_threshold}, verbose: {verbose_output})")

    def _subscribe_to_look_point_changes(self) -> None:
        """–ü–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è look_point –≤ ZoomManager."""
        if hasattr(self.zoom_manager, 'subscribe_look_point_change'):
            self.zoom_manager.subscribe_look_point_change(
                self._on_look_point_changed)
            print("üéØ PickerManager –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è look_point")
        else:
            print("‚ö†Ô∏è ZoomManager –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ look_point")

    def _get_corrected_look_point(self) -> Tuple[float, float]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π look point —Å —É—á–µ—Ç–æ–º –∑—É–º–∞.
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç—É –∂–µ —Ñ–æ—Ä–º—É–ª—É –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏, —á—Ç–æ –∏ –≤ UI manager.
        
        Returns:
            –ö–æ—Ä—Ç–µ–∂ (x, z) –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
        """
        # –ü–æ–ª—É—á–∞–µ–º —Å—ã—Ä—É—é —Ç–æ—á–∫—É –≤–∑–≥–ª—è–¥–∞
        raw_x, raw_z = self.zoom_manager.identify_invariant_point()
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏—é origin_cube —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è
        try:
            origin_x = (self.zoom_manager.scene_setup.frame
                        .origin_cube.position.x)
            origin_z = (self.zoom_manager.scene_setup.frame
                        .origin_cube.position.z)
        except Exception:
            origin_x, origin_z = 0.0, 0.0
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–æ—Ä–º—É–ª—É –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏
        scale = self.zoom_manager.a_transformation
        corrected_x = (raw_x - origin_x) / scale
        corrected_z = (raw_z - origin_z) / scale
        
        return corrected_x, corrected_z

    def _correct_look_point(self, raw_x: float, raw_z: float) -> Tuple[float, float]:
        """
        –ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç —Å—ã—Ä—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã look_point —Å —É—á–µ—Ç–æ–º –∑—É–º–∞.
        –ù–ï –≤—ã–∑—ã–≤–∞–µ—Ç identify_invariant_point() —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ä–µ–∫—É—Ä—Å–∏–∏.
        
        Args:
            raw_x: –°—ã—Ä–∞—è X –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞
            raw_z: –°—ã—Ä–∞—è Z –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞
            
        Returns:
            –ö–æ—Ä—Ç–µ–∂ (x, z) –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
        """
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏—é origin_cube —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è
        try:
            origin_x = (self.zoom_manager.scene_setup.frame
                        .origin_cube.position.x)
            origin_z = (self.zoom_manager.scene_setup.frame
                        .origin_cube.position.z)
        except Exception:
            origin_x, origin_z = 0.0, 0.0
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–æ—Ä–º—É–ª—É –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏
        scale = self.zoom_manager.a_transformation
        corrected_x = (raw_x - origin_x) / scale
        corrected_z = (raw_z - origin_z) / scale
        
        return corrected_x, corrected_z

    def _on_look_point_changed(self, look_point_x: float,
                               look_point_z: float) -> None:
        """
        –ö–æ–ª–±—ç–∫, –≤—ã–∑—ã–≤–∞–µ–º—ã–π –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ look_point.

        Args:
            look_point_x: X –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ —Ç–æ—á–∫–∏ –≤–∑–≥–ª—è–¥–∞ (—Å—ã—Ä–∞—è)
            look_point_z: Z –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ —Ç–æ—á–∫–∏ –≤–∑–≥–ª—è–¥–∞ (—Å—ã—Ä–∞—è)
        """
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø—Ä—è–º–æ –∑–¥–µ—Å—å, –Ω–µ –≤—ã–∑—ã–≤–∞—è identify_invariant_point
        corrected_x, corrected_z = self._correct_look_point(
            look_point_x, look_point_z)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ª–∏ –∏–∑–º–µ–Ω–∏–ª—Å—è look_point (–ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º)
        current_look_point = (corrected_x, corrected_z)
        
        # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –≤—ã–∑–æ–≤ –∏–ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–∑–º–µ–Ω–∏–ª–∏—Å—å
        if (self.last_look_point is None or
                abs(self.last_look_point[0] - corrected_x) > 1e-6 or
                abs(self.last_look_point[1] - corrected_z) > 1e-6):
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
            self.last_look_point = current_look_point
            
            # –í—ã–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Ä–µ–∞–ª—å–Ω–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏
            self._update_close_spores(corrected_x, corrected_z)

    def _update_close_spores(self, look_point_x: float,
                             look_point_z: float) -> None:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –±–ª–∏–∑–∫–∏–µ —Å–ø–æ—Ä—ã –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫.

        Args:
            look_point_x: X –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ —Ç–æ—á–∫–∏ –≤–∑–≥–ª—è–¥–∞
            look_point_z: Z –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ —Ç–æ—á–∫–∏ –≤–∑–≥–ª—è–¥–∞
        """
        new_close_spores = []
        far_spores = []
        
        # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º —Å–ø–æ—Ä–∞–º –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≥—Ä–∞—Ñ–µ
        for spore_id, spore in self.spore_manager.graph.nodes.items():
            try:
                # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å–ø–æ—Ä—ã
                spore_pos = spore.calc_2d_pos()
                
                # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Ç–æ—á–∫–∏ –≤–∑–≥–ª—è–¥–∞
                distance = np.sqrt(
                    (spore_pos[0] - look_point_x)**2 +
                    (spore_pos[1] - look_point_z)**2
                )

                spore_info = {
                    'id': spore_id,
                    'position': spore_pos,
                    'distance': distance,
                    'spore': spore
                }

                # –ï—Å–ª–∏ —Å–ø–æ—Ä–∞ –±–ª–∏–∑–∫–æ - –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –±–ª–∏–∑–∫–∏—Ö
                if distance < self.distance_threshold:
                    new_close_spores.append(spore_info)
                else:
                    far_spores.append(spore_info)

            except Exception:
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ø–æ—Ä—ã —Å –æ—à–∏–±–∫–∞–º–∏
                continue
        
        # –í–´–í–û–î–ò–ú –¢–û–õ–¨–ö–û –°–ê–ú–£–Æ –ë–õ–ò–ó–ö–£–Æ –°–ü–û–†–£
        if self.verbose_output:
            print(f"\nüéØ LOOK_POINT: ({look_point_x:.4f}, {look_point_z:.4f})")
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Å–ø–æ—Ä—ã –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏
            all_spores = new_close_spores + far_spores
            all_spores.sort(key=lambda spore: spore['distance'])
            
            print(f"   üìä –í—Å–µ–≥–æ —Å–ø–æ—Ä –≤ –≥—Ä–∞—Ñ–µ: {len(all_spores)}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–∞–º—É—é –±–ª–∏–∑–∫—É—é —Å–ø–æ—Ä—É
            if all_spores:
                closest_spore = all_spores[0]
                pos = closest_spore['position']
                dist = closest_spore['distance']
                is_close = dist < self.distance_threshold
                marker = "üìç" if is_close else "üìè"
                
                # –ü–æ–ª—É—á–∞–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–π ID –¥–ª—è —Å–∞–º–æ–π –±–ª–∏–∑–∫–æ–π —Å–ø–æ—Ä—ã
                visual_id = self._get_visual_spore_id(closest_spore['spore'])
                
                print(f"   üéØ –°–ê–ú–ê–Ø –ë–õ–ò–ó–ö–ê–Ø –°–ü–û–†–ê: {marker} {visual_id}: "
                      f"({pos[0]:.4f}, {pos[1]:.4f}), dist={dist:.4f}")
                
                # –í—ã–≤–æ–¥–∏–º —Å–æ—Å–µ–¥–µ–π —Å–∞–º–æ–π –±–ª–∏–∑–∫–æ–π —Å–ø–æ—Ä—ã
                self._print_closest_spore_neighbors(closest_spore)
            else:
                print("   üì≠ –°–ø–æ—Ä –≤ –≥—Ä–∞—Ñ–µ –Ω–µ—Ç")

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –±–ª–∏–∑–∫–∏—Ö —Å–ø–æ—Ä
        self.close_spores = new_close_spores
    
    def get_closest_spore(self) -> Optional[Dict[str, Any]]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–∞–º—É—é –±–ª–∏–∑–∫—É—é —Å–ø–æ—Ä—É –∫ —Ç–µ–∫—É—â–µ–º—É look_point.
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–∞–º–æ–π –±–ª–∏–∑–∫–æ–π —Å–ø–æ—Ä–µ –∏–ª–∏ None –µ—Å–ª–∏ —Å–ø–æ—Ä –Ω–µ—Ç
        """
        corrected_x, corrected_z = self._get_corrected_look_point()
        
        closest_spore = None
        min_distance = float('inf')
        
        for spore_id, spore in self.spore_manager.graph.nodes.items():
            try:
                spore_pos = spore.calc_2d_pos()
                distance = np.sqrt(
                    (spore_pos[0] - corrected_x)**2 +
                    (spore_pos[1] - corrected_z)**2
                )
                
                if distance < min_distance:
                    min_distance = distance
                    closest_spore = {
                        'id': spore_id,
                        'position': spore_pos,
                        'distance': distance,
                        'spore': spore
                    }
                    
            except Exception:
                continue
        
        return closest_spore

    def _get_visual_spore_id(self, spore: Spore) -> str:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –≤–∏–∑—É–∞–ª—å–Ω—ã–π ID —Å–ø–æ—Ä—ã (–∫–∞–∫ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ) - –∏–Ω–¥–µ–∫—Å –≤ —Å–ø–∏—Å–∫–µ real_spores + 1.
        
        Args:
            spore: –û–±—ä–µ–∫—Ç —Å–ø–æ—Ä—ã
            
        Returns:
            –°—Ç—Ä–æ–∫–æ–≤—ã–π ID –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        """
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¢–û–ß–ù–û —Ç–æ—Ç –∂–µ –∞–ª–≥–æ—Ä–∏—Ç–º, —á—Ç–æ –∏ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ
            # –ü–æ–ª—É—á–∞–µ–º –≤–µ—Å—å —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ (–∫–∞–∫ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ)
            real_spores = self.spore_manager.objects
            
            # –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å —Å–ø–æ—Ä—ã –≤ —Å–ø–∏—Å–∫–µ (–∫–∞–∫ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ)
            spore_index = next((i for i, s in enumerate(real_spores) if s is spore), -1)
            
            if spore_index >= 0:
                return str(spore_index + 1)  # –ù—É–º–µ—Ä–∞—Ü–∏—è –æ—Ç 1 (–∫–∞–∫ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ)
            else:
                return "?"
                
        except Exception:
            return "?"

    def _print_closest_spore_neighbors(self, closest_spore: Dict[str, Any]) -> None:
        """
        –í—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Å–µ–¥—è—Ö —Å–∞–º–æ–π –±–ª–∏–∑–∫–æ–π —Å–ø–æ—Ä—ã –ø–æ –≥—Ä–∞—Ñ—É.
        
        Args:
            closest_spore: –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–∞–º–æ–π –±–ª–∏–∑–∫–æ–π —Å–ø–æ—Ä–µ
        """
        if not closest_spore:
            return
            
        spore = closest_spore['spore']
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π ID –¥–ª—è –≥—Ä–∞—Ñ–∞
        graph_spore_id = self.spore_manager.graph._get_spore_id(spore)
        
        # –ü–æ–ª—É—á–∞–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–π ID (–∫–∞–∫ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ) - –∏–Ω–¥–µ–∫—Å –≤ —Å–ø–∏—Å–∫–µ + 1
        visual_id = self._get_visual_spore_id(spore)
        
        print(f"\nüîó –°–û–°–ï–î–ò –°–ü–û–†–´ {visual_id}:")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å–µ–¥–µ–π –Ω–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–∏ 1 (–ø—Ä—è–º—ã–µ —Å–≤—è–∑–∏)
        neighbors_1 = self._get_neighbors_at_distance(graph_spore_id, 1)
        if neighbors_1:
            print("   üìç –ú–∞—Ä—à—Ä—É—Ç—ã –¥–ª–∏–Ω–æ–π 1:")
            for neighbor_info in neighbors_1:
                self._print_neighbor_info(neighbor_info, 1)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å–µ–¥–µ–π –Ω–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–∏ 2 (—á–µ—Ä–µ–∑ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—É—é —Å–ø–æ—Ä—É)
        neighbors_2 = self._get_neighbors_at_distance(graph_spore_id, 2)
        if neighbors_2:
            print("   üìç –ú–∞—Ä—à—Ä—É—Ç—ã –¥–ª–∏–Ω–æ–π 2:")
            for neighbor_info in neighbors_2:
                self._print_neighbor_info(neighbor_info, 2)
        
        if not neighbors_1 and not neighbors_2:
            print("   üì≠ –ù–µ—Ç —Å–æ—Å–µ–¥–µ–π –≤ –≥—Ä–∞—Ñ–µ")

    def _get_neighbors_at_distance(self, spore_id: str, distance: int) -> List[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–æ—Å–µ–¥–µ–π —Å–ø–æ—Ä—ã –Ω–∞ –∑–∞–¥–∞–Ω–Ω–æ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–∏ –ø–æ –≥—Ä–∞—Ñ—É.
        
        Args:
            spore_id: ID —Å–ø–æ—Ä—ã
            distance: –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ (1 –∏–ª–∏ 2)
            
        Returns:
            –°–ø–∏—Å–æ–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ—Å–µ–¥—è—Ö
        """
        if distance == 1:
            return self._get_direct_neighbors(spore_id)
        elif distance == 2:
            return self._get_neighbors_at_distance_2(spore_id)
        else:
            return []

    def _get_direct_neighbors(self, spore_id: str) -> List[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –ø—Ä—è–º—ã—Ö —Å–æ—Å–µ–¥–µ–π —Å–ø–æ—Ä—ã (—Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ 1) —Å —É—á–µ—Ç–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏.
        
        –õ–æ–≥–∏–∫–∞:
        - –ï—Å–ª–∏ —Å–≤—è–∑—å A ‚Üí B —Å dt > 0, —Ç–æ –∏–∑ A –º–æ–∂–Ω–æ –¥–æ–±—Ä–∞—Ç—å—Å—è –≤ B —Å –ø—Ä—è–º—ã–º –≤—Ä–µ–º–µ–Ω–µ–º
        - –ï—Å–ª–∏ —Å–≤—è–∑—å A ‚Üí B —Å dt < 0, —Ç–æ –∏–∑ B –º–æ–∂–Ω–æ –¥–æ–±—Ä–∞—Ç—å—Å—è –≤ A —Å –æ–±—Ä–∞—Ç–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º
        - –î–ª—è –ø–æ–∏—Å–∫–∞ —Å–æ—Å–µ–¥–µ–π —Å–ø–æ—Ä—ã X —É—á–∏—Ç—ã–≤–∞–µ–º –æ–±–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
        """
        neighbors = []
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–µ–π (–∏—Å—Ö–æ–¥—è—â–∏–µ —Å–≤—è–∑–∏) - –º–æ–∂–µ–º –¥–æ–±—Ä–∞—Ç—å—Å—è —Å –ø—Ä—è–º—ã–º –≤—Ä–µ–º–µ–Ω–µ–º
        children = self.spore_manager.graph.get_children(spore_id)
        
        for child in children:
            child_id = self.spore_manager.graph._get_spore_id(child)
            edge_info = self.spore_manager.graph.get_edge_info(
                spore_id, child_id)
            
            neighbor_info = {
                'target_spore': child,
                'target_id': child_id,
                'path': [spore_id, child_id],
                'edges': [edge_info] if edge_info else [],
                'time_direction': 'forward',  # –ü—Ä—è–º–æ–µ –≤—Ä–µ–º—è
                'can_reach': True
            }
            neighbors.append(neighbor_info)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–¥–∏—Ç–µ–ª–µ–π (–≤—Ö–æ–¥—è—â–∏–µ —Å–≤—è–∑–∏) - –º–æ–∂–µ–º –¥–æ–±—Ä–∞—Ç—å—Å—è —Å –æ–±—Ä–∞—Ç–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º
        parents = self.spore_manager.graph.get_parents(spore_id)
        
        for parent in parents:
            parent_id = self.spore_manager.graph._get_spore_id(parent)
            edge_info = self.spore_manager.graph.get_edge_info(
                parent_id, spore_id)
            
            neighbor_info = {
                'target_spore': parent,
                'target_id': parent_id,
                'path': [parent_id, spore_id],
                'edges': [edge_info] if edge_info else [],
                'time_direction': 'backward',  # –û–±—Ä–∞—Ç–Ω–æ–µ –≤—Ä–µ–º—è
                'can_reach': True
            }
            neighbors.append(neighbor_info)
        
        return neighbors

    def _get_neighbors_at_distance_2(self, spore_id: str) -> List[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–æ—Å–µ–¥–µ–π —Å–ø–æ—Ä—ã –Ω–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–∏ 2 —Å —É—á–µ—Ç–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏.
        """
        neighbors = []
        visited = {spore_id}  # –ò–∑–±–µ–≥–∞–µ–º —Ü–∏–∫–ª–æ–≤
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä—è–º—ã—Ö —Å–æ—Å–µ–¥–µ–π
        direct_neighbors = self._get_direct_neighbors(spore_id)
        
        for direct_neighbor in direct_neighbors:
            intermediate_id = direct_neighbor['target_id']
            if intermediate_id in visited:
                continue
                
            visited.add(intermediate_id)
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å–µ–¥–µ–π –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–π —Å–ø–æ—Ä—ã
            intermediate_neighbors = self._get_direct_neighbors(intermediate_id)
            
            for neighbor in intermediate_neighbors:
                target_id = neighbor['target_id']
                if target_id in visited:
                    continue
                    
                # –°–æ–∑–¥–∞–µ–º –ø—É—Ç—å –¥–ª–∏–Ω–æ–π 2
                path = [spore_id, intermediate_id, target_id]
                edges = direct_neighbor['edges'] + neighbor['edges']
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–µ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∞ –¥–ª–∏–Ω–æ–π 2
                # –ï—Å–ª–∏ –æ–±–∞ —à–∞–≥–∞ –≤ –æ–¥–Ω–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
                # –ï—Å–ª–∏ –≤ —Ä–∞–∑–Ω—ã—Ö - —Å—á–∏—Ç–∞–µ–º —Å–º–µ—à–∞–Ω–Ω—ã–º
                first_direction = direct_neighbor.get('time_direction', 'unknown')
                second_direction = neighbor.get('time_direction', 'unknown')
                
                if first_direction == second_direction:
                    combined_direction = first_direction
                else:
                    combined_direction = 'mixed'
                
                neighbor_info = {
                    'target_spore': neighbor['target_spore'],
                    'target_id': target_id,
                    'path': path,
                    'edges': edges,
                    'intermediate_spore': direct_neighbor['target_spore'],
                    'intermediate_id': intermediate_id,
                    'time_direction': combined_direction,
                    'can_reach': True
                }
                neighbors.append(neighbor_info)
        
        return neighbors

    def _print_neighbor_info(self, neighbor_info: Dict[str, Any], distance: int) -> None:
        """
        –í—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Å–µ–¥–µ —Å —É—á–µ—Ç–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏.
        
        Args:
            neighbor_info: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ—Å–µ–¥–µ
            distance: –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Å–æ—Å–µ–¥–∞
        """
        target_spore = neighbor_info['target_spore']
        
        # –ü–æ–ª—É—á–∞–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–π ID –¥–ª—è —Å–æ—Å–µ–¥–∞
        visual_target_id = self._get_visual_spore_id(target_spore)
        
        try:
            target_pos = target_spore.calc_2d_pos()
            pos_str = f"({target_pos[0]:.4f}, {target_pos[1]:.4f})"
        except Exception:
            pos_str = "(–Ω–µ—Ç –ø–æ–∑–∏—Ü–∏–∏)"
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
        time_direction = neighbor_info.get('time_direction', 'unknown')
        time_arrow = ("‚è©" if time_direction == 'forward'
                      else "‚è™" if time_direction == 'backward'
                      else "‚ùì")
        
        if distance == 1:
            # –ú–∞—Ä—à—Ä—É—Ç –¥–ª–∏–Ω–æ–π 1: –°–ø–æ—Ä–∞ -> –õ–∏–Ω–∫ -> –°–ø–æ—Ä–∞
            print(f"      üéØ –°–ø–æ—Ä–∞: {visual_target_id} {pos_str} {time_arrow}")
            
            # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–≤—è–∑–∏
            for i, edge_info in enumerate(neighbor_info['edges']):
                if edge_info and edge_info.link_object:
                    try:
                        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–µ–º–µ–Ω–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏
                        parent_spore = edge_info.parent_spore
                        
                        # –ü–æ–ª—É—á–∞–µ–º dt –∏–∑ –ª–∏–Ω–∫–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å) –∏–ª–∏ –∏–∑ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π —Å–ø–æ—Ä—ã
                        if hasattr(edge_info.link_object, 'dt_value'):
                            dt = edge_info.link_object.dt_value
                            dt_source = "link"
                        elif hasattr(parent_spore, 'logic'):
                            dt = getattr(parent_spore.logic, 'dt', 'N/A')
                            dt_source = "spore"
                        else:
                            dt = 'N/A'
                            dt_source = "none"
                        
                        # –ü–æ–ª—É—á–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–∑ –ª–∏–Ω–∫–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å) –∏–ª–∏ –∏–∑ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π —Å–ø–æ—Ä—ã
                        if hasattr(edge_info.link_object, 'control_value'):
                            control = edge_info.link_object.control_value
                            control_source = "link"
                        elif hasattr(parent_spore, 'logic'):
                            control = getattr(parent_spore.logic, 'optimal_control', 'N/A')
                            control_source = "spore"
                        else:
                            control = 'N/A'
                            control_source = "none"
                        
                        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–∞—Å—Å–∏–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                        if isinstance(control, np.ndarray):
                            control = control[0] if len(control) > 0 else 'N/A'
                        
                        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è —Å–æ –∑–Ω–∞–∫–æ–º
                        if dt != 'N/A':
                            dt_str = f"+{dt}" if dt >= 0 else str(dt)
                        else:
                            dt_str = 'N/A'
                        
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
                        direction_text = ("–ø—Ä—è–º–æ–µ –≤—Ä–µ–º—è" if time_direction == 'forward'
                                          else "–æ–±—Ä–∞—Ç–Ω–æ–µ –≤—Ä–µ–º—è" if time_direction == 'backward'
                                          else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                            
                        print(f"         üîó –õ–∏–Ω–∫: —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ={control}, –≤—Ä–µ–º—è={dt_str} "
                              f"({direction_text}, –∏—Å—Ç–æ—á–Ω–∏–∫ dt: {dt_source}, –∏—Å—Ç–æ—á–Ω–∏–∫ control: {control_source})")
                    except Exception as e:
                        print(f"         üîó –õ–∏–Ω–∫: –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö - {e}")
        
        elif distance == 2:
            # –ú–∞—Ä—à—Ä—É—Ç –¥–ª–∏–Ω–æ–π 2: –õ–∏–Ω–∫ -> –õ–∏–Ω–∫ -> –°–ø–æ—Ä–∞
            time_direction = neighbor_info.get('time_direction', 'unknown')
            time_arrow = ("‚è©" if time_direction == 'forward'
                          else "‚è™" if time_direction == 'backward'
                          else "üîÑ" if time_direction == 'mixed'
                          else "‚ùì")
            
            print(f"      üéØ –°–ø–æ—Ä–∞: {visual_target_id} {pos_str} {time_arrow}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∞ –¥–ª–∏–Ω–æ–π 2
            if time_direction == 'mixed':
                direction_text = "—Å–º–µ—à–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è"
            elif time_direction == 'forward':
                direction_text = "–ø—Ä—è–º–æ–µ –≤—Ä–µ–º—è"
            elif time_direction == 'backward':
                direction_text = "–æ–±—Ä–∞—Ç–Ω–æ–µ –≤—Ä–µ–º—è"
            else:
                direction_text = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            
            print(f"         üìç –ú–∞—Ä—à—Ä—É—Ç –¥–ª–∏–Ω–æ–π 2 ({direction_text})")
            
            # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä–≤–æ–π —Å–≤—è–∑–∏
            if len(neighbor_info['edges']) > 0:
                edge_info = neighbor_info['edges'][0]
                if edge_info and edge_info.link_object:
                    try:
                        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–µ–º–µ–Ω–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏
                        parent_spore = edge_info.parent_spore
                        
                        # –ü–æ–ª—É—á–∞–µ–º dt –∏–∑ –ª–∏–Ω–∫–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å) –∏–ª–∏ –∏–∑ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π —Å–ø–æ—Ä—ã
                        if hasattr(edge_info.link_object, 'dt_value'):
                            dt = edge_info.link_object.dt_value
                            dt_source = "link"
                        elif hasattr(parent_spore, 'logic'):
                            dt = getattr(parent_spore.logic, 'dt', 'N/A')
                            dt_source = "spore"
                        else:
                            dt = 'N/A'
                            dt_source = "none"
                        
                        # –ü–æ–ª—É—á–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–∑ –ª–∏–Ω–∫–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å) –∏–ª–∏ –∏–∑ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π —Å–ø–æ—Ä—ã
                        if hasattr(edge_info.link_object, 'control_value'):
                            control = edge_info.link_object.control_value
                            control_source = "link"
                        elif hasattr(parent_spore, 'logic'):
                            control = getattr(parent_spore.logic, 'optimal_control', 'N/A')
                            control_source = "spore"
                        else:
                            control = 'N/A'
                            control_source = "none"
                        
                        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–∞—Å—Å–∏–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                        if isinstance(control, np.ndarray):
                            control = control[0] if len(control) > 0 else 'N/A'
                        
                        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è —Å–æ –∑–Ω–∞–∫–æ–º
                        if dt != 'N/A':
                            dt_str = f"+{dt}" if dt >= 0 else str(dt)
                        else:
                            dt_str = 'N/A'
                            
                        print(f"         üîó –õ–∏–Ω–∫ 1: —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ={control}, –≤—Ä–µ–º—è={dt_str} "
                              f"(–∏—Å—Ç–æ—á–Ω–∏–∫ dt: {dt_source}, –∏—Å—Ç–æ—á–Ω–∏–∫ control: {control_source})")
                    except Exception as e:
                        print(f"         üîó –õ–∏–Ω–∫ 1: –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö - {e}")
            
            # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ç–æ—Ä–æ–π —Å–≤—è–∑–∏
            if len(neighbor_info['edges']) > 1:
                edge_info = neighbor_info['edges'][1]
                if edge_info and edge_info.link_object:
                    try:
                        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–µ–º–µ–Ω–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏
                        parent_spore = edge_info.parent_spore
                        
                        # –ü–æ–ª—É—á–∞–µ–º dt –∏–∑ –ª–∏–Ω–∫–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å) –∏–ª–∏ –∏–∑ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π —Å–ø–æ—Ä—ã
                        if hasattr(edge_info.link_object, 'dt_value'):
                            dt = edge_info.link_object.dt_value
                            dt_source = "link"
                        elif hasattr(parent_spore, 'logic'):
                            dt = getattr(parent_spore.logic, 'dt', 'N/A')
                            dt_source = "spore"
                        else:
                            dt = 'N/A'
                            dt_source = "none"
                        
                        # –ü–æ–ª—É—á–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–∑ –ª–∏–Ω–∫–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å) –∏–ª–∏ –∏–∑ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π —Å–ø–æ—Ä—ã
                        if hasattr(edge_info.link_object, 'control_value'):
                            control = edge_info.link_object.control_value
                            control_source = "link"
                        elif hasattr(parent_spore, 'logic'):
                            control = getattr(parent_spore.logic, 'optimal_control', 'N/A')
                            control_source = "spore"
                        else:
                            control = 'N/A'
                            control_source = "none"
                        
                        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–∞—Å—Å–∏–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                        if isinstance(control, np.ndarray):
                            control = control[0] if len(control) > 0 else 'N/A'
                        
                        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è —Å–æ –∑–Ω–∞–∫–æ–º
                        if dt != 'N/A':
                            dt_str = f"+{dt}" if dt >= 0 else str(dt)
                        else:
                            dt_str = 'N/A'
                            
                        print(f"         üîó –õ–∏–Ω–∫ 2: —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ={control}, –≤—Ä–µ–º—è={dt_str} "
                              f"(–∏—Å—Ç–æ—á–Ω–∏–∫ dt: {dt_source}, –∏—Å—Ç–æ—á–Ω–∏–∫ control: {control_source})")
                    except Exception as e:
                        print(f"         üîó –õ–∏–Ω–∫ 2: –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö - {e}")

    def get_close_spores(self) -> List[Dict[str, Any]]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –±–ª–∏–∑–∫–∏—Ö —Å–ø–æ—Ä.
        
        Returns:
            –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –±–ª–∏–∑–∫–∏—Ö —Å–ø–æ—Ä–∞—Ö
        """
        return self.close_spores.copy()
    
    def get_close_spores_count(self) -> int:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–ª–∏–∑–∫–∏—Ö —Å–ø–æ—Ä.
        
        Returns:
            –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ø–æ—Ä –≤ —Ä–∞–¥–∏—É—Å–µ
        """
        return len(self.close_spores)
    
    def set_distance_threshold(self, threshold: float) -> None:
        """
        –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–æ–≤—ã–π –ø–æ—Ä–æ–≥ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è.

        Args:
            threshold: –ù–æ–≤—ã–π –ø–æ—Ä–æ–≥ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
        """
        self.distance_threshold = threshold
        print(f"üéØ –ü–æ—Ä–æ–≥ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {threshold}")

        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Å –Ω–æ–≤—ã–º –ø–æ—Ä–æ–≥–æ–º
        corrected_x, corrected_z = self._get_corrected_look_point()
        self._update_close_spores(corrected_x, corrected_z)

    def force_update(self) -> None:
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –±–ª–∏–∑–∫–∏—Ö —Å–ø–æ—Ä."""
        corrected_x, corrected_z = self._get_corrected_look_point()
        self._update_close_spores(corrected_x, corrected_z)
        print("üéØ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–ª–∏–∑–∫–∏—Ö —Å–ø–æ—Ä –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")

    def force_update_without_check(self) -> None:
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –±–ª–∏–∑–∫–∏—Ö —Å–ø–æ—Ä –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏."""
        corrected_x, corrected_z = self._get_corrected_look_point()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
        self.last_look_point = (corrected_x, corrected_z)
        
        # –í—ã–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        self._update_close_spores(corrected_x, corrected_z)
        print("üéØ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")

    def get_last_look_point(self) -> Optional[Tuple[float, float]]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã look_point.
        
        Returns:
            –ö–æ—Ä—Ç–µ–∂ (x, z) –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∏–ª–∏ None –µ—Å–ª–∏ –µ—â–µ –Ω–µ –±—ã–ª–æ
        """
        return self.last_look_point

    def has_look_point_changed(self, new_x: float, new_z: float) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ look_point –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å –ø–æ—Å–ª–µ–¥–Ω–∏–º –∏–∑–≤–µ—Å—Ç–Ω—ã–º.
        
        Args:
            new_x: –ù–æ–≤–∞—è X –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞
            new_z: –ù–æ–≤–∞—è Z –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞
            
        Returns:
            True –µ—Å–ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–∑–º–µ–Ω–∏–ª–∏—Å—å, False –µ—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å —Ç–µ–º–∏ –∂–µ
        """
        if self.last_look_point is None:
            return True
            
        return (abs(self.last_look_point[0] - new_x) > 1e-6 or
                abs(self.last_look_point[1] - new_z) > 1e-6)

    def get_all_spores_info(self) -> Dict[str, List[Dict[str, Any]]]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å–µ—Ö —Å–ø–æ—Ä–∞—Ö, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã—Ö –Ω–∞ –±–ª–∏–∑–∫–∏–µ –∏ –Ω–µ –±–ª–∏–∑–∫–∏–µ.

        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –∫–ª—é—á–∞–º–∏ 'close' –∏ 'far', —Å–æ–¥–µ—Ä–∂–∞—â–∏–π —Å–ø–∏—Å–∫–∏ —Å–ø–æ—Ä
        """
        corrected_x, corrected_z = self._get_corrected_look_point()
        
        close_spores = []
        far_spores = []
        
        for spore_id, spore in self.spore_manager.graph.nodes.items():
            try:
                spore_pos = spore.calc_2d_pos()
                distance = np.sqrt(
                    (spore_pos[0] - corrected_x)**2 +
                    (spore_pos[1] - corrected_z)**2
                )
                
                spore_info = {
                    'id': spore_id,
                    'position': spore_pos,
                    'distance': distance,
                    'spore': spore
                }
                
                if distance < self.distance_threshold:
                    close_spores.append(spore_info)
                else:
                    far_spores.append(spore_info)
                    
            except Exception:
                continue
        
        return {
            'close': close_spores,
            'far': far_spores
        }

    def print_all_spores_summary(self) -> None:
        """–í—ã–≤–æ–¥–∏—Ç —Å–≤–æ–¥–∫—É –ø–æ –≤—Å–µ–º —Å–ø–æ—Ä–∞–º, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–æ –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏."""
        spores_info = self.get_all_spores_info()
        close_spores = spores_info['close']
        far_spores = spores_info['far']
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ —Å–ø–æ—Ä—ã
        all_spores = close_spores + far_spores
        all_spores.sort(key=lambda spore: spore['distance'])
        
        print("\nüéØ –°–í–û–î–ö–ê –ü–û –°–ü–û–†–ê–ú:")
        print(f"   üìç –ë–ª–∏–∑–∫–∏–µ —Å–ø–æ—Ä—ã (< {self.distance_threshold}): "
              f"{len(close_spores)}")
        print(f"   üìè –ù–µ –±–ª–∏–∑–∫–∏–µ —Å–ø–æ—Ä—ã (‚â• {self.distance_threshold}): "
              f"{len(far_spores)}")
        print(f"   üìä –í—Å–µ–≥–æ —Å–ø–æ—Ä –≤ –≥—Ä–∞—Ñ–µ: {len(all_spores)}")
        
        if all_spores:
            print("\n   üìç –í–°–ï –°–ü–û–†–´ (–æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏):")
            for i, spore_info in enumerate(all_spores, 1):
                pos = spore_info['position']
                dist = spore_info['distance']
                is_close = dist < self.distance_threshold
                marker = "üìç" if is_close else "üìè"
                print(f"      {i:2d}. {marker} {spore_info['id']}: "
                      f"({pos[0]:.4f}, {pos[1]:.4f}), dist={dist:.4f}")
        else:
            print("\n   üì≠ –°–ø–æ—Ä –≤ –≥—Ä–∞—Ñ–µ –Ω–µ—Ç")

    def set_verbose_output(self, verbose: bool) -> None:
        """
        –í–∫–ª—é—á–∞–µ—Ç –∏–ª–∏ –æ—Ç–∫–ª—é—á–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ look_point.

        Args:
            verbose: True –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞, False –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
        """
        self.verbose_output = verbose
        status = '–≤–∫–ª—é—á–µ–Ω' if verbose else '–æ—Ç–∫–ª—é—á–µ–Ω'
        print(f"üéØ –ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥ {status}")

    def toggle_verbose_output(self) -> None:
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Ä–µ–∂–∏–º –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞."""
        self.verbose_output = not self.verbose_output
        status = '–≤–∫–ª—é—á–µ–Ω' if self.verbose_output else '–æ—Ç–∫–ª—é—á–µ–Ω'
        print(f"üéØ –ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥ {status}")
