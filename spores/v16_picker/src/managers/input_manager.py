from ursina import held_keys, mouse
import time
import numpy as np
from typing import Optional



# –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Å–æ–≤ –¥–ª—è –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π —Ç–∏–ø–æ–≤
# –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
from ..visual.scene_setup import SceneSetup
from ..managers.zoom_manager import ZoomManager
from ..managers.spore_manager import SporeManager
from ..managers.spawn_area_manager import SpawnAreaManager
from ..managers.param_manager import ParamManager
from ..visual.ui_setup import UI_setup
from ..logic.tree import run_area_optimization
from .buffer_merge_manager import BufferMergeManager

# Forward declaration –¥–ª—è ManualSporeManager
from typing import TYPE_CHECKING
if TYPE_CHECKING:
    from ..managers.manual_spore_manager import ManualSporeManager
    from ..managers.angel_manager import AngelManager
    from ..visual.cost_visualizer import CostVisualizer
    from ..managers.dt_manager import DTManager
    from ..visual.controls_window import ControlsWindow
    from ..managers.picker_manager import PickerManager
    
from ..utils.debug_output import always_print


class InputManager:
    """
    –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞.
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–µ–Ω–µ–¥–∂–µ—Ä—ã –∏ –æ–±—ä–µ–∫—Ç—ã —Å—Ü–µ–Ω—ã,
    –∏ –¥–µ–ª–µ–≥–∏—Ä—É–µ—Ç –∏–º –∫–æ–º–∞–Ω–¥—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–∂–∞—Ç–æ–π –∫–ª–∞–≤–∏—à–∏.
    """
    def __init__(self,
                 scene_setup: Optional[SceneSetup] = None,
                 zoom_manager: Optional[ZoomManager] = None,
                 spore_manager: Optional[SporeManager] = None,
                 spawn_area_manager: Optional[SpawnAreaManager] = None,
                 param_manager: Optional[ParamManager] = None,
                 ui_setup: Optional[UI_setup] = None,
                 angel_manager: Optional['AngelManager'] = None,
                 cost_visualizer: Optional['CostVisualizer'] = None,
                 manual_spore_manager: Optional["ManualSporeManager"] = None,
                 dt_manager: Optional['DTManager'] = None,
                 picker_manager: Optional['PickerManager'] = None):
        
        self.scene_setup: Optional[SceneSetup] = scene_setup
        self.zoom_manager: Optional[ZoomManager] = zoom_manager
        self.spore_manager: Optional[SporeManager] = spore_manager
        self.spawn_area_manager: Optional[SpawnAreaManager] = spawn_area_manager
        self.param_manager: Optional[ParamManager] = param_manager
        self.ui_setup: Optional[UI_setup] = ui_setup
        self.angel_manager: Optional['AngelManager'] = angel_manager
        self.cost_visualizer: Optional['CostVisualizer'] = cost_visualizer
        self.manual_spore_manager: Optional["ManualSporeManager"] = manual_spore_manager
        self.dt_manager: Optional['DTManager'] = dt_manager
        self.picker_manager: Optional['PickerManager'] = picker_manager

        # üîÑ v16: BufferMergeManager –¥–ª—è –∫–ª–∞–≤–∏—à–∏ M
        self.buffer_merge_manager = BufferMergeManager(distance_threshold=1.5e-3)
        
        # üÜï v16: –û–∫–Ω–æ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        self.controls_window: Optional['ControlsWindow'] = None

        print(f"[IM] constructed, dt_manager id={id(self.dt_manager) if self.dt_manager else None}")

        # üîç –§–ª–∞–≥ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –æ—Ç–ª–∞–¥–∫–∏ –ø—Ä–∏–∑—Ä–∞—á–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞
        self.debug_ghost_tree = False

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ø–æ—Ä –ø–æ –∫–ª–∞–≤–∏—à–µ 'f'
        self.f_key_down_time: float = 0
        self.long_press_threshold: float = 0.4
        self.spawn_interval: float = 0.1
        self.next_spawn_time: float = 0  # –í—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–ø–∞–≤–Ω–∞
        
        # v13_manual: –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∫–ª–∏–∫–æ–≤ –º—ã—à–∏
        self.previous_mouse_left = False

        # –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è dt (—á—Ç–æ–±—ã –ø—Ä–∏–∑—Ä–∞–∫–∏ –∏ –ª–∏–Ω–∫–∏ –≤—Å–µ–≥–¥–∞ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞–ª–∏)
        if self.dt_manager and hasattr(self.dt_manager, "subscribe_on_change"):
            self.dt_manager.subscribe_on_change(self._on_dt_changed)
            print("[IM] subscribed to DTManager.on_change")

        # üÜï v16: –ö–æ–º–∞–Ω–¥–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞
        self._setup_command_system()
        
        # === –û–¢–õ–ê–î–ö–ê –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò ===
        print(f"üîß [DEBUG] InputManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω:")
        print(f"   üìπ zoom_manager: {self.zoom_manager}")
        print(f"   üìπ zoom_manager is None: {self.zoom_manager is None}")
        print(f"   üéÆ scene_setup: {self.scene_setup}")
        print(f"   üå± spore_manager: {self.spore_manager}")
        # === –ö–û–ù–ï–¶ –û–¢–õ–ê–î–ö–ò ===

    def _setup_command_system(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥–Ω—É—é —Å–∏—Å—Ç–µ–º—É."""
        self.commands = {
            # === SPORES === (removed - outdated functionality)
            
            # === ZOOM ===
            'e': {
                'description': 'zoom in',
                'handler': self._handle_zoom_in,
                'category': 'zoom',
                'enabled': lambda: self.zoom_manager is not None
            },
            't': {
                'description': 'zoom out',
                'handler': self._handle_zoom_out,
                'category': 'zoom',
                'enabled': lambda: self.zoom_manager is not None
            },
            'r': {
                'description': 'reset zoom',
                'handler': self._handle_zoom_reset,
                'category': 'zoom',
                'enabled': lambda: self.zoom_manager is not None
            },
            '1': {
                'description': 'scale down',
                'handler': self._handle_spores_scale_down,
                'category': 'zoom',
                'enabled': lambda: self.zoom_manager is not None
            },
            '2': {
                'description': 'scale up',
                'handler': self._handle_spores_scale_up,
                'category': 'zoom',
                'enabled': lambda: self.zoom_manager is not None
            },
            
            # === CANDIDATES ===
            '5': {
                'description': 'candidates -',
                'handler': self._handle_candidates_radius_down,
                'category': 'candidates',
                'enabled': lambda: self.spore_manager is not None
            },
            '6': {
                'description': 'candidates +',
                'handler': self._handle_candidates_radius_up,
                'category': 'candidates',
                'enabled': lambda: self.spore_manager is not None
            },
            
            # === VISUAL ===
            'y': {
                'description': 'toggle angels',
                'handler': self._handle_toggle_angels,
                'category': 'visual',
                'enabled': lambda: self.angel_manager is not None
            },
            'u': {
                'description': 'toggle frame',
                'handler': self._handle_toggle_frame,
                'category': 'visual',
                'enabled': lambda: self.scene_setup is not None
            },
            
            # === TIME ===
            ',': {
                'description': 'reset dt (comma)',
                'handler': self._handle_dt_reset,
                'category': 'time',
                'enabled': lambda: self.dt_manager is not None
            },
            'm': {
                'description': 'merge ghost tree',
                'handler': self._handle_merge_optimization,
                'category': 'merge',
                'enabled': lambda: self.manual_spore_manager is not None
            },
            'j': {
                'description': 'dt stats',
                'handler': self._handle_dt_stats,
                'category': 'time',
                'enabled': lambda: self.dt_manager is not None
            },
            
            # === OPTIMIZE ===
            'o': {
                'description': 'optimize tree',
                'handler': self._handle_optimization,
                'category': 'optimize',
                'enabled': lambda: self.manual_spore_manager is not None and self.dt_manager is not None
            },
            'p': {
                'description': 'apply pairs',
                'handler': self._handle_optimal_pairs,
                'category': 'optimize',
                'enabled': lambda: self.manual_spore_manager is not None
            },
            
            # === TREE ===  
            'k': {
                'description': 'toggle mode',
                'handler': self._handle_toggle_creation_mode,
                'category': 'tree',
                'enabled': lambda: self.manual_spore_manager is not None
            },
            '7': {
                'description': 'depth 1',
                'handler': self._handle_tree_depth_1,
                'category': 'tree',
                'enabled': lambda: self._is_tree_mode()
            },
            '8': {
                'description': 'depth 2',
                'handler': self._handle_tree_depth_2,
                'category': 'tree',
                'enabled': lambda: self._is_tree_mode()
            },
            
            # === GHOSTS ===
            ';': {
                'description': 'toggle ghosts', 
                'handler': self._handle_toggle_ghosts,
                'category': 'ghosts',
                'enabled': lambda: self.manual_spore_manager is not None
            },
            
            # === DEBUG ===
            # 'l': {
            #     'description': 'plot tree graph (debug)',
            #     'handler': self._handle_debug_plot_tree,
            #     'category': 'debug',
            #     'enabled': lambda: self.manual_spore_manager is not None
            # },
            'l': {
                'description': 'graph stats',
                'handler': self._handle_all_graph_stats,
                'category': 'debug',
                'enabled': lambda: self.spore_manager is not None
            },
            'v': {
                'description': 'valence analysis',
                'handler': self._handle_valence_analysis,
                'category': 'debug',
                'enabled': lambda: self.spore_manager is not None
            },
            
            
            # === DELETE ===
            'ctrl+c': {
                'description': 'clear all',
                'handler': self._handle_clear_all,
                'category': 'delete',
                'enabled': lambda: self.manual_spore_manager is not None
            },
            'z': {
                'description': 'delete last',
                'handler': self._handle_delete_last_group,
                'category': 'delete',
                'enabled': lambda: self.manual_spore_manager is not None
            },
            'i': {
                'description': 'groups stats',
                'handler': self._handle_groups_stats,
                'category': 'stats',
                'enabled': lambda: self.manual_spore_manager is not None
            },
            # –ö–æ–º–∞–Ω–¥—ã –¥–≤–∏–∂–µ–Ω–∏—è –∫–∞–º–µ—Ä—ã (w, a, s, d, space, shift) –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –≤ first person controller
            
                                            # === –ö–£–†–°–û–† ===
                'alt': {
                    'description': 'toggle cursor',
                    'handler': self._handle_toggle_cursor,
                    'category': 'ui',
                    'enabled': lambda: self.scene_setup is not None
                },
            
            # === MOUSE WHEEL ===
            'scroll up': {
                'description': 'zoom in',
                'handler': self._handle_scroll_up,
                'category': 'zoom',
                'enabled': lambda: self.zoom_manager is not None
            },
            'scroll down': {
                'description': 'zoom out',
                'handler': self._handle_scroll_down,
                'category': 'zoom',
                'enabled': lambda: self.zoom_manager is not None
            },
            
            # === DIAGNOSTIC ===
            
            # === UI ===
        }
        
        print(f"‚úÖ –ö–æ–º–∞–Ω–¥–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞: {len(self.commands)} –∫–æ–º–∞–Ω–¥")

    def get_commands_by_category(self) -> dict:
        """–ì—Ä—É–ø–ø–∏—Ä—É–µ—Ç –∫–æ–º–∞–Ω–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ø—Ä–∞–≤–∫–∏."""
        categories = {}
        for key, cmd_info in self.commands.items():
            category = cmd_info['category']
            if category not in categories:
                categories[category] = []
            categories[category].append((key, cmd_info['description']))
        return categories

    def print_commands_help(self):
        """–í—ã–≤–æ–¥–∏—Ç —Å–ø—Ä–∞–≤–∫—É –ø–æ –≤—Å–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–º –∫–æ–º–∞–Ω–¥–∞–º."""
        print("\nüìã –°–ü–†–ê–í–ö–ê –ü–û –ö–û–ú–ê–ù–î–ê–ú:")
        print("=" * 50)
        
        categories = self.get_commands_by_category()
        for category, commands in categories.items():
            print(f"\nüéØ {category.upper()}:")
            for key, desc in commands:
                enabled = self.commands[key]['enabled']()
                status = "‚úÖ" if enabled else "‚ùå" 
                print(f"   {status} {key.upper()}: {desc}")
                
        print("\nüí° –õ–µ–≥–µ–Ω–¥–∞: ‚úÖ - –¥–æ—Å—Ç—É–ø–Ω–æ, ‚ùå - –º–µ–Ω–µ–¥–∂–µ—Ä –æ—Ç–∫–ª—é—á–µ–Ω")
        print("=" * 50)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–Ω—è—Ç—ã—Ö –∫–ª–∞–≤–∏—à
        print("\nüéπ –ó–ê–ù–Ø–¢–´–ï –ö–õ–ê–í–ò–®–ò:")
        print("=" * 30)
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –∫–ª–∞–≤–∏—à–∏ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        digits = []
        letters = []
        combinations = []
        
        for key in self.commands.keys():
            if key.isdigit():
                digits.append(key.upper())
            elif len(key) == 1 and key.isalpha():
                letters.append(key.upper())
            else:
                combinations.append(key.upper())
        
        # –í—ã–≤–æ–¥–∏–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        if digits:
            print(f"   –¶–ò–§–†–´: {', '.join(sorted(digits))}")
        if letters:
            print(f"   –ë–£–ö–í–´: {', '.join(sorted(letters))}")
        if combinations:
            print(f"   –ö–û–ú–ë–ò–ù–ê–¶–ò–ò: {', '.join(sorted(combinations))}")
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        total_keys = len(self.commands)
        print(f"\nüìä –í—Å–µ–≥–æ –∑–∞–Ω—è—Ç–æ –∫–ª–∞–≤–∏—à: {total_keys}")
        print("=" * 30)

    def get_free_keys(self) -> list:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –∫–ª–∞–≤–∏—à."""
        all_keys = set('abcdefghijklmnopqrstuvwxyz1234567890')
        used_keys = set(self.commands.keys())
        return sorted(list(all_keys - used_keys))

    def _is_tree_mode(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ —Ä–µ–∂–∏–º –¥–µ—Ä–µ–≤–∞."""
        return (self.manual_spore_manager is not None and 
                hasattr(self.manual_spore_manager, 'creation_mode') and
                self.manual_spore_manager.creation_mode == 'tree')

    def update(self) -> None:
        """
        –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –¥–æ–ª–∂–µ–Ω –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –∫–∞–∂–¥—ã–π –∫–∞–¥—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –≤–≤–æ–¥–∞.
        """
        # üîÑ v16: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–æ–≤ –º—ã—à–∏ –¥–ª—è –º–∞—Ç–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±—É—Ñ–µ—Ä–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∞
        if self.manual_spore_manager:
            current_mouse_left = mouse.left
            # –û–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –õ–ö–ú (–ø–µ—Ä–µ—Ö–æ–¥ —Å False –Ω–∞ True)
            if current_mouse_left and not self.previous_mouse_left:
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ –±—É—Ñ–µ—Ä–Ω–æ–º –≥—Ä–∞—Ñ–µ
                if self.buffer_merge_manager.has_buffer_data():
                    print(f"   üñ±Ô∏è –õ–ö–ú: –ú–∞—Ç–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –±—É—Ñ–µ—Ä–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∞ –≤ —Ä–µ–∞–ª—å–Ω—ã–π...")
                    
                    # üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ë–£–§–ï–†–ù–´–• –î–ê–ù–ù–´–•
                    buffer_positions = getattr(self.buffer_merge_manager, 'buffer_positions', {})
                    buffer_links = getattr(self.buffer_merge_manager, 'buffer_links', [])
                    print(f"   üìä –ë—É—Ñ–µ—Ä–Ω—ã—Ö —Å–ø–æ—Ä: {len(buffer_positions)}")
                    print(f"   üîó –ë—É—Ñ–µ—Ä–Ω—ã—Ö —Å–≤—è–∑–µ–π: {len(buffer_links)}")
                    
                    if len(buffer_links) == 0:
                        print(f"   ‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ë—É—Ñ–µ—Ä–Ω—ã—Ö —Å–≤—è–∑–µ–π –Ω–µ—Ç! –ú–∞—Ç–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–∑–¥–∞—Å—Ç —Å–ø–æ—Ä—ã –±–µ–∑ —Å–≤—è–∑–µ–π.")
                    
                    # –ú–∞—Ç–µ—Ä–∏–∞–ª–∏–∑—É–µ–º –±—É—Ñ–µ—Ä–Ω—ã–π –≥—Ä–∞—Ñ
                    result = self.buffer_merge_manager.materialize_buffer_to_real(
                        spore_manager=self.spore_manager,
                        zoom_manager=self.zoom_manager,
                        color_manager=self.spore_manager.color_manager if self.spore_manager else None,
                        pendulum=self.manual_spore_manager.deps.pendulum if hasattr(self.manual_spore_manager, 'deps') else None,
                        config=self.manual_spore_manager.deps.config if hasattr(self.manual_spore_manager, 'deps') else {}
                    )
                    
                    if result['success']:
                        stats = result['stats']
                        print(f"   ‚úÖ –ú–∞—Ç–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {stats['spores_created']} —Å–ø–æ—Ä, {stats['links_created']} —Å–≤—è–∑–µ–π")
                        
                        # ‚úÖ –ú–∞—Ç–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç, –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ BufferMergeManager
                        print(f"   üìö –ú–∞—Ç–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Å–ø–æ—Ä—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –∏—Å—Ç–æ—Ä–∏—é –≥—Ä—É–ø–ø")
                    else:
                        print(f"   ‚ùå –û—à–∏–±–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                        
                else:
                    # Fallback: —Å–æ–∑–¥–∞–µ–º —Å–ø–æ—Ä—ã –∫–∞–∫ —Ä–∞–Ω—å—à–µ
                    print(f"   üñ±Ô∏è –õ–ö–ú: –ë—É—Ñ–µ—Ä–Ω—ã–π –≥—Ä–∞—Ñ –ø—É—Å—Ç, —Å–æ–∑–¥–∞–Ω–∏–µ —Å–ø–æ—Ä...")
                    created_spores = self.manual_spore_manager.create_spore_at_cursor()
                    if created_spores:
                        print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(created_spores)} —Å–ø–æ—Ä (1 —Ä–æ–¥–∏—Ç–µ–ª—å + 2 —Ä–µ–±—ë–Ω–∫–∞ + 2 –ª–∏–Ω–∫–∞)")
                        
            self.previous_mouse_left = current_mouse_left
        
        # –õ–æ–≥–∏–∫–∞ –¥–ª—è –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ø–æ—Ä –ø—Ä–∏ —É–¥–µ—Ä–∂–∞–Ω–∏–∏ 'f'
        if held_keys['f']:  # type: ignore
            if self.f_key_down_time > 0:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞–∂–∞—Ç–∏–µ –±—ã–ª–æ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ
                now = time.time()
                if now >= self.next_spawn_time:
                    if self.spore_manager:
                        self.spore_manager.generate_new_spore()
                    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
                    self.next_spawn_time = now + self.spawn_interval
        else:
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –µ—Å–ª–∏ –∫–ª–∞–≤–∏—à–∞ –Ω–µ –Ω–∞–∂–∞—Ç–∞
            self.f_key_down_time = 0
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–≤–∏–∂–µ–Ω–∏—è –∫–∞–º–µ—Ä—ã —á–µ—Ä–µ–∑ held_keys
        if self.scene_setup and self.scene_setup.player:
            step = self.scene_setup.base_speed * 0.016  # –ü—Ä–∏–º–µ—Ä–Ω–æ 60 FPS
            
            # –î–≤–∏–∂–µ–Ω–∏–µ –≤–≤–µ—Ä—Ö (Space)
            if held_keys['space']:  # type: ignore
                self.scene_setup.player.y += step
            
            # –î–≤–∏–∂–µ–Ω–∏–µ –≤–Ω–∏–∑ (Shift)
            if held_keys['shift']:  # type: ignore
                self.scene_setup.player.y -= step

    # === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î ===
    
    def _handle_spore_creation(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π —Å–ø–æ—Ä—ã (F)."""
        if self.spore_manager:
            self.spore_manager.generate_new_spore()
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä—ã –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–π –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        now = time.time()
        self.f_key_down_time = now
        self.next_spawn_time = now + self.long_press_threshold

    def _handle_candidate_activation(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ (G)."""
        if self.spore_manager:
            self.spore_manager.activate_random_candidate()

    def _handle_evolve_all(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —ç–≤–æ–ª—é—Ü–∏–∏ –≤—Å–µ—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ (V)."""
        if self.spore_manager:
            self.spore_manager.evolve_all_candidates_to_completion()

    def _handle_zoom_in(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏—è –∫–∞–º–µ—Ä—ã (E)."""
        if self.zoom_manager:
            self.zoom_manager.zoom_in()

    def _handle_zoom_out(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–¥–∞–ª–µ–Ω–∏—è –∫–∞–º–µ—Ä—ã (T)."""
        if self.zoom_manager:
            self.zoom_manager.zoom_out()

    def _handle_zoom_reset(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–±—Ä–æ—Å–∞ –∑—É–º–∞ (R)."""
        if self.zoom_manager:
            self.zoom_manager.reset_zoom()

    def _handle_spores_scale_down(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–º–µ–Ω—å—à–µ–Ω–∏—è –º–∞—Å—à—Ç–∞–±–∞ —Å–ø–æ—Ä (1)."""
        if self.zoom_manager:
            self.zoom_manager.decrease_spores_scale()

    def _handle_spores_scale_up(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–≤–µ–ª–∏—á–µ–Ω–∏—è –º–∞—Å—à—Ç–∞–±–∞ —Å–ø–æ—Ä (2)."""
        if self.zoom_manager:
            self.zoom_manager.increase_spores_scale()

    def _handle_candidates_radius_down(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–º–µ–Ω—å—à–µ–Ω–∏—è —Ä–∞–¥–∏—É—Å–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ (5)."""
        if self.spore_manager:
            self.spore_manager.adjust_min_radius(1/1.2)

    def _handle_candidates_radius_up(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–≤–µ–ª–∏—á–µ–Ω–∏—è —Ä–∞–¥–∏—É—Å–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ (6)."""
        if self.spore_manager:
            self.spore_manager.adjust_min_radius(1.2)

    def _handle_toggle_angels(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∞–Ω–≥–µ–ª–æ–≤ (Y)."""
        if self.angel_manager:
            self.angel_manager.toggle_angels()

    def _handle_toggle_frame(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç (U)."""
        if self.scene_setup and hasattr(self.scene_setup, 'frame'):
            self.scene_setup.frame.toggle_visibility()

    def _handle_dt_reset(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–±—Ä–æ—Å–∞ dt (M).""" 
        # –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Å–±—Ä–æ—Å –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ
        if self.dt_manager:
            self.dt_manager.reset_dt()
        
        if self.manual_spore_manager:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π dt –ø–æ—Å–ª–µ —Å–±—Ä–æ—Å–∞  
            current_dt = self.dt_manager.get_dt() if self.dt_manager else 0.001
            factor = 0.05
            if hasattr(self.manual_spore_manager, 'deps'):
                factor = self.manual_spore_manager.deps.config.get('tree', {}).get('dt_grandchildren_factor', 0.05)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π dt_vector
            dt_children = np.array([+current_dt, -current_dt, +current_dt, -current_dt], dtype=float)
            base_gc = current_dt * factor
            dt_grandchildren = np.array([
                +base_gc, -base_gc, +base_gc, -base_gc,
                +base_gc, -base_gc, +base_gc, -base_gc
            ], dtype=float)
            
            standard_dt_vector = np.concatenate([dt_children, dt_grandchildren])
            self.manual_spore_manager.ghost_tree_dt_vector = standard_dt_vector
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
            if hasattr(self.manual_spore_manager, 'prediction_manager'):
                self.manual_spore_manager.prediction_manager.clear_predictions()
                self.manual_spore_manager._update_predictions()
            
            print(f"üîÑ –í—Å–µ dt —Å–±—Ä–æ—à–µ–Ω—ã –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º")

    def _handle_merge_optimization(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ—Ä–¥–∂–∞ –ø—Ä–∏–∑—Ä–∞—á–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞ (M)."""
        print("[IM][M] –ö–ª–∞–≤–∏—à–∞ M –Ω–∞–∂–∞—Ç–∞ - –∑–∞–ø—É—Å–∫ –Ω–æ–≤–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –º–µ—Ä–¥–∂–∞!")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º tree_logic –∏–∑ manual_spore_manager
            if not self.manual_spore_manager:
                print("‚ùå Manual spore manager –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
                
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–∑–¥–∞–Ω–Ω–æ–µ –¥–µ—Ä–µ–≤–æ
            tree_logic = getattr(self.manual_spore_manager, '_last_tree_logic', None)
            if not tree_logic:
                print("‚ùå –ü—Ä–∏–∑—Ä–∞—á–Ω–æ–µ –¥–µ—Ä–µ–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                print("   üí° –°–æ–∑–¥–∞–π—Ç–µ –¥–µ—Ä–µ–≤–æ –ø—Ä–∏–∑—Ä–∞–∫–æ–≤ —Å–Ω–∞—á–∞–ª–∞ (–Ω–∞–≤–µ–¥–∏—Ç–µ –∫—É—Ä—Å–æ—Ä –Ω–∞ –æ–±–ª–∞—Å—Ç—å)")
                return
                
            print("‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø—Ä–∏–∑—Ä–∞—á–Ω–æ–µ –¥–µ—Ä–µ–≤–æ:")
            print(f"   üìç –ö–æ—Ä–µ–Ω—å: {tree_logic.root['position'] if tree_logic.root else '–Ω–µ—Ç'}")
            print(f"   üë∂ –î–µ—Ç–µ–π: {len(tree_logic.children) if hasattr(tree_logic, 'children') else 0}")
            grandchildren_count = (len(tree_logic.grandchildren) 
                                 if hasattr(tree_logic, 'grandchildren') else 0)
            print(f"   üë∂üë∂ –í–Ω—É–∫–æ–≤: {grandchildren_count}")
            
            # –ü–µ—Ä–µ–¥–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ manual_spore_manager –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
            self.buffer_merge_manager._manual_spore_manager_ref = self.manual_spore_manager
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –º–µ—Ä–¥–∂–∞
            result = self.buffer_merge_manager.merge_ghost_tree(tree_logic, save_image=True)
            
            if result['success']:
                print("‚úÖ –ú–µ—Ä–¥–∂ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!")
                
                # –í—ã–≤–æ–¥–∏–º –∫—Ä–∞—Ç–∫—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                stats = result['stats']
                print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {stats['added_to_buffer']} —Å–ø–æ—Ä –≤ –±—É—Ñ–µ—Ä–µ, "
                      f"{stats['merged_to_existing']} –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–π")
                
                if 'image_path' in stats:
                    print(f"üñºÔ∏è –ö–∞—Ä—Ç–∏–Ω–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {stats['image_path']}")
                    
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –º–µ—Ä–¥–∂–∞: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –º–µ—Ä–¥–∂–µ: {e}")
            import traceback
            traceback.print_exc()

    def _handle_standard_reset(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª–Ω–æ–≥–æ —Å–±—Ä–æ—Å–∞ –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º dt ([)."""
        print(f"[IM][[]] –ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É —Ä–µ–∂–∏–º—É...")
        
        # 1. –°–±—Ä–∞—Å—ã–≤–∞–µ–º –æ–±—â–∏–π dt —á–µ—Ä–µ–∑ dt_manager (–∫–∞–∫ –∫–ª–∞–≤–∏—à–∞ M)
        if self.dt_manager:
            self.dt_manager.reset_dt()
        
        # 2. –°–±—Ä–∞—Å—ã–≤–∞–µ–º ghost_tree_dt_vector –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º
        if self.manual_spore_manager:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π dt –ø–æ—Å–ª–µ —Å–±—Ä–æ—Å–∞
            current_dt = self.dt_manager.get_dt() if self.dt_manager else 0.001
            
            # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–∫—Ç–æ—Ä –¥–ª—è –≤–Ω—É–∫–æ–≤ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            factor = 0.05  # –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–≤–Ω—É–∫–∏ –≤ 20 —Ä–∞–∑ –º–µ–Ω—å—à–µ)
            if hasattr(self.manual_spore_manager, 'deps'):
                factor = self.manual_spore_manager.deps.config.get('tree', {}).get('dt_grandchildren_factor', 0.05)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π dt_vector: 4 –¥–µ—Ç–µ–π + 8 –≤–Ω—É–∫–æ–≤
            dt_children = np.array([+current_dt, -current_dt, +current_dt, -current_dt], dtype=float)
            base_gc = current_dt * factor
            dt_grandchildren = np.array([
                +base_gc, -base_gc, +base_gc, -base_gc,
                +base_gc, -base_gc, +base_gc, -base_gc
            ], dtype=float)
            
            standard_dt_vector = np.concatenate([dt_children, dt_grandchildren])
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≤–µ–∫—Ç–æ—Ä
            self.manual_spore_manager.ghost_tree_dt_vector = standard_dt_vector
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º baseline –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
            self.manual_spore_manager.ghost_dt_baseline = current_dt
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
            if hasattr(self.manual_spore_manager, 'prediction_manager'):
                self.manual_spore_manager.prediction_manager.clear_predictions()
                self.manual_spore_manager._update_predictions()
            
            print(f"üîÑ –í—Å–µ dt —Å–±—Ä–æ—à–µ–Ω—ã –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º:")
            print(f"   üìä –û–±—â–∏–π dt: {current_dt}")
            print(f"   üìä –§–∞–∫—Ç–æ—Ä –≤–Ω—É–∫–æ–≤: {factor}")
            print(f"   üìä dt –¥–µ—Ç–µ–π: {dt_children}")
            print(f"   üìä dt –≤–Ω—É–∫–æ–≤: {dt_grandchildren}")
            print(f"   üí° –¢–µ–ø–µ—Ä—å –≤–Ω—É–∫–∏ –≤ {1/factor:.0f} —Ä–∞–∑ –º–µ–Ω—å—à–µ –¥–µ—Ç–µ–π")
        else:
            print(f"‚ö†Ô∏è Manual spore manager –Ω–µ –Ω–∞–π–¥–µ–Ω")

    def _handle_dt_stats(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ dt (J)."""
        if self.dt_manager:
            self.dt_manager.print_stats()

    def _handle_optimal_pairs(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö –ø–∞—Ä (P)."""
        if self.manual_spore_manager:
            self._apply_optimal_pairs_to_ghost_tree()

    def _handle_toggle_creation_mode(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è (K)."""
        if self.manual_spore_manager and hasattr(self.manual_spore_manager, 'toggle_creation_mode'):
            self.manual_spore_manager.toggle_creation_mode()

    def _handle_tree_depth_1(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≥–ª—É–±–∏–Ω—ã –¥–µ—Ä–µ–≤–∞ = 1 (7)."""
        if self.manual_spore_manager and hasattr(self.manual_spore_manager, 'set_tree_depth'):
            self.manual_spore_manager.set_tree_depth(1)

    def _handle_tree_depth_2(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≥–ª—É–±–∏–Ω—ã –¥–µ—Ä–µ–≤–∞ = 2 (8).""" 
        if self.manual_spore_manager and hasattr(self.manual_spore_manager, 'set_tree_depth'):
            self.manual_spore_manager.set_tree_depth(2)

    def _handle_toggle_ghosts(self):
        """üÜï –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–∏–∑—Ä–∞—á–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã (:)."""
        if self.manual_spore_manager and hasattr(self.manual_spore_manager, 'toggle_ghost_system'):
            new_state = self.manual_spore_manager.toggle_ghost_system()
            if new_state:
                print("   üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: –ø—Ä–∏–∑—Ä–∞–∫–∏ —Å–Ω–æ–≤–∞ —Å–ª–µ–¥—É—é—Ç –∑–∞ –∫—É—Ä—Å–æ—Ä–æ–º")
            else:
                print("   üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: —Ç–µ–ø–µ—Ä—å –≤–∏–¥–µ–Ω —Ç–æ–ª—å–∫–æ —á–∏—Å—Ç—ã–π –∫—É—Ä—Å–æ—Ä")
        else:
            print("‚ö†Ô∏è ManualSporeManager –∏–ª–∏ –º–µ—Ç–æ–¥ toggle_ghost_system –Ω–µ –Ω–∞–π–¥–µ–Ω")

    def _handle_debug_toggle(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –æ—Ç–ª–∞–¥–∫–∏ (H)."""
        self.debug_ghost_tree = not self.debug_ghost_tree
        status = "–í–ö–õ–Æ–ß–ï–ù–ê" if self.debug_ghost_tree else "–û–¢–ö–õ–Æ–ß–ï–ù–ê"
        print(f"üîç –î–µ—Ç–∞–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞ –ø—Ä–∏–∑—Ä–∞—á–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞: {status}")

    def _handle_debug_plot_tree(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞ –¥–µ—Ä–µ–≤–∞ (L)."""
        if not self.manual_spore_manager:
            print("‚ùå Manual spore manager –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
            
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–∑–¥–∞–Ω–Ω–æ–µ –¥–µ—Ä–µ–≤–æ
            tree_creation_manager = self.manual_spore_manager.tree_creation_manager
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É manual_spore_manager —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ –¥–µ—Ä–µ–≤–æ –ª–æ–≥–∏–∫–∏
            if hasattr(self.manual_spore_manager, '_last_tree_logic') and self.manual_spore_manager._last_tree_logic:
                tree_logic = self.manual_spore_manager._last_tree_logic
                print(f"üéØ –°—Ç—Ä–æ–∏–º –≥—Ä–∞—Ñ–∏–∫ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–µ—Ä–µ–≤–∞...")
                
                # –í—ã–∑—ã–≤–∞–µ–º debug –º–µ—Ç–æ–¥
                save_path = tree_logic.debug_plot_tree()
                print(f"‚úÖ –ì—Ä–∞—Ñ–∏–∫ –¥–µ—Ä–µ–≤–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {save_path}")
                
            else:
                print("‚ùå –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏")
                print("üí° –°–æ–∑–¥–∞–π—Ç–µ –¥–µ—Ä–µ–≤–æ —á–µ—Ä–µ–∑ –õ–ö–ú, –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ L")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –¥–µ—Ä–µ–≤–∞: {e}")
            import traceback
            traceback.print_exc()

    # def _handle_help(self):  # –£–±—Ä–∞–Ω–æ - —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –æ–∫–Ω–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    #     """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–≤–æ–¥–∞ —Å–ø—Ä–∞–≤–∫–∏ (N)."""
    #     self.print_commands_help()

    def _handle_optimization(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –¥–µ—Ä–µ–≤–∞ (O)."""
        print(f"[IM][O] –ö–ª–∞–≤–∏—à–∞ O –Ω–∞–∂–∞—Ç–∞!")
        try:
            print("[IM][O] –ó–∞–ø—É—Å–∫ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø–ª–æ—â–∞–¥–∏...")

            # ==== –î–æ—Å—Ç–∞—ë–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ ====
            # pendulum –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ deps
            pendulum = getattr(self.manual_spore_manager, "deps", None)
            if pendulum:
                pendulum = getattr(pendulum, "pendulum", None)

            # dt-manager
            dt_manager = self.dt_manager

            print(f"[IM][O] –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π:")
            print(f"   pendulum: {pendulum is not None} ({type(pendulum) if pendulum else 'None'})")
            print(f"   dt_manager: {dt_manager is not None} ({type(dt_manager) if dt_manager else 'None'})")

            if pendulum is None:
                raise RuntimeError("–ù–µ –Ω–∞–π–¥–µ–Ω –æ–±—ä–µ–∫—Ç pendulum –≤ manual_spore_manager.deps.pendulum")
            if dt_manager is None:
                raise RuntimeError("–ù–µ –Ω–∞–π–¥–µ–Ω dt_manager")

            # ==== –°–æ–∑–¥–∞—ë–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –¥–µ—Ä–µ–≤–æ –∏ –ø–∞—Ä—ã ====
            print("[IM][O] –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏...")
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –∫—É—Ä—Å–æ—Ä–∞
            mouse_pos = self.manual_spore_manager.get_mouse_world_position()
            if mouse_pos is None:
                raise RuntimeError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é –∫—É—Ä—Å–æ—Ä–∞")
            
            cursor_position_2d = np.array([mouse_pos[0], mouse_pos[1]])
            print(f"[IM][O] –ü–æ–∑–∏—Ü–∏—è –∫—É—Ä—Å–æ—Ä–∞: {cursor_position_2d}")
                
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω—É–∂–Ω—ã–µ –∫–ª–∞—Å—Å—ã
            from ..logic.tree.spore_tree import SporeTree
            from ..logic.tree.spore_tree_config import SporeTreeConfig
            from ..logic.tree.pairs.find_optimal_pairs import find_optimal_pairs
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å–ø–∞—Ä–∏–≤–∞–Ω–∏—è
            from ..logic.tree.tree_area_bridge import _load_pairing_config
            pairing_config = _load_pairing_config()
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π dt –∏–∑ —Å–∏—Å—Ç–µ–º—ã
            dt = dt_manager.get_dt() if dt_manager else 0.05
            
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –¥–µ—Ä–µ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–∞—Ä
            tree_config = SporeTreeConfig(
                initial_position=cursor_position_2d,
                dt_base=dt,
                dt_grandchildren_factor=pairing_config.get('dt_grandchildren_factor', 0.2),
                show_debug=pairing_config.get('show_debug', True)
            )
            
            temp_tree = SporeTree(
                pendulum=pendulum,
                config=tree_config,
                auto_create=True  # –°–æ–∑–¥–∞–µ—Ç –ø–æ–ª–Ω–æ–µ –¥–µ—Ä–µ–≤–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
            )
            
            print(f"[IM][O] –í—Ä–µ–º–µ–Ω–Ω–æ–µ –¥–µ—Ä–µ–≤–æ —Å–æ–∑–¥–∞–Ω–æ: {len(temp_tree.children)} –¥–µ—Ç–µ–π, {len(temp_tree.grandchildren)} –≤–Ω—É–∫–æ–≤")
            
            # –ò—â–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –ø–∞—Ä—ã
            pairs = find_optimal_pairs(temp_tree, show=True)
            
            if pairs is None:
                raise RuntimeError("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–∞—Ä—ã")
            
            print(f"[IM][O] –ù–∞–π–¥–µ–Ω–æ {len(pairs)} –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö –ø–∞—Ä")

            # ==== –í—ã–∑–æ–≤ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ ====
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –∏–∑ config/json/config.json
            result = run_area_optimization(
                tree=temp_tree,
                pairs=pairs,
                pendulum=pendulum,
                dt_manager=dt_manager,
                # dt_bounds, optimization_method, max_iterations –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
            )

            # ==== –ö—Ä–∞—Å–∏–≤—ã–µ –ª–æ–≥–∏ (–Ω–∞—É—á–Ω–∞—è –Ω–æ—Ç–∞—Ü–∏—è) ====
            if result is None:
                print(f"[IM][O] ‚ùå –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –≤–µ—Ä–Ω—É–ª–∞ None - –≤–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
                return
                
            try:
                start_area = result.get("start_area", result.get("initial_area", None))
                best_area  = result.get("best_area",  result.get("optimized_area", None))
                if start_area is not None and best_area is not None:
                    delta = best_area - start_area
                    rel = (delta / max(abs(start_area), 1e-12)) * 100.0
                    print(f"[IM][O] –ì–æ—Ç–æ–≤–æ. –ü–ª–æ—â–∞–¥—å: {start_area:.6e} ‚Üí {best_area:.6e} (Œî={delta:+.6e}, {rel:+.3f}%)")
                else:
                    print(f"[IM][O] –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—É—á–µ–Ω, –Ω–æ –ø–ª–æ—â–∞–¥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ result")
            except Exception as log_error:
                print(f"[IM][O] –û—à–∏–±–∫–∞ –≤ –ª–æ–≥–∞—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {log_error}")
                
            print(f"[IM][O] –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {result}")
            
            # ==== –ü–†–ò–ú–ï–ù–ï–ù–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –ö –ü–†–ò–ó–†–ê–ß–ù–û–ú–£ –î–ï–†–ï–í–£ ====
            if result and result.get('success', False):
                try:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ –∞–ª–≥–æ—Ä–∏—Ç–º —á—Ç–æ –∏ –≤ _apply_optimal_pairs_to_ghost_tree()
                    print(f"[IM][O] –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ dt –∫ –ø—Ä–∏–∑—Ä–∞—á–Ω–æ–º—É –¥–µ—Ä–µ–≤—É...")
                    
                    # –ü–æ–ª—É—á–∞–µ–º optimized_tree –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                    optimized_tree = result.get('optimized_tree')
                    if optimized_tree is None:
                        print(f"[IM][O] ‚ö†Ô∏è optimized_tree –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ")
                        return
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º dt –∏–∑ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞ (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ P)
                    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤—ã –∏—Å—Ö–æ–¥–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
                    dt_children = np.array([child['dt'] for child in optimized_tree.children])
                    dt_grandchildren = np.array([gc['dt'] for gc in optimized_tree.grandchildren])
                    
                    print(f"[IM][O] –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ dt –∏–∑ –¥–µ—Ä–µ–≤–∞:")
                    print(f"   –î–µ—Ç–∏: {dt_children}")
                    print(f"   –í–Ω—É–∫–∏: {dt_grandchildren}")
                    
                    # üîç –í–ê–ñ–ù–û: –î–µ—Ç–∏ –ù–ï –û–ü–¢–ò–ú–ò–ó–ò–†–£–Æ–¢–°–Ø - –∏—Ö dt –æ—Å—Ç–∞—é—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º–∏!
                    print(f"[IM][O] ‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: dt –¥–µ—Ç–µ–π –ù–ï –∏–∑–º–µ–Ω—è—é—Ç—Å—è –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏!")
                    print(f"   –î–µ—Ç–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ dt: {dt_children}")
                    print(f"   –¢–æ–ª—å–∫–æ –≤–Ω—É–∫–∏ –ø–æ–ª—É—á–∞—é—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ dt")
                    
                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π dt_vector –∏–∑ 12 —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                    # –ü–µ—Ä–≤—ã–µ 4 - dt –¥–µ—Ç–µ–π, —Å–ª–µ–¥—É—é—â–∏–µ 8 - dt –≤–Ω—É–∫–æ–≤
                    dt_vector = np.concatenate([dt_children, dt_grandchildren])
                    
                    print(f"[IM][O] üéØ –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π dt_vector:")
                    print(f"   dt_children (0:4): {dt_vector[:4]}")  
                    print(f"   dt_grandchildren (4:12): {dt_vector[4:12]}")
                    
                    # –ü–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –≤ –ø—Ä–∏–∑—Ä–∞—á–Ω–æ–µ –¥–µ—Ä–µ–≤–æ
                    self.manual_spore_manager.ghost_tree_dt_vector = dt_vector

                    # –ó–∞–ø–æ–º–Ω–∏–º –±–∞–∑–æ–≤—ã–π dt –Ω–∞ –º–æ–º–µ–Ω—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ ‚Äî –Ω—É–∂–µ–Ω –¥–ª—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
                    if self.dt_manager:
                        self.manual_spore_manager.ghost_dt_baseline = self.dt_manager.get_dt()
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —Å –Ω–æ–≤—ã–º–∏ dt
                    if hasattr(self.manual_spore_manager, 'prediction_manager'):
                        self.manual_spore_manager.prediction_manager.clear_predictions()
                        self.manual_spore_manager._update_predictions()
                        print(f"[IM][O] ‚úÖ –ü—Ä–∏–∑—Ä–∞—á–Ω–æ–µ –¥–µ—Ä–µ–≤–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ dt!")
                    else:
                        print(f"[IM][O] ‚ö†Ô∏è prediction_manager –Ω–µ –Ω–∞–π–¥–µ–Ω")
                        
                except Exception as apply_error:
                    print(f"[IM][O] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {apply_error}")
                    import traceback
                    traceback.print_exc()
            else:
                print(f"[IM][O] ‚ö†Ô∏è –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å, —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è")
            
        except Exception as e:
            print(f"‚ùå [IM][O] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {e}")
            import traceback
            traceback.print_exc()

    # –ú–µ—Ç–æ–¥—ã –¥–≤–∏–∂–µ–Ω–∏—è –∫–∞–º–µ—Ä—ã —É–¥–∞–ª–µ–Ω—ã - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –≤ first person controller

    def _handle_toggle_cursor(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∑–∞—Ö–≤–∞—Ç–∞ –∫—É—Ä—Å–æ—Ä–∞ (Alt)."""
        # Alt –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤ SceneSetup.toggle_freeze() —á–µ—Ä–µ–∑ –≥–ª–æ–±–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é input()
        # –≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –Ω–æ –∫–æ–º–∞–Ω–¥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏
        pass

    def _handle_scroll_up(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–µ—Å–∏–∫–∞ –º—ã—à–∏ –≤–≤–µ—Ä—Ö (–ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ)."""
        if self.zoom_manager:
            self.zoom_manager.zoom_in()

    def _handle_scroll_down(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–µ—Å–∏–∫–∞ –º—ã—à–∏ –≤–Ω–∏–∑ (–æ—Ç–¥–∞–ª–µ–Ω–∏–µ)."""
        if self.zoom_manager:
            self.zoom_manager.zoom_out()

    def _handle_clear_all(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ –≤—Å–µ—Ö —Å–ø–æ—Ä (Ctrl+C)."""
        print("üßπ –ö–ª–∞–≤–∏—à–∞ Ctrl+C: –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —Å–ø–æ—Ä –∏ –æ–±—ä–µ–∫—Ç–æ–≤")
        
        # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞: –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ manual_spore_manager
        if self.manual_spore_manager:
            print(f"   üîç ManualSporeManager –Ω–∞–π–¥–µ–Ω: {type(self.manual_spore_manager)}")
            if hasattr(self.manual_spore_manager, 'clear_all'):
                print(f"   üîç –ú–µ—Ç–æ–¥ clear_all –Ω–∞–π–¥–µ–Ω")
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–æ –æ—á–∏—Å—Ç–∫–∏
                if hasattr(self.manual_spore_manager, 'created_links'):
                    print(f"   üìä created_links –¥–æ –æ—á–∏—Å—Ç–∫–∏: {len(self.manual_spore_manager.created_links)}")
                if hasattr(self.manual_spore_manager, 'spore_groups_history'):
                    print(f"   üìö –≥—Ä—É–ø–ø –≤ –∏—Å—Ç–æ—Ä–∏–∏: {len(self.manual_spore_manager.spore_groups_history)}")
                
                self.manual_spore_manager.clear_all()
            else:
                print(f"   ‚ùå –ú–µ—Ç–æ–¥ clear_all –ù–ï –Ω–∞–π–¥–µ–Ω!")
        else:
            print(f"   ‚ùå ManualSporeManager –ù–ï –Ω–∞–π–¥–µ–Ω!")
        
        # –û—á–∏—â–∞–µ–º —á–µ—Ä–µ–∑ SporeManager
        if self.spore_manager:
            self.spore_manager.clear_all_manual()
        
        # üßπ –û—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä–Ω—ã–π –≥—Ä–∞—Ñ –ø—Ä–∏ –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–µ
        if hasattr(self, 'buffer_merge_manager'):
            clear_result = self.buffer_merge_manager.clear_buffer_graph()
            if clear_result['success']:
                print(f"   üßπ –ë—É—Ñ–µ—Ä–Ω—ã–π –≥—Ä–∞—Ñ –æ—á–∏—â–µ–Ω: {clear_result['cleared_spores']} —Å–ø–æ—Ä")

        # üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é (–ø—É—Å—Ç–æ–π –≥—Ä–∞—Ñ)
        if hasattr(self.buffer_merge_manager, '_create_real_graph_visualization') and self.spore_manager:
            viz_path = self.buffer_merge_manager._create_real_graph_visualization(self.spore_manager)
            if viz_path:
                print(f"   üñºÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∞ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è: {viz_path}")

    def _handle_delete_last_group(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –≥—Ä—É–ø–ø—ã —Å–ø–æ—Ä (Z)."""
        if self.manual_spore_manager:
            print("üóëÔ∏è –ö–ª–∞–≤–∏—à–∞ Z: –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≥—Ä—É–ø–ø—ã —Å–ø–æ—Ä")
            success = self.manual_spore_manager.delete_last_spore_group()
            if success:
                print("   ‚úÖ –ü–æ—Å–ª–µ–¥–Ω—è—è –≥—Ä—É–ø–ø–∞ —Å–ø–æ—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞")
                
                # üîß –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï PNG –ü–û–°–õ–ï –£–î–ê–õ–ï–ù–ò–Ø
                try:
                    print("   üñºÔ∏è –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ PNG...")
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —É–¥–∞–ª–µ–Ω–∏—è
                    import time
                    time.sleep(0.1)
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é
                    if hasattr(self.buffer_merge_manager, '_create_real_graph_visualization') and self.spore_manager:
                        viz_path = self.buffer_merge_manager._create_real_graph_visualization(self.spore_manager)
                        if viz_path:
                            print(f"   ‚úÖ PNG –æ–±–Ω–æ–≤–ª–µ–Ω –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è: {viz_path}")
                        else:
                            print("   ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å PNG")
                    
                    # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–∫–æ–ª—å–∫–æ —Å–≤—è–∑–µ–π –æ—Å—Ç–∞–ª–æ—Å—å
                    remaining_links = len(self.spore_manager.links) if self.spore_manager else 0
                    print(f"   üìä –°–≤—è–∑–µ–π –æ—Å—Ç–∞–ª–æ—Å—å –≤ SporeManager: {remaining_links}")
                    
                except Exception as e:
                    print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è PNG: {e}")
            else:
                print("   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≥—Ä—É–ø–ø—É (–≤–æ–∑–º–æ–∂–Ω–æ, –Ω–µ—Ç –≥—Ä—É–ø–ø –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è)")
        else:
            print("   ‚ùå ManualSporeManager –Ω–µ –Ω–∞–π–¥–µ–Ω!")

    def _handle_groups_stats(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ –≥—Ä—É–ø–ø (I)."""
        if self.manual_spore_manager:
            if hasattr(self.manual_spore_manager, 'get_groups_history_stats'):
                stats = self.manual_spore_manager.get_groups_history_stats()
                print("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –≥—Ä—É–ø–ø:")
                print(f"   üìö –í—Å–µ–≥–æ –≥—Ä—É–ø–ø —Å–æ–∑–¥–∞–Ω–æ: {stats.get('total_groups', 0)}")
                print(f"   üîó –í—Å–µ–≥–æ –ª–∏–Ω–∫–æ–≤ —Å–æ–∑–¥–∞–Ω–æ: {stats.get('total_links', 0)}")
                print(f"   üìã –ì—Ä—É–ø–ø –≤ –∏—Å—Ç–æ—Ä–∏–∏: {len(self.manual_spore_manager.spore_groups_history)}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≥—Ä—É–ø–ø
                history = getattr(self.manual_spore_manager, 'spore_groups_history', [])
                if history:
                    print(f"   üìñ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –≥—Ä—É–ø–ø—ã:")
                    for i, group in enumerate(history[-3:], start=len(history)-2):
                        if i > 0:
                            print(f"      –ì—Ä—É–ø–ø–∞ #{i}: {len(group)} —Å–ø–æ—Ä")
            else:
                # Fallback —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                history = getattr(self.manual_spore_manager, 'spore_groups_history', [])
                links = getattr(self.manual_spore_manager, 'created_links', [])
                print("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –≥—Ä—É–ø–ø:")
                print(f"   üìö –ì—Ä—É–ø–ø –≤ –∏—Å—Ç–æ—Ä–∏–∏: {len(history)}")
                print(f"   üîó –ê–∫—Ç–∏–≤–Ω—ã—Ö –ª–∏–Ω–∫–æ–≤: {len(links)}")
        else:
            print("   ‚ùå ManualSporeManager –Ω–µ –Ω–∞–π–¥–µ–Ω!")

    def handle_input(self, key: str) -> None:
        """
        –ù–æ–≤—ã–π —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥–Ω—É—é —Å–∏—Å—Ç–µ–º—É.
        """
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è —Ç–∏–ø–∞ 'left alt up', 'right shift down', 'control' –∏ —Ç.–¥.
        # –ù–û –ù–ï —Ñ–∏–ª—å—Ç—Ä—É–µ–º scroll —Å–æ–±—ã—Ç–∏—è
        if key == 'control' or (' ' in key and any(direction in key.lower() for direction in ['up', 'down', 'left', 'right']) and not key.startswith('scroll')):
            return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è –Ω–∞–∂–∞—Ç–∏—è/–æ—Ç–ø—É—Å–∫–∞–Ω–∏—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤
        
        # === –û–ë–†–ê–ë–û–¢–ö–ê CTRL –ö–û–ú–ë–ò–ù–ê–¶–ò–ô ===
        ctrl_pressed = held_keys['left control'] or held_keys['right control']
        
        if ctrl_pressed and self.dt_manager:
            if key == 'e' or key in ['scroll up', 'wheel up', 'mouse wheel up']:
                self.dt_manager.increase_dt()
                return  # –ù–µ –¥–∞—ë–º –ø—Ä–æ–≤–∞–ª–∏—Ç—å—Å—è –≤ –æ–±—ã—á–Ω—ã–π –∑—É–º
            elif key == 't' or key in ['scroll down', 'wheel down', 'mouse wheel down']:
                self.dt_manager.decrease_dt()
                return  # –ù–µ –¥–∞—ë–º –ø—Ä–æ–≤–∞–ª–∏—Ç—å—Å—è –≤ –æ–±—ã—á–Ω—ã–π –∑—É–º
        
        # === –ö–û–ù–ï–¶ –û–ë–†–ê–ë–û–¢–ö–ò CTRL –ö–û–ú–ë–ò–ù–ê–¶–ò–ô ===
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–∞–Ω–Ω–æ–π –∫–ª–∞–≤–∏—à–∏
        if key in self.commands:
            cmd_info = self.commands[key]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–æ–º–∞–Ω–¥—ã
            if cmd_info['enabled']():
                try:
                    cmd_info['handler']()
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã '{key}': {e}")
            else:
                print(f"‚ö†Ô∏è –ö–æ–º–∞–Ω–¥–∞ '{key}' –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ (enabled –≤–µ—Ä–Ω—É–ª False)")
            return
        
        # –ö–æ–º–∞–Ω–¥—ã –¥–≤–∏–∂–µ–Ω–∏—è –∫–∞–º–µ—Ä—ã (space hold, shift hold –∏ —Ç.–¥.) –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –≤ first person controller
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã Ctrl+C —á–µ—Ä–µ–∑ held_keys (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)
        elif held_keys['c'] and held_keys['left control'] and self.spore_manager:  # type: ignore
            # –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑ —Å–ª–æ–≤–∞—Ä—è
            if 'ctrl+c' in self.commands:
                self.commands['ctrl+c']['handler']()
            return
        
        # Ctrl+I removed - not working properly
        
        # –°–≤–æ–±–æ–¥–Ω—ã–µ –∫–ª–∞–≤–∏—à–∏
        elif key in ['x']:  # –£–±–∏—Ä–∞–µ–º z, c, i –∏–∑ —Å–≤–æ–±–æ–¥–Ω—ã—Ö
            print(f"üîì –ö–ª–∞–≤–∏—à–∞ '{key}' —Å–≤–æ–±–æ–¥–Ω–∞")
            return
            
        # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
        else:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã

    def _apply_optimal_pairs_to_ghost_tree(self) -> None:
        """
        –ù–∞—Ö–æ–¥–∏—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –ø–∞—Ä—ã –¥–ª—è –ø—Ä–∏–∑—Ä–∞—á–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞ –ø–æ–¥ –∫—É—Ä—Å–æ—Ä–æ–º
        –∏ –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ dt –≤ ghost_tree_dt_vector
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º—ã –≤ —Ä–µ–∂–∏–º–µ –¥–µ—Ä–µ–≤–∞ –≥–ª—É–±–∏–Ω—ã 2
            if not self.manual_spore_manager:
                print(f"‚ùå ManualSporeManager –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
                
            if self.manual_spore_manager.creation_mode != 'tree' or self.manual_spore_manager.tree_depth != 2:
                print(f"‚ùå –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–∞—Ä –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –¥–µ—Ä–µ–≤—å–µ–≤ –≥–ª—É–±–∏–Ω—ã 2")
                print(f"   –¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º: {self.manual_spore_manager.creation_mode}")
                print(f"   –¢–µ–∫—É—â–∞—è –≥–ª—É–±–∏–Ω–∞: {self.manual_spore_manager.tree_depth}")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –∫—É—Ä—Å–æ—Ä–∞
            mouse_pos = self.manual_spore_manager.get_mouse_world_position()
            if mouse_pos is None:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é –∫—É—Ä—Å–æ—Ä–∞")
                return

            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ numpy array
            cursor_position_2d = np.array([mouse_pos[0], mouse_pos[1]])
            
            print(f"üéØ –ü–æ–∏—Å–∫ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö –ø–∞—Ä –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ {cursor_position_2d}")
            
            # üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –î–û –°–ü–ê–†–ò–í–ê–ù–ò–Ø: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–µ—Ä–µ–≤–∞
            if self.debug_ghost_tree:
                print(f"\nüîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –î–û –°–ü–ê–†–ò–í–ê–ù–ò–Ø:")
                
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –ø—Ä–∏–∑—Ä–∞—á–Ω–æ–µ –¥–µ—Ä–µ–≤–æ –î–û –∏–∑–º–µ–Ω–µ–Ω–∏–π
                if hasattr(self.manual_spore_manager, 'prediction_manager') and self.manual_spore_manager.prediction_manager:
                    pred_manager = self.manual_spore_manager.prediction_manager
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π dt_vector
                    if hasattr(self.manual_spore_manager, 'ghost_tree_dt_vector') and self.manual_spore_manager.ghost_tree_dt_vector is not None:
                        current_dt_vector = self.manual_spore_manager.ghost_tree_dt_vector
                        print(f"   üìä –¢–µ–∫—É—â–∏–π ghost_tree_dt_vector:")
                        print(f"      –î–µ—Ç–∏ (0:4): {current_dt_vector[:4]}")
                        print(f"      –í–Ω—É–∫–∏ (4:12): {current_dt_vector[4:12]}")
                        
                        # üîç –°–æ—Ö—Ä–∞–Ω—è–µ–º dt –¥–µ—Ç–µ–π –î–û –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                        self._children_dt_before = current_dt_vector[:4].copy()
                        print(f"   üíæ –°–æ—Ö—Ä–∞–Ω–∏–ª–∏ dt –¥–µ—Ç–µ–π –î–û: {self._children_dt_before}")
                    else:
                        print(f"   üìä –¢–µ–∫—É—â–∏–π ghost_tree_dt_vector: –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù")
                        self._children_dt_before = None
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–∑—Ä–∞–∫–æ–≤
                    if hasattr(pred_manager, 'prediction_visualizers'):
                        ghost_count = len([v for v in pred_manager.prediction_visualizers if v.ghost_spore])
                        print(f"   üëª –ü—Ä–∏–∑—Ä–∞—á–Ω—ã—Ö —Å–ø–æ—Ä: {ghost_count}")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏–Ω–∫–æ–≤
                    if hasattr(pred_manager, 'prediction_links'):
                        print(f"   üîó –ü—Ä–∏–∑—Ä–∞—á–Ω—ã—Ö –ª–∏–Ω–∫–æ–≤: {len(pred_manager.prediction_links)}")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –≤—Å–µ—Ö –ø—Ä–∏–∑—Ä–∞–∫–æ–≤
                    if hasattr(pred_manager, 'prediction_visualizers'):
                        print(f"   üìç –ü–æ–∑–∏—Ü–∏–∏ –ø—Ä–∏–∑—Ä–∞–∫–æ–≤ –î–û:")
                        for i, viz in enumerate(pred_manager.prediction_visualizers):
                            if viz.ghost_spore:
                                pos = (viz.ghost_spore.x, viz.ghost_spore.z)
                                print(f"      –ü—Ä–∏–∑—Ä–∞–∫ {i}: {pos}")
                        
                        # üîç –î–ï–¢–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –í–ò–ó–£–ê–õ–¨–ù–´–• –û–ë–™–ï–ö–¢–û–í –î–û
                        print(f"   üîç –î–ï–¢–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –í–ò–ó–£–ê–õ–¨–ù–´–• –û–ë–™–ï–ö–¢–û–í –î–û:")
                        for i, viz in enumerate(pred_manager.prediction_visualizers):
                            if viz.ghost_spore:
                                print(f"      –ü—Ä–∏–∑—Ä–∞–∫ {i}:")
                                print(f"         ID: {viz.id}")
                                print(f"         –ü–æ–∑–∏—Ü–∏—è: ({viz.ghost_spore.x:.6f}, {viz.ghost_spore.z:.6f})")
                                print(f"         real_position: {viz.ghost_spore.real_position}")
                                print(f"         enabled: {viz.ghost_spore.enabled}")
                                if hasattr(viz.ghost_spore, 'logic'):
                                    print(f"         logic.position_2d: {viz.ghost_spore.logic.position_2d}")
                                print(f"         –¢–∏–ø: {type(viz.ghost_spore)}")
                else:
                    print(f"   ‚ùå PredictionManager –Ω–µ –Ω–∞–π–¥–µ–Ω")
                
                print(f"üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –î–û –°–ü–ê–†–ò–í–ê–ù–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê\n")
            
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω—É–∂–Ω—ã–µ –∫–ª–∞—Å—Å—ã
            from ..logic.tree.spore_tree import SporeTree
            from ..logic.tree.spore_tree_config import SporeTreeConfig
            from ..logic.tree.pairs.find_optimal_pairs import find_optimal_pairs
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å–ø–∞—Ä–∏–≤–∞–Ω–∏—è
            from ..logic.tree.tree_area_bridge import _load_pairing_config
            pairing_config = _load_pairing_config()
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π dt –∏–∑ —Å–∏—Å—Ç–µ–º—ã
            dt = self.dt_manager.get_dt() if self.dt_manager else 0.05
            
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –¥–µ—Ä–µ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–∞—Ä
            tree_config = SporeTreeConfig(
                initial_position=cursor_position_2d,
                dt_base=dt,
                dt_grandchildren_factor=pairing_config.get('dt_grandchildren_factor', 0.2),
                show_debug=pairing_config.get('show_debug', True),
                skip_auto_merge=True  # –ù–û–í–û–ï: –æ—Ç–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–µ—Ä–µ–≤—å–µ–≤
            )
            
            temp_tree = SporeTree(
                pendulum=self.manual_spore_manager.deps.pendulum,
                config=tree_config,
                auto_create=True  # –°–æ–∑–¥–∞–µ—Ç –ø–æ–ª–Ω–æ–µ –¥–µ—Ä–µ–≤–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
            )
            
            print(f"üå≤ –í—Ä–µ–º–µ–Ω–Ω–æ–µ –¥–µ—Ä–µ–≤–æ —Å–æ–∑–¥–∞–Ω–æ: {len(temp_tree.children)} –¥–µ—Ç–µ–π, {len(temp_tree.grandchildren)} –≤–Ω—É–∫–æ–≤")
            
            # –ò—â–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –ø–∞—Ä—ã
            pairs = find_optimal_pairs(temp_tree, show=True)
            
            if pairs is None:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–∞—Ä—ã")
                return
            
            # –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ä–æ–≤–Ω–æ 4 –ø–∞—Ä—ã
            if len(pairs) != 4:
                raise Exception(f"–û–®–ò–ë–ö–ê: –ù–∞–π–¥–µ–Ω–æ {len(pairs)} –ø–∞—Ä, –∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ä–æ–≤–Ω–æ 4!")
            
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(pairs)} –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö –ø–∞—Ä")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º dt –∏–∑ –ø–∞—Ä
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤—ã –∏—Å—Ö–æ–¥–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
            dt_children = np.array([child['dt'] for child in temp_tree.children])
            dt_grandchildren = np.array([gc['dt'] for gc in temp_tree.grandchildren])
            
            print(f"üìä –ò—Å—Ö–æ–¥–Ω—ã–µ dt –¥–µ—Ç–µ–π: {dt_children}")
            print(f"üìä –ò—Å—Ö–æ–¥–Ω—ã–µ dt –≤–Ω—É–∫–æ–≤: {dt_grandchildren}")
            
            # üîç –í–ê–ñ–ù–û: –î–µ—Ç–∏ –ù–ï –û–ü–¢–ò–ú–ò–ó–ò–†–£–Æ–¢–°–Ø - –∏—Ö dt –æ—Å—Ç–∞—é—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º–∏!
            print(f"‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: dt –¥–µ—Ç–µ–π –ù–ï –∏–∑–º–µ–Ω—è—é—Ç—Å—è –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º —Å–ø–∞—Ä–∏–≤–∞–Ω–∏—è!")
            print(f"   –î–µ—Ç–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ dt: {dt_children}")
            print(f"   –¢–æ–ª—å–∫–æ –≤–Ω—É–∫–∏ –ø–æ–ª—É—á–∞—é—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ dt –∏–∑ –ø–∞—Ä")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º dt –≤–Ω—É–∫–æ–≤ —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–∞–π–¥–µ–Ω–Ω—ã–º –ø–∞—Ä–∞–º
            for pair_idx, (gc_i, gc_j, meeting_info) in enumerate(pairs):
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∞ (–í–ê–ñ–ù–û: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∑–Ω–∞–∫–∏!)
                optimal_dt_i = meeting_info['time_gc']      # –≤—Ä–µ–º—è –¥–ª—è gc_i
                optimal_dt_j = meeting_info['time_partner'] # –≤—Ä–µ–º—è –¥–ª—è gc_j
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –º–∞—Å—Å–∏–≤ dt_grandchildren
                dt_grandchildren[gc_i] = optimal_dt_i
                dt_grandchildren[gc_j] = optimal_dt_j
                
                print(f"   –ü–∞—Ä–∞ {pair_idx+1}: gc_{gc_i} ‚Üî gc_{gc_j}")
                print(f"     gc_{gc_i}: {temp_tree.grandchildren[gc_i]['dt']:+.6f} ‚Üí {optimal_dt_i:+.6f}")
                print(f"     gc_{gc_j}: {temp_tree.grandchildren[gc_j]['dt']:+.6f} ‚Üí {optimal_dt_j:+.6f}")
                print(f"     –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∏: {meeting_info['distance']:.6f}")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π dt_vector –∏–∑ 12 —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            # –ü–µ—Ä–≤—ã–µ 4 - dt –¥–µ—Ç–µ–π, —Å–ª–µ–¥—É—é—â–∏–µ 8 - dt –≤–Ω—É–∫–æ–≤
            dt_vector = np.concatenate([dt_children, dt_grandchildren])
            
            print(f"üéØ –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π dt_vector:")
            print(f"   dt_children (0:4): {dt_vector[:4]}")  
            print(f"   dt_grandchildren (4:12): {dt_vector[4:12]}")
            
            # –ü–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –≤ –ø—Ä–∏–∑—Ä–∞—á–Ω–æ–µ –¥–µ—Ä–µ–≤–æ
            self.manual_spore_manager.ghost_tree_dt_vector = dt_vector

            # --- –∑–∞—Ñ–∏–∫—Å–∏—Ä—É–µ–º baseline –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–ª–µ—Å–∏–∫–æ–º
            if self.manual_spore_manager is not None and self.dt_manager is not None:
                try:
                    cur_dt = float(self.dt_manager.get_dt())
                except Exception:
                    # fallback: –≤–æ–∑—å–º—ë–º –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
                    cur_dt = float(getattr(self.dt_manager, "current_dt", 0.1))
                self.manual_spore_manager.ghost_dt_baseline = cur_dt
                print(f"[IM] ghost_dt_baseline set to {cur_dt:.6f} after pairing")

            # –ó–∞–ø–æ–º–Ω–∏–º –±–∞–∑–æ–≤—ã–π dt –Ω–∞ –º–æ–º–µ–Ω—Ç –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –ø–∞—Ä ‚Äî –Ω—É–∂–µ–Ω –¥–ª—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
            if self.dt_manager:
                self.manual_spore_manager.ghost_dt_baseline = self.dt_manager.get_dt()
            
            # –í–ê–ñ–ù–û: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∞—Ä–µ–Ω–Ω–æ–µ –¥–µ—Ä–µ–≤–æ
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∏–∑—Ä–∞—á–Ω–æ–µ –¥–µ—Ä–µ–≤–æ —Å –Ω–æ–≤—ã–º dt_vector
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º —Å –Ω–æ–≤—ã–º dt_vector
            
            if self.debug_ghost_tree:
                print(f"üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–∑—Ä–∞—á–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞...")
                print(f"   üìä ghost_tree_dt_vector —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {dt_vector is not None}")
                print(f"   üìä –î–ª–∏–Ω–∞ dt_vector: {len(dt_vector) if dt_vector is not None else 'None'}")
                
                # –ü–µ—Ä–µ–¥–∞–µ–º —Ñ–ª–∞–≥ –æ—Ç–ª–∞–¥–∫–∏ –≤ prediction_manager
                self.manual_spore_manager.prediction_manager.debug_ghost_tree = True
                
                self.manual_spore_manager.prediction_manager.clear_predictions()
                print(f"   üßπ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –æ—á–∏—â–µ–Ω—ã")
                
                self.manual_spore_manager._update_predictions()
                print(f"   üîÑ _update_predictions() –≤—ã–∑–≤–∞–Ω")
                
                # –û—Ç–∫–ª—é—á–∞–µ–º –æ—Ç–ª–∞–¥–∫—É –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                self.manual_spore_manager.prediction_manager.debug_ghost_tree = False
            else:
                self.manual_spore_manager.prediction_manager.clear_predictions()
                self.manual_spore_manager._update_predictions()

            print(f"üîÑ –ü—Ä–∏–∑—Ä–∞—á–Ω–æ–µ –¥–µ—Ä–µ–≤–æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–æ —Å –Ω–æ–≤—ã–º–∏ dt")
            
            print(f"‚úÖ –ü—Ä–∏–∑—Ä–∞—á–Ω–æ–µ –¥–µ—Ä–µ–≤–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ —Å–æ —Å–ø–∞—Ä–µ–Ω–Ω—ã–º–∏ dt!")
            
            # --- –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ dt –ø–æ—Å–ª–µ —Å–ø–∞—Ä–∏–≤–∞–Ω–∏—è
            if self.dt_manager and hasattr(self.dt_manager, "subscribe_on_change"):
                try:
                    self.dt_manager.subscribe_on_change(self._on_dt_changed)
                    print(f"[IM] re-subscribed to DTManager.on_change after pairing (DT id={id(self.dt_manager)})")
                    # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞: –ø–æ–∫–∞–∂–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
                    if hasattr(self.dt_manager, "debug_subscribers"):
                        self.dt_manager.debug_subscribers()
                except Exception as ex:
                    print(f"[IM] failed to re-subscribe after pairing: {ex}")
            
            # –°—Ä–∞–∑—É –ø—Ä–∏–≤–µ—Å—Ç–∏ –≤—Å—ë –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç–µ–∫—É—â–µ–º—É dt –∏ –ª–∏–º–∏—Ç–∞–º –¥–ª–∏–Ω—ã
            if self.dt_manager and hasattr(self, "_on_dt_changed"):
                self._on_dt_changed()
            
            # –ñ—ë—Å—Ç–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ª–∏–º–∏—Ç–æ–≤ –¥–ª–∏–Ω—ã —á–µ—Ä–µ–∑ PredictionManager
            if self.manual_spore_manager and hasattr(self.manual_spore_manager, "prediction_manager"):
                pm = self.manual_spore_manager.prediction_manager
                if hasattr(pm, "update_links_max_length"):
                    max_len = self.dt_manager.get_max_link_length() if self.dt_manager else None
                    print(f"[IM] –ñ—ë—Å—Ç–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: applying max_len={max_len} to {len(getattr(pm,'prediction_links',[]))} prediction_links")
                    pm.update_links_max_length(max_len)
            
            # üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–û–°–õ–ï –°–ü–ê–†–ò–í–ê–ù–ò–Ø: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞
            if self.debug_ghost_tree:
                print(f"\nüîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–û–°–õ–ï –°–ü–ê–†–ò–í–ê–ù–ò–Ø:")
                
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –ø—Ä–∏–∑—Ä–∞—á–Ω–æ–µ –¥–µ—Ä–µ–≤–æ
                if hasattr(self.manual_spore_manager, 'prediction_manager') and self.manual_spore_manager.prediction_manager:
                    pred_manager = self.manual_spore_manager.prediction_manager
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º dt_vector
                    if hasattr(self.manual_spore_manager, 'ghost_tree_dt_vector') and self.manual_spore_manager.ghost_tree_dt_vector is not None:
                        dt_vector = self.manual_spore_manager.ghost_tree_dt_vector
                        print(f"   üìä ghost_tree_dt_vector:")
                        print(f"      –î–µ—Ç–∏ (0:4): {dt_vector[:4]} (–ù–ï –ò–ó–ú–ï–ù–ï–ù–´ - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ)")
                        print(f"      –í–Ω—É–∫–∏ (4:12): {dt_vector[4:12]} (–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–´)")
                        
                        # üîç –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï: –î–µ—Ç–∏ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å
                        print(f"   üîç –ê–ù–ê–õ–ò–ó dt –¥–µ—Ç–µ–π:")
                        for i, dt in enumerate(dt_vector[:4]):
                            print(f"      –†–µ–±–µ–Ω–æ–∫ {i}: dt = {dt:+.6f} (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π)")
                        
                        # üîç –°–†–ê–í–ù–ï–ù–ò–ï dt –¥–µ—Ç–µ–π –î–û –∏ –ü–û–°–õ–ï
                        if hasattr(self, '_children_dt_before') and self._children_dt_before is not None:
                            print(f"   üîç –°–†–ê–í–ù–ï–ù–ò–ï dt –¥–µ—Ç–µ–π:")
                            for i, (dt_before, dt_after) in enumerate(zip(self._children_dt_before, dt_vector[:4])):
                                if abs(dt_before - dt_after) < 1e-10:
                                    print(f"      –†–µ–±–µ–Ω–æ–∫ {i}: dt = {dt_before:+.6f} ‚Üí {dt_after:+.6f} ‚úÖ –ù–ï –ò–ó–ú–ï–ù–ò–õ–°–Ø")
                                else:
                                    print(f"      –†–µ–±–µ–Ω–æ–∫ {i}: dt = {dt_before:+.6f} ‚Üí {dt_after:+.6f} üîÑ –ò–ó–ú–ï–ù–ò–õ–°–Ø!")
                        else:
                            print(f"   üîç –°–†–ê–í–ù–ï–ù–ò–ï dt –¥–µ—Ç–µ–π: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –î–û –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–∑—Ä–∞–∫–æ–≤
                    if hasattr(pred_manager, 'prediction_visualizers'):
                        ghost_count = len([v for v in pred_manager.prediction_visualizers if v.ghost_spore])
                        print(f"   üëª –ü—Ä–∏–∑—Ä–∞—á–Ω—ã—Ö —Å–ø–æ—Ä: {ghost_count}")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏–Ω–∫–æ–≤
                    if hasattr(pred_manager, 'prediction_links'):
                        print(f"   üîó –ü—Ä–∏–∑—Ä–∞—á–Ω—ã—Ö –ª–∏–Ω–∫–æ–≤: {len(pred_manager.prediction_links)}")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –≤—Å–µ—Ö –ø—Ä–∏–∑—Ä–∞–∫–æ–≤
                    if hasattr(pred_manager, 'prediction_visualizers'):
                        print(f"   üìç –ü–æ–∑–∏—Ü–∏–∏ –ø—Ä–∏–∑—Ä–∞–∫–æ–≤:")
                        for i, viz in enumerate(pred_manager.prediction_visualizers):
                            if viz.ghost_spore:
                                pos = (viz.ghost_spore.x, viz.ghost_spore.z)
                                print(f"      –ü—Ä–∏–∑—Ä–∞–∫ {i}: {pos}")
                        
                        # üîç –î–ï–¢–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –í–ò–ó–£–ê–õ–¨–ù–´–• –û–ë–™–ï–ö–¢–û–í
                        print(f"   üîç –î–ï–¢–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –í–ò–ó–£–ê–õ–¨–ù–´–• –û–ë–™–ï–ö–¢–û–í:")
                        for i, viz in enumerate(pred_manager.prediction_visualizers):
                            if viz.ghost_spore:
                                print(f"      –ü—Ä–∏–∑—Ä–∞–∫ {i}:")
                                print(f"         ID: {viz.id}")
                                print(f"         –ü–æ–∑–∏—Ü–∏—è: ({viz.ghost_spore.x:.6f}, {viz.ghost_spore.z:.6f})")
                                print(f"         real_position: {viz.ghost_spore.real_position}")
                                print(f"         enabled: {viz.ghost_spore.enabled}")
                                if hasattr(viz.ghost_spore, 'logic'):
                                    print(f"         logic.position_2d: {viz.ghost_spore.logic.position_2d}")
                                print(f"         –¢–∏–ø: {type(viz.ghost_spore)}")
                else:
                    print(f"   ‚ùå PredictionManager –Ω–µ –Ω–∞–π–¥–µ–Ω")
                
                print(f"üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê\n")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä: {e}")
            import traceback
            traceback.print_exc()

    def _on_dt_changed(self):
        """
        –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ä–µ–∞–∫—Ü–∏—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ dt:
        - –°–ù–ê–ß–ê–õ–ê –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º ghost_tree_dt_vector (–µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å),
        - –ø–æ—Ç–æ–º –ø–µ—Ä–µ—Å–æ–±–∏—Ä–∞–µ–º –ø—Ä–∏–∑—Ä–∞—á–Ω–æ–µ –¥–µ—Ä–µ–≤–æ,
        - –ø—Ä–∏–º–µ–Ω—è–µ–º –ª–∏–º–∏—Ç –¥–ª–∏–Ω—ã –∫–æ –≤—Å–µ–º –ª–∏–Ω–∫–∞–º.
        """
        try:
            # 0) –°–ù–ê–ß–ê–õ–ê: –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º dt-–≤–µ–∫—Ç–æ—Ä —Å–ø–∞—Ä–µ–Ω–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞ –ø–æ–¥ –Ω–æ–≤—ã–π dt
            if (self.manual_spore_manager 
                and getattr(self.manual_spore_manager, "ghost_tree_dt_vector", None) is not None
                and getattr(self.manual_spore_manager, "ghost_dt_baseline", None) is not None
                and self.dt_manager):
                
                import numpy as np
                old_vec = self.manual_spore_manager.ghost_tree_dt_vector
                old_base = float(self.manual_spore_manager.ghost_dt_baseline)
                new_base = float(self.dt_manager.get_dt())
                print(f"[InputManager._on_dt_changed] scale ghost dt-vector: baseline {old_base:.6f} -> {new_base:.6f}")

                if old_base > 0:
                    k = new_base / old_base
                    before_sample = old_vec.copy()
                    scaled = np.sign(old_vec) * (np.abs(old_vec) * k)
                    self.manual_spore_manager.ghost_tree_dt_vector = scaled
                    self.manual_spore_manager.ghost_dt_baseline = new_base

                    # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞: –ø–æ–∫–∞–∂–µ–º –ø–∞—Ä—É –ø–µ—Ä–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –î–û/–ü–û–°–õ–ï
                    def _fmt(arr):
                        return "[" + ", ".join(f"{x:+.6f}" for x in arr[:4]) + (" ..." if len(arr) > 4 else "") + "]"
                    print(f"[InputManager._on_dt_changed] k={k:.6f}")
                    print(f"[InputManager._on_dt_changed] dt_vec before: {_fmt(before_sample)}")
                    print(f"[InputManager._on_dt_changed] dt_vec after : {_fmt(scaled)}")
                else:
                    print("[InputManager._on_dt_changed] WARNING: ghost_dt_baseline == 0, skip scaling.")

            # 1) –ü–µ—Ä–µ—Å–æ–±—Ä–∞—Ç—å –ø—Ä–∏–∑—Ä–∞—á–Ω—ã–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è (–¥–µ—Ç–∏/–≤–Ω—É–∫–∏ –¥–≤–∏–≥–∞—é—Ç—Å—è)
            if self.manual_spore_manager and hasattr(self.manual_spore_manager, "_update_predictions"):
                self.manual_spore_manager.prediction_manager.debug_ghost_tree = True  # –≤—Ä–µ–º–µ–Ω–Ω–æ –≤–∫–ª—é—á–∏–º –ª–æ–≥
                self.manual_spore_manager._update_predictions()
                self.manual_spore_manager.prediction_manager.debug_ghost_tree = False

            # 2) –ü—Ä–∏–º–µ–Ω–∏—Ç—å –Ω–æ–≤—ã–π –ª–∏–º–∏—Ç –¥–ª–∏–Ω—ã –¥–ª—è –í–°–ï–• –ª–∏–Ω–∫–æ–≤
            max_len = None
            if self.dt_manager and hasattr(self.dt_manager, "get_max_link_length"):
                max_len = self.dt_manager.get_max_link_length()

            # 2a) –û–±—ã—á–Ω—ã–µ –ª–∏–Ω–∫–∏ (—á–µ—Ä–µ–∑ SporeManager)
            if self.spore_manager and hasattr(self.spore_manager, "update_links_max_length"):
                self.spore_manager.update_links_max_length(max_len)

            # 2b) –ü—Ä–∏–∑—Ä–∞—á–Ω—ã–µ –ª–∏–Ω–∫–∏ (—á–µ—Ä–µ–∑ PredictionManager)
            if self.manual_spore_manager and hasattr(self.manual_spore_manager, "prediction_manager"):
                pm = self.manual_spore_manager.prediction_manager
                if hasattr(pm, "update_links_max_length"):
                    pm.update_links_max_length(max_len)
                # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –æ–±–Ω–æ–≤–∏–º –≥–µ–æ–º–µ—Ç—Ä–∏—é –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–∑—Ä–∞—á–Ω–æ–≥–æ –ª–∏–Ω–∫–∞
                if hasattr(pm, "prediction_links"):
                    for link in pm.prediction_links:
                        try:
                            link.update_geometry()
                        except Exception:
                            pass

            # 3) –û–±–Ω–æ–≤–∏–º –æ–±—â—É—é —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—é –∑—É–º–∞, —á—Ç–æ–±—ã –≤—Å—ë –ø–æ–¥—Ö–≤–∞—Ç–∏–ª–æ—Å—å
            if self.zoom_manager and hasattr(self.zoom_manager, "update_transform"):
                self.zoom_manager.update_transform()

        except Exception as e:
            print(f"[InputManager] _on_dt_changed error: {e}")

    def _handle_merge_grandchildren(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –≤–Ω—É–∫–æ–≤ –∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏–∑—Ä–∞—á–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã (M)."""
        try:
            print("\n" + "="*60)
            print("üîÑ –ó–ê–ü–£–°–ö –û–ü–ï–†–ê–¶–ò–ò –ú–ï–†–î–ñ–ê –° –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï–ú –ì–†–ê–§–û–í")
            print("="*60)
            
            if not self.manual_spore_manager:
                print("‚ùå ManualSporeManager –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
                
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–∑—Ä–∞—á–Ω—ã–π –≥—Ä–∞—Ñ –∏–∑ PredictionManager
            prediction_manager = getattr(self.manual_spore_manager, 'prediction_manager', None)
            if not prediction_manager:
                print("‚ùå PredictionManager –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
                
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –î–û –æ–ø–µ—Ä–∞—Ü–∏–∏
            print("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –î–û –ú–ï–†–î–ñ–ê:")
            if hasattr(prediction_manager, 'get_ghost_graph_stats'):
                prediction_manager.get_ghost_graph_stats()
            if self.spore_manager and hasattr(self.spore_manager, 'get_graph_stats'):
                self.spore_manager.get_graph_stats()
                
            # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –≤–Ω—É–∫–æ–≤ (—Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –ª–æ–≥–∏–∫–∞)
            tree_creation_manager = getattr(self.manual_spore_manager, 'tree_creation_manager', None)
            if not tree_creation_manager:
                print("‚ùå TreeCreationManager –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
                
            # –ü–æ–ª—É—á–∞–µ–º –ª–æ–≥–∏–∫—É –¥–µ—Ä–µ–≤–∞
            tree_logic = getattr(tree_creation_manager, '_last_tree_logic', None) or \
                        getattr(self.manual_spore_manager, '_last_tree_logic', None)
            
            if not tree_logic:
                print("‚ùå –õ–æ–≥–∏–∫–∞ –¥–µ—Ä–µ–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –°–æ–∑–¥–∞–π—Ç–µ –¥–µ—Ä–µ–≤–æ –ø—Ä–∏–∑—Ä–∞–∫–æ–≤ —Å–Ω–∞—á–∞–ª–∞.")
                return
                
            if not hasattr(tree_logic, 'grandchildren') or len(tree_logic.grandchildren) == 0:
                print("‚ùå –°–ø–∏—Å–æ–∫ –≤–Ω—É–∫–æ–≤ –ø—É—Å—Ç")
                return
                
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –î–û –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è
            print(f"üìä –î–û –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è: {len(tree_logic.grandchildren)} –≤–Ω—É–∫–æ–≤")
            
            # –í—ã–∑—ã–≤–∞–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ
            merge_result = tree_logic.merge_close_grandchildren(distance_threshold=1e-2)
            
            if merge_result['total_merged'] > 0:
                print(f"‚úÖ –û–±—ä–µ–¥–∏–Ω–µ–Ω–æ {merge_result['total_merged']} –ø–∞—Ä –≤–Ω—É–∫–æ–≤")
                print(f"üìä –ü–û–°–õ–ï –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è: {merge_result['remaining_grandchildren']} –≤–Ω—É–∫–æ–≤")
                
                # üîß –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–µ—Ä–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏–∑—Ä–∞—á–Ω—ã–π –≥—Ä–∞—Ñ
                print("\nüîÑ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –ü–†–ò–ó–†–ê–ß–ù–û–ì–û –ì–†–ê–§–ê –° –û–ë–™–ï–î–ò–ù–ï–ù–ò–Ø–ú–ò:")
                if hasattr(prediction_manager, 'clear_predictions'):
                    prediction_manager.clear_predictions()
                    print("   üßπ –û—á–∏—â–µ–Ω—ã —Å—Ç–∞—Ä—ã–µ –ø—Ä–∏–∑—Ä–∞—á–Ω—ã–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è")

                # –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –ø—Ä–∏–∑—Ä–∞—á–Ω—ã–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —Å –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
                if hasattr(self.manual_spore_manager, '_update_predictions'):
                    self.manual_spore_manager._update_predictions()
                    print("   üîÑ –ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω—ã –ø—Ä–∏–∑—Ä–∞—á–Ω—ã–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —Å –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è–º–∏")
                else:
                    print("   ‚ö†Ô∏è –ú–µ—Ç–æ–¥ _update_predictions –Ω–µ –Ω–∞–π–¥–µ–Ω")
                
                # –ù–û–í–û–ï: –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–∑—Ä–∞—á–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∞
                if (hasattr(prediction_manager, 'ghost_graph') and 
                    hasattr(prediction_manager.ghost_graph, 'create_debug_visualization')):
                    
                    print("\nüîç –°–û–ó–î–ê–ù–ò–ï –û–¢–õ–ê–î–û–ß–ù–û–ô –í–ò–ó–£–ê–õ–ò–ó–ê–¶–ò–ò –ü–†–ò–ó–†–ê–ß–ù–û–ì–û –ì–†–ê–§–ê:")
                    ghost_viz_path = prediction_manager.ghost_graph.create_debug_visualization("ghost_graph_debug")
                    
                    if ghost_viz_path:
                        print(f"üëÅÔ∏è –û—Ç–∫—Ä–æ–π—Ç–µ —Ñ–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: {ghost_viz_path}")
                    
                    # –í—ã–≤–æ–¥–∏–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–∏–∑—Ä–∞—á–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∞ –≤ –∫–æ–Ω—Å–æ–ª—å
                    if hasattr(prediction_manager.ghost_graph, 'print_graph_structure'):
                        prediction_manager.ghost_graph.print_graph_structure()
                    
                    # –¢–∞–∫–∂–µ —Å–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                    if (self.spore_manager and hasattr(self.spore_manager, 'graph') and
                        hasattr(self.spore_manager.graph, 'create_debug_visualization')):
                        real_viz_path = self.spore_manager.graph.create_debug_visualization("real_graph_debug")
                        if real_viz_path:
                            print(f"üëÅÔ∏è –†–µ–∞–ª—å–Ω—ã–π –≥—Ä–∞—Ñ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è: {real_viz_path}")
                            
                        # –í—ã–≤–æ–¥–∏–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∞
                        if hasattr(self.spore_manager.graph, 'print_graph_structure'):
                            self.spore_manager.graph.print_graph_structure()
                    
                else:
                    print("‚ùå –ü—Ä–∏–∑—Ä–∞—á–Ω—ã–π –≥—Ä–∞—Ñ –∏–ª–∏ –º–µ—Ç–æ–¥ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                
                # üîß –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –û–ß–ò–°–¢–ö–ê –ò –ü–ï–†–ï–°–û–ó–î–ê–ù–ò–ï –ü–†–ò–ó–†–ê–ß–ù–û–ì–û –ì–†–ê–§–ê
                print("\nüîß –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –û–ß–ò–°–¢–ö–ê –ü–†–ò–ó–†–ê–ß–ù–û–ì–û –ì–†–ê–§–ê:")
                if hasattr(prediction_manager, 'ghost_graph') and prediction_manager.ghost_graph:
                    old_nodes = len(prediction_manager.ghost_graph.nodes)
                    prediction_manager.ghost_graph.clear()
                    print(f"   üßπ –û—á–∏—â–µ–Ω –ø—Ä–∏–∑—Ä–∞—á–Ω—ã–π –≥—Ä–∞—Ñ: {old_nodes} —É–∑–ª–æ–≤ —É–¥–∞–ª–µ–Ω–æ")

                # –û—á–∏—â–∞–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
                if hasattr(prediction_manager, 'clear_predictions'):
                    prediction_manager.clear_predictions()
                    print("   üßπ –û—á–∏—â–µ–Ω—ã –≤–∏–∑—É–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è")

                # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –ø—Ä–∏–∑—Ä–∞—á–Ω—ã–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —Å –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
                if hasattr(self.manual_spore_manager, '_update_predictions'):
                    print("   üîÑ –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –ø—Ä–∏–∑—Ä–∞—á–Ω—ã–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è...")
                    self.manual_spore_manager._update_predictions()
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    if hasattr(prediction_manager, 'ghost_graph') and prediction_manager.ghost_graph:
                        new_nodes = len(prediction_manager.ghost_graph.nodes)
                        print(f"   ‚úÖ –ù–æ–≤—ã–π –ø—Ä–∏–∑—Ä–∞—á–Ω—ã–π –≥—Ä–∞—Ñ: {new_nodes} —É–∑–ª–æ–≤")
                        # –û–∂–∏–¥–∞–µ–º: 1 –∫–æ—Ä–µ–Ω—å + 4 —Ä–µ–±–µ–Ω–∫–∞ + 4 –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã—Ö –≤–Ω—É–∫–∞ = 9 —É–∑–ª–æ–≤
                        expected = 9
                        if new_nodes == expected:
                            print(f"   ‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–∑–ª–æ–≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ (–æ–∂–∏–¥–∞–ª–æ—Å—å {expected})")
                        else:
                            print(f"   ‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–∑–ª–æ–≤: {new_nodes} (–æ–∂–∏–¥–∞–ª–æ—Å—å {expected})")
                    else:
                        print("   ‚ùå –ü—Ä–∏–∑—Ä–∞—á–Ω—ã–π –≥—Ä–∞—Ñ –Ω–µ –±—ã–ª –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω")
                else:
                    print("   ‚ùå –ú–µ—Ç–æ–¥ _update_predictions –Ω–µ –Ω–∞–π–¥–µ–Ω")

                print("üîÑ –ü—Ä–∏–∑—Ä–∞—á–Ω—ã–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
                
            else:
                print("üìä –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è - –≤—Å–µ –≤–Ω—É–∫–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–ª–µ–∫–æ (> 1e-2)")
                
            # üîç –ü–†–û–í–ï–†–ö–ê –î–£–ë–õ–ò–†–û–í–ê–ù–ò–ô –í –ü–†–ò–ó–†–ê–ß–ù–û–ú –ì–†–ê–§–ï:
            print("\nüîç –ü–†–û–í–ï–†–ö–ê –î–£–ë–õ–ò–†–û–í–ê–ù–ò–ô –í –ü–†–ò–ó–†–ê–ß–ù–û–ú –ì–†–ê–§–ï:")
            if hasattr(prediction_manager, 'ghost_graph') and prediction_manager.ghost_graph:
                node_count = len(prediction_manager.ghost_graph.nodes)
                edge_count = len(prediction_manager.ghost_graph.edges)
                print(f"üìä –£–∑–ª–æ–≤ –≤ –ø—Ä–∏–∑—Ä–∞—á–Ω–æ–º –≥—Ä–∞—Ñ–µ: {node_count}")
                print(f"üìä –°–≤—è–∑–µ–π –≤ –ø—Ä–∏–∑—Ä–∞—á–Ω–æ–º –≥—Ä–∞—Ñ–µ: {edge_count}")
                
                # –û–∂–∏–¥–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è: 1 –∫–æ—Ä–µ–Ω—å + 4 —Ä–µ–±–µ–Ω–∫–∞ + 4 –≤–Ω—É–∫–∞ = 9
                expected_nodes = 9  
                if node_count == expected_nodes:
                    print(f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–∑–ª–æ–≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ: {node_count} (–æ–∂–∏–¥–∞–ª–æ—Å—å {expected_nodes})")
                else:
                    print(f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–∑–ª–æ–≤: {node_count} (–æ–∂–∏–¥–∞–ª–æ—Å—å {expected_nodes})")
                    print(f"   –í–æ–∑–º–æ–∂–Ω—ã–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è: {node_count - expected_nodes}")
            else:
                print("‚ùå –ü—Ä–∏–∑—Ä–∞—á–Ω—ã–π –≥—Ä–∞—Ñ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
                
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ü–û–°–õ–ï –æ–ø–µ—Ä–∞—Ü–∏–∏  
            print("\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û–°–õ–ï –ú–ï–†–î–ñ–ê:")
            if hasattr(prediction_manager, 'get_ghost_graph_stats'):
                prediction_manager.get_ghost_graph_stats()
            if self.spore_manager and hasattr(self.spore_manager, 'get_graph_stats'):
                self.spore_manager.get_graph_stats()
                
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º debug –∫–∞—Ä—Ç–∏–Ω–∫—É
            if hasattr(tree_logic, 'debug_plot_tree'):
                save_path = tree_logic.debug_plot_tree()
                print(f"üíæ Debug –∫–∞—Ä—Ç–∏–Ω–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {save_path}")
            else:
                print("‚ö†Ô∏è –ú–µ—Ç–æ–¥ debug_plot_tree –Ω–µ –Ω–∞–π–¥–µ–Ω")
                
            print("="*60)
            print("‚úÖ –û–ü–ï–†–ê–¶–ò–Ø –ú–ï–†–î–ñ–ê –ó–ê–í–ï–†–®–ï–ù–ê")
            print("="*60)
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ –º–µ—Ä–¥–∂–∞: {e}")
            import traceback
            traceback.print_exc()

    def _handle_all_graph_stats(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤—Å–µ—Ö –≥—Ä–∞—Ñ–æ–≤ —Å–≤—è–∑–µ–π (L)."""
        try:
            print("\n" + "="*60)
            print("üìä –ü–û–õ–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ì–†–ê–§–û–í –°–í–Ø–ó–ï–ô")
            print("="*60)
            
            # –†–µ–∞–ª—å–Ω—ã–π –≥—Ä–∞—Ñ
            if self.spore_manager and hasattr(self.spore_manager, 'graph'):
                self.spore_manager.get_graph_stats()
            else:
                print("‚ùå –†–µ–∞–ª—å–Ω—ã–π –≥—Ä–∞—Ñ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                
            # –ü—Ä–∏–∑—Ä–∞—á–Ω—ã–π –≥—Ä–∞—Ñ
            if (self.manual_spore_manager and 
                hasattr(self.manual_spore_manager, 'prediction_manager') and
                hasattr(self.manual_spore_manager.prediction_manager, 'get_ghost_graph_stats')):
                self.manual_spore_manager.prediction_manager.get_ghost_graph_stats()
            else:
                print("‚ùå –ü—Ä–∏–∑—Ä–∞—á–Ω—ã–π –≥—Ä–∞—Ñ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                
            # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º–∏
            print(f"\nüìã –°–†–ê–í–ù–ï–ù–ò–ï –° –ú–ï–ù–ï–î–ñ–ï–†–ê–ú–ò:")
            if self.spore_manager:
                print(f"   üî∏ –°–ø–æ—Ä –≤ SporeManager: {len(self.spore_manager.objects)}")
                print(f"   üîó –õ–∏–Ω–∫–æ–≤ –≤ SporeManager: {len(self.spore_manager.links)}")
            if (self.manual_spore_manager and 
                hasattr(self.manual_spore_manager, 'prediction_manager')):
                pm = self.manual_spore_manager.prediction_manager
                if hasattr(pm, 'prediction_links'):
                    print(f"   üëª –ü—Ä–∏–∑—Ä–∞—á–Ω—ã—Ö –ª–∏–Ω–∫–æ–≤: {len(pm.prediction_links)}")
                    
            print("="*60)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≥—Ä–∞—Ñ–æ–≤: {e}")
            import traceback
            traceback.print_exc()

    def _handle_clear_all_graphs(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—á–∏—Å—Ç–∫–∏ –≤—Å–µ—Ö –≥—Ä–∞—Ñ–æ–≤ (Shift+L)."""
        try:
            if self.manual_spore_manager:
                print("\nüßπ –û–ß–ò–°–¢–ö–ê –í–°–ï–• –ì–†–ê–§–û–í –°–í–Ø–ó–ï–ô")
                self.manual_spore_manager.clear_all_graphs()
            else:
                print("‚ùå ManualSporeManager –Ω–µ –Ω–∞–π–¥–µ–Ω")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –≥—Ä–∞—Ñ–æ–≤: {e}")

    def _handle_id_diagnostics(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã spore_id/link_id (Ctrl+I)."""
        if self.spore_manager:
            self.spore_manager.print_id_diagnostics()
        else:
            print("‚ùå SporeManager –Ω–µ –Ω–∞–π–¥–µ–Ω")

    def _handle_graph_consistency(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –≥—Ä–∞—Ñ vs –æ–±—ä–µ–∫—Ç—ã (Ctrl+Shift+I)."""
        if self.spore_manager:
            self.spore_manager.check_graph_id_consistency()
        else:
            print("‚ùå SporeManager –Ω–µ –Ω–∞–π–¥–µ–Ω")

    def set_controls_window(self, controls_window: 'ControlsWindow'):
        """
        –°–≤—è–∑—ã–≤–∞–µ—Ç –æ–∫–Ω–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å InputManager.
        
        Args:
            controls_window: –≠–∫–∑–µ–º–ø–ª—è—Ä ControlsWindow –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥
        """
        self.controls_window = controls_window
        print("üìã Controls window linked to InputManager")

    def _handle_toggle_controls(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤–∏–¥–∏–º–æ—Å—Ç–∏ –æ–∫–Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è."""
        if self.controls_window:
            self.controls_window.toggle_visibility()
        else:
            print("‚ö†Ô∏è Controls window not initialized")

    def _handle_valence_analysis(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–Ω–∞–ª–∏–∑–∞ –≤–∞–ª–µ–Ω—Ç–Ω–æ—Å—Ç–∏ (V)."""
        if not self.spore_manager:
            print("‚ùå SporeManager –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º ValenceManager
            from ..managers.valence_manager import ValenceManager

            # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –≤–∞–ª–µ–Ω—Ç–Ω–æ—Å—Ç–∏
            valence_manager = ValenceManager(spore_manager=self.spore_manager)

            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å–ø–æ—Ä—É –ø–æ–¥ –∫—É—Ä—Å–æ—Ä–æ–º —á–µ—Ä–µ–∑ PickerManager
            target_spore_id = None

            if self.picker_manager:
                closest_spore = self.picker_manager.get_closest_spore()
                if closest_spore:
                    target_spore_id = closest_spore['id']
                    print(f"üéØ –ê–Ω–∞–ª–∏–∑ —Å–ø–æ—Ä—ã –ø–æ–¥ –∫—É—Ä—Å–æ—Ä–æ–º: {target_spore_id}")

            # –ï—Å–ª–∏ PickerManager –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –Ω–µ –Ω–∞—à–µ–ª —Å–ø–æ—Ä—É, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—É—é —Å–ø–æ—Ä—É –≤ –≥—Ä–∞—Ñ–µ
            if not target_spore_id:
                all_spore_ids = list(self.spore_manager.graph.nodes.keys())

                if not all_spore_ids:
                    print("‚ùå –í –≥—Ä–∞—Ñ–µ –Ω–µ—Ç —Å–ø–æ—Ä –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
                    return

                target_spore_id = all_spore_ids[0]
                print(f"‚ÑπÔ∏è PickerManager –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∞–Ω–∞–ª–∏–∑ –ø–µ—Ä–≤–æ–π —Å–ø–æ—Ä—ã –≤ –≥—Ä–∞—Ñ–µ: {target_spore_id}")

            print(f"\nüî¨ –ê–ù–ê–õ–ò–ó –í–ê–õ–ï–ù–¢–ù–û–°–¢–ò –°–ü–û–†–´ {target_spore_id}")
            print("=" * 60)

            # –í—ã–≤–æ–¥–∏–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å–ø–æ—Ä—ã
            valence_manager.print_valence_report(target_spore_id)

            # –í—ã–≤–æ–¥–∏–º —Å–≤–æ–¥–∫—É –ø–æ –≤—Å–µ–º—É –≥—Ä–∞—Ñ—É
            print("\n" + "=" * 60)
            valence_manager.print_graph_valence_summary()
            print("=" * 60)

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –≤–∞–ª–µ–Ω—Ç–Ω–æ—Å—Ç–∏: {e}")
            import traceback
            traceback.print_exc()