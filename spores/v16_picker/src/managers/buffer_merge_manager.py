"""
BufferMergeManager - –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –º–µ—Ä–¥–∂–∞ —Å–ø–æ—Ä –ø–æ –∫–ª–∞–≤–∏—à–µ M
"""

import numpy as np
from typing import Dict, List, Optional, Tuple
import matplotlib.pyplot as plt
import os
from ..core.spore_graph import SporeGraph


class BufferMergeManager:
    """
    –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –±–ª–∏–∑–∫–∏—Ö —Å–ø–æ—Ä –∏–∑ –ø—Ä–∏–∑—Ä–∞—á–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞ –≤
    –±—É—Ñ–µ—Ä–Ω—ã–π –≥—Ä–∞—Ñ.

    –ê–ª–≥–æ—Ä–∏—Ç–º:
    1. –°–æ–∑–¥–∞–µ—Ç –±—É—Ñ–µ—Ä–Ω—ã–π –≥—Ä–∞—Ñ
    2. –ö–æ–ø–∏—Ä—É–µ—Ç —Å–ø–æ—Ä—ã –ø–æ –ø–æ—Ä—è–¥–∫—É: –∫–æ—Ä–µ–Ω—å ‚Üí –¥–µ—Ç–∏ ‚Üí –≤–Ω—É–∫–∏
    3. –î–ª—è –∫–∞–∂–¥–æ–π —Å–ø–æ—Ä—ã –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –±–ª–∏–∑–æ—Å—Ç—å –≤ –±—É—Ñ–µ—Ä–µ (1.5e-3)
    4. –î–æ–±–∞–≤–ª—è–µ—Ç —Å–ø–æ—Ä—É –ò–õ–ò —Å–æ–∑–¥–∞–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π
    5. –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–∞—Ä—Ç–∏–Ω–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    """

    def __init__(self, distance_threshold: float = 1.5e-3):
        self.distance_threshold = distance_threshold

        # üîç –§–ª–∞–≥ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Å–≤—è–∑–µ–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—ã–∫–ª—é—á–µ–Ω)
        self._investigate_links = True  # –í–∫–ª—é—á–∏—Ç—å –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        self._manual_spore_manager_ref = None  # –ë—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–∑–≤–Ω–µ

        # –ë—É—Ñ–µ—Ä–Ω—ã–π –≥—Ä–∞—Ñ –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã—Ö —Å–ø–æ—Ä
        self.buffer_graph = SporeGraph('buffer')

        # –î–≤—É—Å—Ç–æ—Ä–æ–Ω–Ω—è—è –∫–∞—Ä—Ç–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π
        self.ghost_to_buffer: Dict[str, str] = {}  # ghost_id -> buffer_id
        # buffer_id -> [ghost_ids]
        self.buffer_to_ghosts: Dict[str, List[str]] = {}

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            'total_processed': 0,
            'added_to_buffer': 0,
            'merged_to_existing': 0,
            'processing_order': []
        }

        print(f"üîÑ BufferMergeManager —Å–æ–∑–¥–∞–Ω (—Ç—Ä–µ—à—Ö–æ–ª–¥: {distance_threshold})")

    def merge_ghost_tree(self, tree_logic, save_image: bool = True) -> Dict:
        """
        –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥: –º–µ—Ä–¥–∂–∏—Ç –ø—Ä–∏–∑—Ä–∞—á–Ω–æ–µ –¥–µ—Ä–µ–≤–æ –≤ –±—É—Ñ–µ—Ä–Ω—ã–π –≥—Ä–∞—Ñ.

        Args:
            tree_logic: SporeTree —Å –≥–æ—Ç–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
            save_image: —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –ª–∏ –∫–∞—Ä—Ç–∏–Ω–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞

        Returns:
            dict: —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–µ—Ä–¥–∂–∞
        """
        print("\nüîÑ –ù–ê–ß–ê–õ–û –ú–ï–†–î–ñ–ê –ü–†–ò–ó–†–ê–ß–ù–û–ì–û –î–ï–†–ï–í–ê")

        # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        self._reset()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if not self._validate_tree_logic(tree_logic):
            return self._get_error_result("–ù–µ–≤–∞–ª–∏–¥–Ω–æ–µ –ø—Ä–∏–∑—Ä–∞—á–Ω–æ–µ –¥–µ—Ä–µ–≤–æ")

        # üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ò—Å—Å–ª–µ–¥—É–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏ —Å–≤—è–∑–µ–π
        if hasattr(self, '_investigate_links') and self._investigate_links:
            # –ü–æ–ª—É—á–∞–µ–º manual_spore_manager –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è prediction_manager
            manual_spore_manager = getattr(self, '_manual_spore_manager_ref', None)
            self._investigate_link_sources(tree_logic, manual_spore_manager)

        try:
            # 1. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ—Ä–µ–Ω—å
            self._process_root(tree_logic)

            # 2. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–µ—Ç–µ–π
            self._process_children(tree_logic)

            # 3. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–Ω—É–∫–æ–≤
            self._process_grandchildren(tree_logic)

            # 4. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if save_image:
                image_path = self._save_buffer_image()
                self.stats['image_path'] = image_path

            # 5. –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self._print_final_stats()

            return self._get_success_result()

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –º–µ—Ä–¥–∂–∞: {e}")
            import traceback
            traceback.print_exc()
            return self._get_error_result(str(e))

    def _reset(self):
        """–û—á–∏—â–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –º–µ—Ä–¥–∂–∞."""
        self.buffer_graph.clear()
        self.ghost_to_buffer.clear()
        self.buffer_to_ghosts.clear()
        self.stats = {
            'total_processed': 0,
            'added_to_buffer': 0,
            'merged_to_existing': 0,
            'processing_order': []
        }

    def _validate_tree_logic(self, tree_logic) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ tree_logic –≥–æ—Ç–æ–≤ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ."""
        if not tree_logic:
            print("‚ùå tree_logic is None")
            return False

        if not hasattr(tree_logic, 'root') or not tree_logic.root:
            print("‚ùå –ö–æ—Ä–µ–Ω—å –¥–µ—Ä–µ–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False

        if (not hasattr(tree_logic, '_children_created') or
                not tree_logic._children_created):
            print("‚ùå –î–µ—Ç–∏ –¥–µ—Ä–µ–≤–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã")
            return False

        return True

    def _investigate_link_sources(self, tree_logic, manual_spore_manager=None):
        """
        –î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–ò–ô –ú–ï–¢–û–î: –ò—Å—Å–ª–µ–¥—É–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–≤—è–∑—è—Ö.
        """
        print("\nüîç –ò–°–°–õ–ï–î–û–í–ê–ù–ò–ï –ò–°–¢–û–ß–ù–ò–ö–û–í –°–í–Ø–ó–ï–ô:")

        # 1. –ò—Å—Å–ª–µ–¥—É–µ–º tree_logic
        print("\nüìä 1. TREE_LOGIC:")
        print(f"   üìç –ö–æ—Ä–µ–Ω—å: {tree_logic.root}")
        
        if hasattr(tree_logic, 'children') and tree_logic.children:
            print(f"   üë∂ –î–µ—Ç–µ–π: {len(tree_logic.children)}")
            for i, child in enumerate(tree_logic.children[:2]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã—Ö 2
                print(f"      –†–µ–±–µ–Ω–æ–∫ {i}: pos={child.get('position', '–Ω–µ—Ç')}, "
                      f"dt={child.get('dt', '–Ω–µ—Ç')}, "
                      f"control={child.get('control', '–Ω–µ—Ç')}")
        
        if hasattr(tree_logic, 'grandchildren') and tree_logic.grandchildren:
            print(f"   üë∂üë∂ –í–Ω—É–∫–æ–≤: {len(tree_logic.grandchildren)}")
            for i, grandchild in enumerate(tree_logic.grandchildren[:2]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã—Ö 2
                print(f"      –í–Ω—É–∫ {i}: pos={grandchild.get('position', '–Ω–µ—Ç')}, "
                      f"dt={grandchild.get('dt', '–Ω–µ—Ç')}, control={grandchild.get('control', '–Ω–µ—Ç')}, "
                      f"parent_idx={grandchild.get('parent_idx', '–Ω–µ—Ç')}")
        
        # 2. –ò—Å—Å–ª–µ–¥—É–µ–º prediction_manager
        if manual_spore_manager and hasattr(manual_spore_manager, 'prediction_manager'):
            prediction_manager = manual_spore_manager.prediction_manager
            print(f"\nüìä 2. PREDICTION_MANAGER:")
            
            if hasattr(prediction_manager, 'ghost_graph'):
                ghost_graph = prediction_manager.ghost_graph
                print(f"   üëª Ghost graph: {len(ghost_graph.nodes)} —É–∑–ª–æ–≤, {len(ghost_graph.edges)} —Å–≤—è–∑–µ–π")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–≤—è–∑–µ–π
                edge_count = 0
                for edge_key, edge_info in ghost_graph.edges.items():
                    if edge_count < 3:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                        print(f"      –°–≤—è–∑—å {edge_count}: {edge_key} -> type={edge_info.link_type}")
                        edge_count += 1
            
            if hasattr(prediction_manager, 'prediction_links'):
                links = prediction_manager.prediction_links
                print(f"   üîó Prediction links: {len(links)} –ª–∏–Ω–∫–æ–≤")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ª–∏–Ω–∫–æ–≤
                for i, link in enumerate(links[:3]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                    parent_id = getattr(link.parent_spore, 'id', '–Ω–µ—Ç') if hasattr(link, 'parent_spore') else '–Ω–µ—Ç'
                    child_id = getattr(link.child_spore, 'id', '–Ω–µ—Ç') if hasattr(link, 'child_spore') else '–Ω–µ—Ç'
                    color = getattr(link, 'current_color', '–Ω–µ—Ç') if hasattr(link, 'current_color') else '–Ω–µ—Ç'
                    print(f"      –õ–∏–Ω–∫ {i}: {parent_id} -> {child_id}, —Ü–≤–µ—Ç={color}")
        
        # 3. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è
        print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        
        has_tree_structure = (hasattr(tree_logic, 'children') and tree_logic.children and 
                             hasattr(tree_logic, 'grandchildren') and tree_logic.grandchildren)
        
        has_prediction_links = (manual_spore_manager and 
                               hasattr(manual_spore_manager, 'prediction_manager') and
                               hasattr(manual_spore_manager.prediction_manager, 'prediction_links'))
        
        if has_tree_structure:
            print(f"   ‚úÖ tree_logic —Å–æ–¥–µ—Ä–∂–∏—Ç —á–µ—Ç–∫—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É parent-child")
            print(f"   üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å tree_logic –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π –∏—Å—Ç–æ—á–Ω–∏–∫")
        
        if has_prediction_links:
            print(f"   ‚úÖ prediction_manager —Å–æ–¥–µ—Ä–∂–∏—Ç –≥–æ—Ç–æ–≤—ã–µ —Å–≤—è–∑–∏ —Å —Ü–≤–µ—Ç–∞–º–∏/–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏")  
            print(f"   üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å prediction_manager –¥–ª—è —Ç–∏–ø–æ–≤ —Å–≤—è–∑–µ–π")
        
        if has_tree_structure and has_prediction_links:
            print(f"   üéØ –õ–£–ß–®–ò–ô –ü–õ–ê–ù: –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏–∑ tree_logic + —Ü–≤–µ—Ç–∞/—Ç–∏–ø—ã –∏–∑ prediction_manager")

    def _process_root(self, tree_logic):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ—Ä–µ–Ω—å –¥–µ—Ä–µ–≤–∞."""
        print("\nüìç –û–ë–†–ê–ë–û–¢–ö–ê –ö–û–†–ù–Ø")

        root_data = tree_logic.root
        root_position = np.array(root_data['position'])

        # –ö–æ—Ä–µ–Ω—å –≤—Å–µ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –≤ –±—É—Ñ–µ—Ä–Ω—ã–π –≥—Ä–∞—Ñ (–ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç)
        buffer_id = "buffer_root"
        ghost_id = "ghost_root"

        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –±—É—Ñ–µ—Ä–Ω–æ–º –≥—Ä–∞—Ñ–µ (–ø–æ–∫–∞ –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–π —Å–ø–æ—Ä—ã)
        self._add_to_buffer_graph(buffer_id, ghost_id, root_position)

        self.stats['total_processed'] += 1
        self.stats['added_to_buffer'] += 1
        self.stats['processing_order'].append(f"root({ghost_id}‚Üí{buffer_id})")

        print(f"   ‚úÖ –ö–æ—Ä–µ–Ω—å –¥–æ–±–∞–≤–ª–µ–Ω: {ghost_id} ‚Üí {buffer_id}")
        print(f"   üìç –ü–æ–∑–∏—Ü–∏—è: ({root_position[0]:.4f}, {root_position[1]:.4f})")

    def _process_children(self, tree_logic):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–µ—Ç–µ–π –¥–µ—Ä–µ–≤–∞."""
        print("\nüë∂ –û–ë–†–ê–ë–û–¢–ö–ê –î–ï–¢–ï–ô")

        if not hasattr(tree_logic, 'children') or not tree_logic.children:
            print("   ‚è≠Ô∏è –î–µ—Ç–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
            return

        for i, child_data in enumerate(tree_logic.children):
            child_position = np.array(child_data['position'])
            ghost_id = f"ghost_child_{i}"

            print(f"\n   üîç –†–µ–±–µ–Ω–æ–∫ {i}: {ghost_id}")
            print(f"      üìç –ü–æ–∑–∏—Ü–∏—è: ({child_position[0]:.4f}, {child_position[1]:.4f})")

            # –ò—â–µ–º –±–ª–∏–∂–∞–π—à—É—é —Å–ø–æ—Ä—É –≤ –±—É—Ñ–µ—Ä–Ω–æ–º –≥—Ä–∞—Ñ–µ
            closest_buffer_id, min_distance = self._find_closest_in_buffer(child_position)

            if closest_buffer_id and min_distance < self.distance_threshold:
                # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π
                self._merge_to_existing(ghost_id, closest_buffer_id, min_distance)
                self.stats['merged_to_existing'] += 1
                self.stats['processing_order'].append(
                    f"child_{i}({ghost_id}‚Üí{closest_buffer_id}, "
                    f"d={min_distance:.2e})")
            else:
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é
                buffer_id = f"buffer_child_{i}"
                self._add_to_buffer_graph(buffer_id, ghost_id, child_position)
                self.stats['added_to_buffer'] += 1
                self.stats['processing_order'].append(f"child_{i}({ghost_id}‚Üí{buffer_id})")

            self.stats['total_processed'] += 1

    def _process_grandchildren(self, tree_logic):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–Ω—É–∫–æ–≤ –¥–µ—Ä–µ–≤–∞."""
        print("\nüë∂üë∂ –û–ë–†–ê–ë–û–¢–ö–ê –í–ù–£–ö–û–í")

        if (not hasattr(tree_logic, '_grandchildren_created') or
                not tree_logic._grandchildren_created or
                not hasattr(tree_logic, 'grandchildren') or
                not tree_logic.grandchildren):
            print("   ‚è≠Ô∏è –í–Ω—É–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
            return

        for i, grandchild_data in enumerate(tree_logic.grandchildren):
            grandchild_position = np.array(grandchild_data['position'])
            ghost_id = f"ghost_grandchild_{i}"

            print(f"\n   üîç –í–Ω—É–∫ {i}: {ghost_id}")
            print(f"      üìç –ü–æ–∑–∏—Ü–∏—è: ({grandchild_position[0]:.4f}, "
                  f"{grandchild_position[1]:.4f})")

            # –ò—â–µ–º –±–ª–∏–∂–∞–π—à—É—é —Å–ø–æ—Ä—É –≤ –±—É—Ñ–µ—Ä–Ω–æ–º –≥—Ä–∞—Ñ–µ
            closest_buffer_id, min_distance = self._find_closest_in_buffer(grandchild_position)

            if closest_buffer_id and min_distance < self.distance_threshold:
                # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π
                self._merge_to_existing(ghost_id, closest_buffer_id, min_distance)
                self.stats['merged_to_existing'] += 1
                self.stats['processing_order'].append(
                    f"grandchild_{i}({ghost_id}‚Üí{closest_buffer_id}, "
                    f"d={min_distance:.2e})")
            else:
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é
                buffer_id = f"buffer_grandchild_{i}"
                self._add_to_buffer_graph(buffer_id, ghost_id, grandchild_position)
                self.stats['added_to_buffer'] += 1
                self.stats['processing_order'].append(
                    f"grandchild_{i}({ghost_id}‚Üí{buffer_id})")

            self.stats['total_processed'] += 1

    def _find_closest_in_buffer(self, position: np.ndarray) -> Tuple[Optional[str], float]:
        """
        –ù–∞—Ö–æ–¥–∏—Ç –±–ª–∏–∂–∞–π—à—É—é —Å–ø–æ—Ä—É –≤ –±—É—Ñ–µ—Ä–Ω–æ–º –≥—Ä–∞—Ñ–µ.

        Returns:
            (buffer_id, distance) –∏–ª–∏ (None, float('inf')) –µ—Å–ª–∏ –±—É—Ñ–µ—Ä –ø—É—Å—Ç
        """
        if not self.buffer_positions:
            return None, float('inf')

        min_distance = float('inf')
        closest_buffer_id = None

        for buffer_id, buffer_position in self.buffer_positions.items():
            distance = np.linalg.norm(position - buffer_position)
            if distance < min_distance:
                min_distance = distance
                closest_buffer_id = buffer_id

        return closest_buffer_id, min_distance

    def _add_to_buffer_graph(self, buffer_id: str, ghost_id: str, position: np.ndarray):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é —Å–ø–æ—Ä—É –≤ –±—É—Ñ–µ—Ä–Ω—ã–π –≥—Ä–∞—Ñ."""
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –ø–æ–∏—Å–∫–∞ –±–ª–∏–∑–æ—Å—Ç–∏
        if not hasattr(self, 'buffer_positions'):
            self.buffer_positions = {}
        self.buffer_positions[buffer_id] = position.copy()

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π
        self.ghost_to_buffer[ghost_id] = buffer_id
        if buffer_id not in self.buffer_to_ghosts:
            self.buffer_to_ghosts[buffer_id] = []
        self.buffer_to_ghosts[buffer_id].append(ghost_id)

        print(f"      ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –≤ –±—É—Ñ–µ—Ä: {ghost_id} ‚Üí {buffer_id}")

    def _merge_to_existing(self, ghost_id: str, buffer_id: str, distance: float):
        """–û–±—ä–µ–¥–∏–Ω—è–µ—Ç –ø—Ä–∏–∑—Ä–∞—á–Ω—É—é —Å–ø–æ—Ä—É —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –≤ –±—É—Ñ–µ—Ä–µ."""
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π
        self.ghost_to_buffer[ghost_id] = buffer_id
        if buffer_id not in self.buffer_to_ghosts:
            self.buffer_to_ghosts[buffer_id] = []
        self.buffer_to_ghosts[buffer_id].append(ghost_id)

        print(f"      üîó –û–±—ä–µ–¥–∏–Ω–µ–Ω —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º: {ghost_id} ‚Üí {buffer_id}")
        print(f"      üìè –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {distance:.2e} < "
              f"{self.distance_threshold:.2e}")

    def _save_buffer_image(self) -> str:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–∞—Ä—Ç–∏–Ω–∫—É –±—É—Ñ–µ—Ä–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∞."""
        try:
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            buffer_dir = "buffer"
            if not os.path.exists(buffer_dir):
                os.makedirs(buffer_dir)

            save_path = os.path.join(buffer_dir, "buffer_merge_result.png")

            # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
            fig, ax = plt.subplots(1, 1, figsize=(12, 10))

            # –†–∏—Å—É–µ–º —Å–ø–æ—Ä—ã –±—É—Ñ–µ—Ä–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∞
            for buffer_id, position in getattr(self, 'buffer_positions', {}).items():
                ghost_count = len(self.buffer_to_ghosts.get(buffer_id, []))

                # –†–∞–∑–º–µ—Ä –º–∞—Ä–∫–µ—Ä–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã—Ö —Å–ø–æ—Ä
                marker_size = 50 + 30 * (ghost_count - 1)

                # –¶–≤–µ—Ç: —Å–∏–Ω–∏–π –¥–ª—è –æ–¥–∏–Ω–æ—á–Ω—ã—Ö, –∫—Ä–∞—Å–Ω—ã–π –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã—Ö
                color = 'blue' if ghost_count == 1 else 'red'

                ax.scatter(position[0], position[1], s=marker_size, c=color,
                          alpha=0.7, edgecolors='black', linewidth=1)

                # –ü–æ–¥–ø–∏—Å—å
                label = f"{buffer_id}\n({ghost_count} —Å–ø–æ—Ä)"
                ax.annotate(label, (position[0], position[1]),
                           xytext=(5, 5), textcoords='offset points',
                           fontsize=8, ha='left')

            ax.set_title(f"–ë—É—Ñ–µ—Ä–Ω—ã–π –≥—Ä–∞—Ñ –ø–æ—Å–ª–µ –º–µ—Ä–¥–∂–∞\n"
                        f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {self.stats['total_processed']}, "
                        f"–í –±—É—Ñ–µ—Ä–µ: {self.stats['added_to_buffer']}, "
                        f"–û–±—ä–µ–¥–∏–Ω–µ–Ω–æ: {self.stats['merged_to_existing']}")
            ax.set_xlabel("X")
            ax.set_ylabel("Y")
            ax.grid(True, alpha=0.3)
            ax.axis('equal')

            # –õ–µ–≥–µ–Ω–¥–∞
            from matplotlib.lines import Line2D
            legend_elements = [
                Line2D([0], [0], marker='o', color='w', markerfacecolor='blue',
                       markersize=8, label='–û–¥–∏–Ω–æ—á–Ω–∞—è —Å–ø–æ—Ä–∞'),
                Line2D([0], [0], marker='o', color='w', markerfacecolor='red',
                       markersize=10, label='–û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–∞—è —Å–ø–æ—Ä–∞')
            ]
            ax.legend(handles=legend_elements, loc='upper right')

            plt.tight_layout()
            plt.savefig(save_path, dpi=150, bbox_inches='tight')
            plt.close()

            print(f"\nüìä –ö–∞—Ä—Ç–∏–Ω–∫–∞ –±—É—Ñ–µ—Ä–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {save_path}")
            return save_path

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞—Ä—Ç–∏–Ω–∫–∏: {e}")
            return ""

    def _print_final_stats(self):
        """–í—ã–≤–æ–¥–∏—Ç –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–µ—Ä–¥–∂–∞."""
        print("\nüìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ú–ï–†–î–ñ–ê:")
        print(f"   üî¢ –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–ø–æ—Ä: {self.stats['total_processed']}")
        print(f"   ‚ûï –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –±—É—Ñ–µ—Ä: {self.stats['added_to_buffer']}")
        print(f"   üîó –û–±—ä–µ–¥–∏–Ω–µ–Ω–æ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏: {self.stats['merged_to_existing']}")
        compression_ratio = (self.stats['merged_to_existing'] /
                                max(self.stats['total_processed'], 1))
        print(f"   üìâ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Å–∂–∞—Ç–∏—è: {compression_ratio:.1%}")

        print("\nüó∫Ô∏è –ö–ê–†–¢–ê –°–û–û–¢–í–ï–¢–°–¢–í–ò–ô:")
        for buffer_id, ghost_list in self.buffer_to_ghosts.items():
            if len(ghost_list) > 1:
                print(f"   üîó {buffer_id} ‚Üê {ghost_list}")
            else:
                print(f"   üìç {buffer_id} ‚Üê {ghost_list[0]}")

    def _get_success_result(self) -> Dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ –º–µ—Ä–¥–∂–∞."""
        return {
            'success': True,
            'stats': self.stats.copy(),
            'ghost_to_buffer': self.ghost_to_buffer.copy(),
            'buffer_to_ghosts': self.buffer_to_ghosts.copy()
        }

    def _get_error_result(self, error_msg: str) -> Dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –æ—à–∏–±–∫–æ–π."""
        return {
            'success': False,
            'error': error_msg,
            'stats': self.stats.copy()
        }

    def get_buffer_spore_count(self) -> int:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ø–æ—Ä –≤ –±—É—Ñ–µ—Ä–Ω–æ–º –≥—Ä–∞—Ñ–µ."""
        return len(getattr(self, 'buffer_positions', {}))

    def get_correspondence_map(self) -> Tuple[Dict[str, str], Dict[str, List[str]]]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–∞—Ä—Ç—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π."""
        return (self.ghost_to_buffer.copy(),
                self.buffer_to_ghosts.copy())