"""
BufferMergeManager - –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –º–µ—Ä–¥–∂–∞ —Å–ø–æ—Ä –ø–æ –∫–ª–∞–≤–∏—à–µ M
"""

import numpy as np
from typing import Dict, List, Optional, Tuple
import json
from datetime import datetime
import matplotlib.pyplot as plt
import os
from ..core.spore_graph import SporeGraph


class BufferMergeManager:
    """
    –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –±–ª–∏–∑–∫–∏—Ö —Å–ø–æ—Ä –∏–∑ –ø—Ä–∏–∑—Ä–∞—á–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞ –≤
    –±—É—Ñ–µ—Ä–Ω—ã–π –≥—Ä–∞—Ñ.

    –ê–ª–≥–æ—Ä–∏—Ç–º:
    1. –°–æ–∑–¥–∞–µ—Ç –±—É—Ñ–µ—Ä–Ω—ã–π –≥—Ä–∞—Ñ
    2. –ö–æ–ø–∏—Ä—É–µ—Ç —Å–ø–æ—Ä—ã –ø–æ –ø–æ—Ä—è–¥–∫—É: –∫–æ—Ä–µ–Ω—å ‚Üí –¥–µ—Ç–∏ ‚Üí –≤–Ω—É–∫–∏
    3. –î–ª—è –∫–∞–∂–¥–æ–π —Å–ø–æ—Ä—ã –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –±–ª–∏–∑–æ—Å—Ç—å –≤ –±—É—Ñ–µ—Ä–µ (1.5e-3)
    4. –î–æ–±–∞–≤–ª—è–µ—Ç —Å–ø–æ—Ä—É –ò–õ–ò —Å–æ–∑–¥–∞–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π
    5. –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–∞—Ä—Ç–∏–Ω–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    """
    
    @staticmethod
    def safe_str_replace(value, old, new):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∑–∞–º–µ–Ω–∞ —Å –∫–æ–Ω–≤–µ—Ä—Å–∏–µ–π –≤ —Å—Ç—Ä–æ–∫—É."""
        return str(value).replace(old, new)

    def __init__(self, distance_threshold: float = 1.5e-3):
        self.distance_threshold = distance_threshold

        # üîç –§–ª–∞–≥ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Å–≤—è–∑–µ–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—ã–∫–ª—é—á–µ–Ω)
        self._investigate_links = True  # –í–∫–ª—é—á–∏—Ç—å –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        self._manual_spore_manager_ref = None  # –ë—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–∑–≤–Ω–µ

        # –ë—É—Ñ–µ—Ä–Ω—ã–π –≥—Ä–∞—Ñ –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã—Ö —Å–ø–æ—Ä
        self.buffer_graph = SporeGraph('buffer')

        # üîó –ë—É—Ñ–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–≤—è–∑–µ–π –¥–ª—è –º–µ—Ä–¥–∂–∞
        # [{'parent_id': str, 'child_id': str, 'link_type': str}]
        self.buffer_links: List[Dict] = []

        # –î–≤—É—Å—Ç–æ—Ä–æ–Ω–Ω—è—è –∫–∞—Ä—Ç–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π
        self.ghost_to_buffer: Dict[str, str] = {}  # ghost_id -> buffer_id
        # buffer_id -> [ghost_ids]
        self.buffer_to_ghosts: Dict[str, List[str]] = {}

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            'total_processed': 0,
            'added_to_buffer': 0,
            'merged_to_existing': 0,
            'processing_order': []
        }

        print(f"üîÑ BufferMergeManager —Å–æ–∑–¥–∞–Ω (—Ç—Ä–µ—à—Ö–æ–ª–¥: {distance_threshold})")

    def merge_ghost_tree(self, tree_logic, save_image: bool = True) -> Dict:
        """
        –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥: –º–µ—Ä–¥–∂–∏—Ç –ø—Ä–∏–∑—Ä–∞—á–Ω–æ–µ –¥–µ—Ä–µ–≤–æ –≤ –±—É—Ñ–µ—Ä–Ω—ã–π –≥—Ä–∞—Ñ.

        Args:
            tree_logic: SporeTree —Å –≥–æ—Ç–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
            save_image: —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –ª–∏ –∫–∞—Ä—Ç–∏–Ω–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞

        Returns:
            dict: —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–µ—Ä–¥–∂–∞
        """
        print("\nüîÑ –ù–ê–ß–ê–õ–û –ú–ï–†–î–ñ–ê –ü–†–ò–ó–†–ê–ß–ù–û–ì–û –î–ï–†–ï–í–ê")
        
        # üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±—É—Ñ–µ—Ä–∞ –¥–æ –æ—á–∏—Å—Ç–∫–∏
        if hasattr(self, 'buffer_positions') and self.buffer_positions:
            print(f"‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –í –±—É—Ñ–µ—Ä–µ –Ω–∞–π–¥–µ–Ω—ã —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ ({len(self.buffer_positions)} –ø–æ–∑–∏—Ü–∏–π)")
            print(f"   –ë—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –ø–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞...")

        # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        self._reset()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if not self._validate_tree_logic(tree_logic):
            return self._get_error_result("–ù–µ–≤–∞–ª–∏–¥–Ω–æ–µ –ø—Ä–∏–∑—Ä–∞—á–Ω–æ–µ –¥–µ—Ä–µ–≤–æ")

        # üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ò—Å—Å–ª–µ–¥—É–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏ —Å–≤—è–∑–µ–π
        if hasattr(self, '_investigate_links') and self._investigate_links:
            # –ü–æ–ª—É—á–∞–µ–º manual_spore_manager –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è prediction_manager
            manual_spore_manager = getattr(self, '_manual_spore_manager_ref', None)
            self._investigate_link_sources(tree_logic, manual_spore_manager)

        try:
            # 1. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ—Ä–µ–Ω—å
            self._process_root(tree_logic)

            # 2. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–µ—Ç–µ–π
            self._process_children(tree_logic)

            # 3. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–Ω—É–∫–æ–≤
            self._process_grandchildren(tree_logic)

            # 4. üîó –ù–û–í–û–ï: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–≤—è–∑–∏
            self._process_links(tree_logic)

            # 5. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if save_image:
                image_path = self._save_buffer_image()
                self.stats['image_path'] = image_path

            # 6. üíæ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±—É—Ñ–µ—Ä–Ω—ã–π –≥—Ä–∞—Ñ –≤ JSON
            export_path = self.export_buffer_graph()
            if export_path:
                self.stats['export_path'] = export_path

            # 7. –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self._print_final_stats()

            return self._get_success_result()

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –º–µ—Ä–¥–∂–∞: {e}")
            import traceback
            traceback.print_exc()
            return self._get_error_result(str(e))

    def _reset(self):
        """–û—á–∏—â–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –º–µ—Ä–¥–∂–∞."""
        print(f"üßπ –û—á–∏—Å—Ç–∫–∞ –±—É—Ñ–µ—Ä–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∞ –ø–µ—Ä–µ–¥ –Ω–æ–≤—ã–º –º–µ—Ä–¥–∂–µ–º...")
        
        # –û—á–∏—â–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        self.buffer_graph.clear()
        self.ghost_to_buffer.clear()
        self.buffer_to_ghosts.clear()
        if hasattr(self, 'buffer_links'):
            self.buffer_links.clear()
        
        # üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û—á–∏—â–∞–µ–º buffer_positions
        if hasattr(self, 'buffer_positions'):
            old_count = len(self.buffer_positions)
            self.buffer_positions.clear()
            if old_count > 0:
                print(f"   üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ {old_count} —Å—Ç–∞—Ä—ã—Ö –ø–æ–∑–∏—Ü–∏–π –∏–∑ –±—É—Ñ–µ—Ä–∞")
        else:
            self.buffer_positions = {}
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self.stats = {
            'total_processed': 0,
            'added_to_buffer': 0,
            'merged_to_existing': 0,
            'processing_order': [],
            'total_links': 0,
            'merged_links': 0
        }
        
        print(f"   ‚úÖ –ë—É—Ñ–µ—Ä–Ω—ã–π –≥—Ä–∞—Ñ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω")

    def _validate_tree_logic(self, tree_logic) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ tree_logic –≥–æ—Ç–æ–≤ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ."""
        if not tree_logic:
            print("‚ùå tree_logic is None")
            return False

        if not hasattr(tree_logic, 'root') or not tree_logic.root:
            print("‚ùå –ö–æ—Ä–µ–Ω—å –¥–µ—Ä–µ–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False

        if (not hasattr(tree_logic, '_children_created') or
                not tree_logic._children_created):
            print("‚ùå –î–µ—Ç–∏ –¥–µ—Ä–µ–≤–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã")
            return False

        return True

    def _investigate_link_sources(self, tree_logic, manual_spore_manager=None):
        """
        –î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–ò–ô –ú–ï–¢–û–î: –ò—Å—Å–ª–µ–¥—É–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–≤—è–∑—è—Ö.
        """
        print("\nüîç –ò–°–°–õ–ï–î–û–í–ê–ù–ò–ï –ò–°–¢–û–ß–ù–ò–ö–û–í –°–í–Ø–ó–ï–ô:")

        # 1. –ò—Å—Å–ª–µ–¥—É–µ–º tree_logic
        print("\nüìä 1. TREE_LOGIC:")
        print(f"   üìç –ö–æ—Ä–µ–Ω—å: {tree_logic.root}")
        
        if hasattr(tree_logic, 'children') and tree_logic.children:
            print(f"   üë∂ –î–µ—Ç–µ–π: {len(tree_logic.children)}")
            for i, child in enumerate(tree_logic.children[:2]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã—Ö 2
                print(f"      –†–µ–±–µ–Ω–æ–∫ {i}: pos={child.get('position', '–Ω–µ—Ç')}, "
                      f"dt={child.get('dt', '–Ω–µ—Ç')}, "
                      f"control={child.get('control', '–Ω–µ—Ç')}")
        
        if hasattr(tree_logic, 'grandchildren') and tree_logic.grandchildren:
            print(f"   üë∂üë∂ –í–Ω—É–∫–æ–≤: {len(tree_logic.grandchildren)}")
            for i, grandchild in enumerate(tree_logic.grandchildren[:2]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã—Ö 2
                print(f"      –í–Ω—É–∫ {i}: pos={grandchild.get('position', '–Ω–µ—Ç')}, "
                      f"dt={grandchild.get('dt', '–Ω–µ—Ç')}, control={grandchild.get('control', '–Ω–µ—Ç')}, "
                      f"parent_idx={grandchild.get('parent_idx', '–Ω–µ—Ç')}")
        
        # 2. –ò—Å—Å–ª–µ–¥—É–µ–º prediction_manager
        if manual_spore_manager and hasattr(manual_spore_manager, 'prediction_manager'):
            prediction_manager = manual_spore_manager.prediction_manager
            print(f"\nüìä 2. PREDICTION_MANAGER:")
            
            if hasattr(prediction_manager, 'ghost_graph'):
                ghost_graph = prediction_manager.ghost_graph
                print(f"   üëª Ghost graph: {len(ghost_graph.nodes)} —É–∑–ª–æ–≤, {len(ghost_graph.edges)} —Å–≤—è–∑–µ–π")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–≤—è–∑–µ–π
                edge_count = 0
                for edge_key, edge_info in ghost_graph.edges.items():
                    if edge_count < 3:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                        print(f"      –°–≤—è–∑—å {edge_count}: {edge_key} -> type={edge_info.link_type}")
                        edge_count += 1
            
            if hasattr(prediction_manager, 'prediction_links'):
                links = prediction_manager.prediction_links
                print(f"   üîó Prediction links: {len(links)} –ª–∏–Ω–∫–æ–≤")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ª–∏–Ω–∫–æ–≤
                for i, link in enumerate(links[:3]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                    parent_id = getattr(link.parent_spore, 'id', '–Ω–µ—Ç') if hasattr(link, 'parent_spore') else '–Ω–µ—Ç'
                    child_id = getattr(link.child_spore, 'id', '–Ω–µ—Ç') if hasattr(link, 'child_spore') else '–Ω–µ—Ç'
                    color = getattr(link, 'current_color', '–Ω–µ—Ç') if hasattr(link, 'current_color') else '–Ω–µ—Ç'
                    print(f"      –õ–∏–Ω–∫ {i}: {parent_id} -> {child_id}, —Ü–≤–µ—Ç={color}")
        
        # 3. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è
        print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        
        has_tree_structure = (hasattr(tree_logic, 'children') and tree_logic.children and 
                             hasattr(tree_logic, 'grandchildren') and tree_logic.grandchildren)
        
        has_prediction_links = (manual_spore_manager and 
                               hasattr(manual_spore_manager, 'prediction_manager') and
                               hasattr(manual_spore_manager.prediction_manager, 'prediction_links'))
        
        if has_tree_structure:
            print(f"   ‚úÖ tree_logic —Å–æ–¥–µ—Ä–∂–∏—Ç —á–µ—Ç–∫—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É parent-child")
            print(f"   üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å tree_logic –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π –∏—Å—Ç–æ—á–Ω–∏–∫")
        
        if has_prediction_links:
            print(f"   ‚úÖ prediction_manager —Å–æ–¥–µ—Ä–∂–∏—Ç –≥–æ—Ç–æ–≤—ã–µ —Å–≤—è–∑–∏ —Å —Ü–≤–µ—Ç–∞–º–∏/–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏")  
            print(f"   üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å prediction_manager –¥–ª—è —Ç–∏–ø–æ–≤ —Å–≤—è–∑–µ–π")
        
        if has_tree_structure and has_prediction_links:
            print(f"   üéØ –õ–£–ß–®–ò–ô –ü–õ–ê–ù: –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏–∑ tree_logic + —Ü–≤–µ—Ç–∞/—Ç–∏–ø—ã –∏–∑ prediction_manager")

    def _process_root(self, tree_logic):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ—Ä–µ–Ω—å –¥–µ—Ä–µ–≤–∞."""
        print("\nüìç –û–ë–†–ê–ë–û–¢–ö–ê –ö–û–†–ù–Ø")

        root_data = tree_logic.root
        root_position = np.array(root_data['position'])

        # –ö–æ—Ä–µ–Ω—å –≤—Å–µ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –≤ –±—É—Ñ–µ—Ä–Ω—ã–π –≥—Ä–∞—Ñ (–ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç)
        buffer_id = "buffer_root"
        ghost_id = "ghost_root"

        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –±—É—Ñ–µ—Ä–Ω–æ–º –≥—Ä–∞—Ñ–µ (–ø–æ–∫–∞ –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–π —Å–ø–æ—Ä—ã)
        self._add_to_buffer_graph(buffer_id, ghost_id, root_position)

        self.stats['total_processed'] += 1
        self.stats['added_to_buffer'] += 1
        self.stats['processing_order'].append(f"root({ghost_id}‚Üí{buffer_id})")

        print(f"   ‚úÖ –ö–æ—Ä–µ–Ω—å –¥–æ–±–∞–≤–ª–µ–Ω: {ghost_id} ‚Üí {buffer_id}")
        print(f"   üìç –ü–æ–∑–∏—Ü–∏—è: ({root_position[0]:.4f}, {root_position[1]:.4f})")

    def _process_children(self, tree_logic):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–µ—Ç–µ–π –¥–µ—Ä–µ–≤–∞."""
        print("\nüë∂ –û–ë–†–ê–ë–û–¢–ö–ê –î–ï–¢–ï–ô")

        if not hasattr(tree_logic, 'children') or not tree_logic.children:
            print("   ‚è≠Ô∏è –î–µ—Ç–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
            return

        for i, child_data in enumerate(tree_logic.children):
            child_position = np.array(child_data['position'])
            ghost_id = f"ghost_child_{i}"

            print(f"\n   üîç –†–µ–±–µ–Ω–æ–∫ {i}: {ghost_id}")
            print(f"      üìç –ü–æ–∑–∏—Ü–∏—è: ({child_position[0]:.4f}, {child_position[1]:.4f})")

            # –ò—â–µ–º –±–ª–∏–∂–∞–π—à—É—é —Å–ø–æ—Ä—É –≤ –±—É—Ñ–µ—Ä–Ω–æ–º –≥—Ä–∞—Ñ–µ
            closest_buffer_id, min_distance = self._find_closest_in_buffer(child_position)

            if closest_buffer_id and min_distance < self.distance_threshold:
                # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π
                self._merge_to_existing(ghost_id, closest_buffer_id, min_distance)
                self.stats['merged_to_existing'] += 1
                self.stats['processing_order'].append(
                    f"child_{i}({ghost_id}‚Üí{closest_buffer_id}, "
                    f"d={min_distance:.2e})")
            else:
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é
                buffer_id = f"buffer_child_{i}"
                self._add_to_buffer_graph(buffer_id, ghost_id, child_position)
                self.stats['added_to_buffer'] += 1
                self.stats['processing_order'].append(f"child_{i}({ghost_id}‚Üí{buffer_id})")

            self.stats['total_processed'] += 1

    def _process_grandchildren(self, tree_logic):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–Ω—É–∫–æ–≤ –¥–µ—Ä–µ–≤–∞."""
        print("\nüë∂üë∂ –û–ë–†–ê–ë–û–¢–ö–ê –í–ù–£–ö–û–í")

        if (not hasattr(tree_logic, '_grandchildren_created') or
                not tree_logic._grandchildren_created or
                not hasattr(tree_logic, 'grandchildren') or
                not tree_logic.grandchildren):
            print("   ‚è≠Ô∏è –í–Ω—É–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
            return

        for i, grandchild_data in enumerate(tree_logic.grandchildren):
            grandchild_position = np.array(grandchild_data['position'])
            ghost_id = f"ghost_grandchild_{i}"

            print(f"\n   üîç –í–Ω—É–∫ {i}: {ghost_id}")
            print(f"      üìç –ü–æ–∑–∏—Ü–∏—è: ({grandchild_position[0]:.4f}, "
                  f"{grandchild_position[1]:.4f})")

            # –ò—â–µ–º –±–ª–∏–∂–∞–π—à—É—é —Å–ø–æ—Ä—É –≤ –±—É—Ñ–µ—Ä–Ω–æ–º –≥—Ä–∞—Ñ–µ
            closest_buffer_id, min_distance = self._find_closest_in_buffer(grandchild_position)

            if closest_buffer_id and min_distance < self.distance_threshold:
                # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π
                self._merge_to_existing(ghost_id, closest_buffer_id, min_distance)
                self.stats['merged_to_existing'] += 1
                self.stats['processing_order'].append(
                    f"grandchild_{i}({ghost_id}‚Üí{closest_buffer_id}, "
                    f"d={min_distance:.2e})")
            else:
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é
                buffer_id = f"buffer_grandchild_{i}"
                self._add_to_buffer_graph(buffer_id, ghost_id, grandchild_position)
                self.stats['added_to_buffer'] += 1
                self.stats['processing_order'].append(
                    f"grandchild_{i}({ghost_id}‚Üí{buffer_id})")

            self.stats['total_processed'] += 1

    def _process_links(self, tree_logic):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–≤—è–∑–∏ –º–µ–∂–¥—É —Å–ø–æ—Ä–∞–º–∏ –¥–µ—Ä–µ–≤–∞."""
        print(f"\nüîó –û–ë–†–ê–ë–û–¢–ö–ê –°–í–Ø–ó–ï–ô")
        
        # 1. –°–æ–∑–¥–∞–µ–º —Å–≤—è–∑–∏ –∫–æ—Ä–µ–Ω—å ‚Üî –¥–µ—Ç–∏
        self._create_root_child_links(tree_logic)
        
        # 2. –°–æ–∑–¥–∞–µ–º —Å–≤—è–∑–∏ –¥–µ—Ç–∏ ‚Üî –≤–Ω—É–∫–∏
        self._create_child_grandchild_links(tree_logic)
        
        # 3. –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–≤—è–∑–µ–π
        self._print_links_stats()

    def _create_root_child_links(self, tree_logic):
        """–°–æ–∑–¥–∞–µ—Ç —Å–≤—è–∑–∏ –º–µ–∂–¥—É –∫–æ—Ä–Ω–µ–º –∏ –¥–µ—Ç—å–º–∏."""
        if not hasattr(tree_logic, 'children') or not tree_logic.children:
            return
            
        print(f"\n   üîó –°–í–Ø–ó–ò –ö–û–†–ï–ù–¨ ‚Üî –î–ï–¢–ò:")
        root_buffer_id = "buffer_root"
        
        for i, child_data in enumerate(tree_logic.children):
            child_ghost_id = f"ghost_child_{i}"
            child_buffer_id = self.ghost_to_buffer.get(child_ghost_id)
            
            if not child_buffer_id:
                print(f"      ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω buffer_id –¥–ª—è {child_ghost_id}")
                continue
                
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–≤—è–∑–∏ –ø–æ control
            control = child_data.get('control', 0)
            link_type = 'buffer_max' if control > 0 else 'buffer_min'
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ dt
            dt = child_data.get('dt', 0)
            if dt > 0:
                # dt > 0: –∫–æ—Ä–µ–Ω—å ‚Üí —Ä–µ–±–µ–Ω–æ–∫
                parent_id, child_id = root_buffer_id, child_buffer_id
                direction = "‚Üí"
            else:
                # dt < 0: —Ä–µ–±–µ–Ω–æ–∫ ‚Üí –∫–æ—Ä–µ–Ω—å  
                parent_id, child_id = child_buffer_id, root_buffer_id
                direction = "‚Üê"
            
            # –°–æ–∑–¥–∞–µ–º —Å–≤—è–∑—å
            link = {
                'parent_id': parent_id,
                'child_id': child_id, 
                'link_type': link_type,
                'source_info': f"root-child_{i}(dt={dt:.3f},u={control})"
            }
            self.buffer_links.append(link)
            self.stats['total_links'] += 1
            
            print(f"      ‚úÖ {parent_id} {direction} {child_buffer_id} ({link_type})")

    def _create_child_grandchild_links(self, tree_logic):
        """–°–æ–∑–¥–∞–µ—Ç —Å–≤—è–∑–∏ –º–µ–∂–¥—É –¥–µ—Ç—å–º–∏ –∏ –≤–Ω—É–∫–∞–º–∏.""" 
        if not hasattr(tree_logic, 'grandchildren') or not tree_logic.grandchildren:
            return
            
        print(f"\n   üîó –°–í–Ø–ó–ò –î–ï–¢–ò ‚Üî –í–ù–£–ö–ò:")
        
        for i, grandchild_data in enumerate(tree_logic.grandchildren):
            grandchild_ghost_id = f"ghost_grandchild_{i}"
            grandchild_buffer_id = self.ghost_to_buffer.get(grandchild_ghost_id)
            
            if not grandchild_buffer_id:
                print(f"      ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω buffer_id –¥–ª—è {grandchild_ghost_id}")
                continue
                
            # –ü–æ–ª—É—á–∞–µ–º parent_idx - –Ω–æ–º–µ—Ä —Ä–µ–±–µ–Ω–∫–∞-—Ä–æ–¥–∏—Ç–µ–ª—è
            parent_idx = grandchild_data.get('parent_idx')
            if parent_idx is None:
                print(f"      ‚ùå –ù–µ—Ç parent_idx –¥–ª—è –≤–Ω—É–∫–∞ {i}")
                continue
                
            # –ù–∞—Ö–æ–¥–∏–º buffer_id —Ä–æ–¥–∏—Ç–µ–ª—è-—Ä–µ–±–µ–Ω–∫–∞
            parent_ghost_id = f"ghost_child_{parent_idx}"
            parent_buffer_id = self.ghost_to_ghosts.get(parent_ghost_id) if False else self.ghost_to_buffer.get(parent_ghost_id)
            
            if not parent_buffer_id:
                print(f"      ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω buffer_id –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª—è {parent_ghost_id}")
                continue
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–≤—è–∑–∏ –ø–æ control
            control = grandchild_data.get('control', 0)
            link_type = 'buffer_max' if control > 0 else 'buffer_min'
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ dt
            dt = grandchild_data.get('dt', 0)
            if dt > 0:
                # dt > 0: —Ä–µ–±–µ–Ω–æ–∫ ‚Üí –≤–Ω—É–∫
                parent_id, child_id = parent_buffer_id, grandchild_buffer_id
                direction = "‚Üí"
            else:
                # dt < 0: –≤–Ω—É–∫ ‚Üí —Ä–µ–±–µ–Ω–æ–∫
                parent_id, child_id = grandchild_buffer_id, parent_buffer_id
                direction = "‚Üê"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–≤—è–∑–∏ (–º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–∏)
            existing_link = self._find_existing_link(parent_id, child_id, link_type)
            if existing_link:
                print(f"      üîó –°–≤—è–∑—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {parent_id} {direction} {child_id} ({link_type})")
                self.stats['merged_links'] += 1
                continue
            
            # –°–æ–∑–¥–∞–µ–º —Å–≤—è–∑—å
            link = {
                'parent_id': parent_id,
                'child_id': child_id,
                'link_type': link_type,
                'source_info': f"child_{parent_idx}-grandchild_{i}(dt={dt:.3f},u={control})"
            }
            self.buffer_links.append(link)
            self.stats['total_links'] += 1
            
            print(f"      ‚úÖ {parent_buffer_id} {direction} {grandchild_buffer_id} ({link_type})")

    def _find_existing_link(self, parent_id: str, child_id: str, link_type: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è —Å–≤—è–∑—å."""
        for link in self.buffer_links:
            if (link['parent_id'] == parent_id and 
                link['child_id'] == child_id and 
                link['link_type'] == link_type):
                return True
        return False

    def _print_links_stats(self):
        """–í—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–≤—è–∑–µ–π."""
        print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–í–Ø–ó–ï–ô:")
        print(f"   üîó –í—Å–µ–≥–æ —Å–≤—è–∑–µ–π —Å–æ–∑–¥–∞–Ω–æ: {len(self.buffer_links)}")
        print(f"   üîó –û–±—ä–µ–¥–∏–Ω–µ–Ω–æ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è: {self.stats['merged_links']}")
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø–∞–º
        link_types = {}
        for link in self.buffer_links:
            link_type = link['link_type']
            link_types[link_type] = link_types.get(link_type, 0) + 1
        
        print(f"   üé® –ü–æ —Ç–∏–ø–∞–º: {link_types}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–æ–≤ —Å–≤—è–∑–µ–π
        print(f"\nüìù –ü–†–ò–ú–ï–†–´ –°–í–Ø–ó–ï–ô:")
        for i, link in enumerate(self.buffer_links[:4]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 4
            print(f"   {i+1}. {link['parent_id']} ‚Üí {link['child_id']} ({link['link_type']})")

    def _find_closest_in_buffer(self, position: np.ndarray) -> Tuple[Optional[str], float]:
        """
        –ù–∞—Ö–æ–¥–∏—Ç –±–ª–∏–∂–∞–π—à—É—é —Å–ø–æ—Ä—É –≤ –±—É—Ñ–µ—Ä–Ω–æ–º –≥—Ä–∞—Ñ–µ.

        Returns:
            (buffer_id, distance) –∏–ª–∏ (None, float('inf')) –µ—Å–ª–∏ –±—É—Ñ–µ—Ä –ø—É—Å—Ç
        """
        if not self.buffer_positions:
            return None, float('inf')

        min_distance = float('inf')
        closest_buffer_id = None

        for buffer_id, buffer_position in self.buffer_positions.items():
            distance = np.linalg.norm(position - buffer_position)
            if distance < min_distance:
                min_distance = distance
                closest_buffer_id = buffer_id

        return closest_buffer_id, min_distance

    def _add_to_buffer_graph(self, buffer_id: str, ghost_id: str, position: np.ndarray):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é —Å–ø–æ—Ä—É –≤ –±—É—Ñ–µ—Ä–Ω—ã–π –≥—Ä–∞—Ñ."""
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –ø–æ–∏—Å–∫–∞ –±–ª–∏–∑–æ—Å—Ç–∏
        if not hasattr(self, 'buffer_positions'):
            self.buffer_positions = {}
        self.buffer_positions[buffer_id] = position.copy()

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π
        self.ghost_to_buffer[ghost_id] = buffer_id
        if buffer_id not in self.buffer_to_ghosts:
            self.buffer_to_ghosts[buffer_id] = []
        self.buffer_to_ghosts[buffer_id].append(ghost_id)

        print(f"      ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –≤ –±—É—Ñ–µ—Ä: {ghost_id} ‚Üí {buffer_id}")
        
        # üîç –û–¢–õ–ê–î–ö–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–∑–∏—Ü–∏—è –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞
        if buffer_id in self.buffer_positions:
            saved_pos = self.buffer_positions[buffer_id]
            print(f"         üìç –ü–æ–∑–∏—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: ({saved_pos[0]:.4f}, {saved_pos[1]:.4f})")

    def _merge_to_existing(self, ghost_id: str, buffer_id: str, distance: float):
        """–û–±—ä–µ–¥–∏–Ω—è–µ—Ç –ø—Ä–∏–∑—Ä–∞—á–Ω—É—é —Å–ø–æ—Ä—É —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –≤ –±—É—Ñ–µ—Ä–µ."""
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π
        self.ghost_to_buffer[ghost_id] = buffer_id
        if buffer_id not in self.buffer_to_ghosts:
            self.buffer_to_ghosts[buffer_id] = []
        self.buffer_to_ghosts[buffer_id].append(ghost_id)

        print(f"      üîó –û–±—ä–µ–¥–∏–Ω–µ–Ω —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º: {ghost_id} ‚Üí {buffer_id}")
        print(f"      üìè –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {distance:.2e} < "
              f"{self.distance_threshold:.2e}")

    def _save_buffer_image(self) -> str:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–∞—Ä—Ç–∏–Ω–∫—É –±—É—Ñ–µ—Ä–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∞ —Å–æ —Å–≤—è–∑—è–º–∏."""
        try:
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            buffer_dir = "buffer"
            if not os.path.exists(buffer_dir):
                os.makedirs(buffer_dir)

            save_path = os.path.join(buffer_dir, "buffer_merge_latest.png")

            # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
            fig, ax = plt.subplots(1, 1, figsize=(14, 12))

            # 1. –†–∏—Å—É–µ–º —Å–≤—è–∑–∏ –ø–µ—Ä–≤—ã–º–∏ (–ø–æ–¥ —Å–ø–æ—Ä–∞–º–∏)
            self._draw_buffer_links(ax)

            # 2. –†–∏—Å—É–µ–º —Å–ø–æ—Ä—ã –ø–æ–≤–µ—Ä—Ö
            self._draw_buffer_spores(ax)

            # 3. –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä–∞—Ñ–∏–∫–∞
            ax.set_title(
                f"–ë—É—Ñ–µ—Ä–Ω—ã–π –≥—Ä–∞—Ñ –ø–æ—Å–ª–µ –º–µ—Ä–¥–∂–∞\n"
                f"–°–ø–æ—Ä—ã: {len(getattr(self, 'buffer_positions', {}))}, "
                f"–°–≤—è–∑–∏: {len(getattr(self, 'buffer_links', []))}, "
                f"–û–±—ä–µ–¥–∏–Ω–µ–Ω–æ: {self.stats['merged_to_existing']}"
            )
            ax.set_xlabel("X")
            ax.set_ylabel("Y")
            ax.grid(True, alpha=0.3)
            ax.axis('equal')

            # 4. –õ–µ–≥–µ–Ω–¥–∞
            self._add_legend(ax)

            plt.tight_layout()
            plt.savefig(save_path, dpi=150, bbox_inches='tight')
            plt.close()

            print(f"\nüìä –ö–∞—Ä—Ç–∏–Ω–∫–∞ –±—É—Ñ–µ—Ä–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {save_path}")
            return save_path

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞—Ä—Ç–∏–Ω–∫–∏: {e}")
            import traceback
            traceback.print_exc()
            return ""

    def _draw_buffer_spores(self, ax):
        """–†–∏—Å—É–µ—Ç —Å–ø–æ—Ä—ã –±—É—Ñ–µ—Ä–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∞."""
        for buffer_id, position in getattr(self, 'buffer_positions', {}).items():
            ghost_count = len(self.buffer_to_ghosts.get(buffer_id, []))

            # –†–∞–∑–º–µ—Ä –º–∞—Ä–∫–µ—Ä–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã—Ö —Å–ø–æ—Ä
            marker_size = 80 + 40 * (ghost_count - 1)

            # –¶–≤–µ—Ç: —Å–∏–Ω–∏–π –¥–ª—è –æ–¥–∏–Ω–æ—á–Ω—ã—Ö, –∫—Ä–∞—Å–Ω—ã–π –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã—Ö
            color = 'lightblue' if ghost_count == 1 else 'lightcoral'
            edge_color = 'blue' if ghost_count == 1 else 'red'

            ax.scatter(
                position[0], position[1], s=marker_size, c=color,
                alpha=0.8, edgecolors=edge_color, linewidth=2
            )

            # –ü–æ–¥–ø–∏—Å—å
            label = f"{self.safe_str_replace(buffer_id, 'buffer_', '')}\n({ghost_count})"  # üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—É—é –∑–∞–º–µ–Ω—É
            ax.annotate(
                label, (position[0], position[1]),
                xytext=(5, 5), textcoords='offset points',
                fontsize=9, ha='left', weight='bold'
            )

    def _draw_buffer_links(self, ax):
        """–†–∏—Å—É–µ—Ç —Å–≤—è–∑–∏ –±—É—Ñ–µ—Ä–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∞ –∫–∞–∫ —Å—Ç—Ä–µ–ª–∫–∏."""
        if not hasattr(self, 'buffer_positions'):
            return

        # –¶–≤–µ—Ç–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–≤—è–∑–µ–π
        link_colors = {
            'buffer_max': 'red',      # u_max - –∫—Ä–∞—Å–Ω—ã–π
            'buffer_min': 'blue'      # u_min - —Å–∏–Ω–∏–π
        }

        for link in getattr(self, 'buffer_links', []):
            parent_id = link['parent_id']
            child_id = link['child_id']
            link_type = link['link_type']

            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏
            parent_pos = self.buffer_positions.get(parent_id)
            child_pos = self.buffer_positions.get(child_id)

            if parent_pos is None or child_pos is None:
                continue

            # –¶–≤–µ—Ç —Å—Ç—Ä–µ–ª–∫–∏
            color = link_colors.get(link_type, 'gray')

            # –†–∏—Å—É–µ–º —Å—Ç—Ä–µ–ª–∫—É –æ—Ç parent –∫ child
            dx = child_pos[0] - parent_pos[0]
            dy = child_pos[1] - parent_pos[1]

            # –°–º–µ—â–∞–µ–º –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü —Å—Ç—Ä–µ–ª–∫–∏ —á—Ç–æ–±—ã –æ–Ω–∏ –Ω–µ –ø–µ—Ä–µ–∫—Ä—ã–≤–∞–ª–∏ —Å–ø–æ—Ä—ã
            length = np.sqrt(dx * dx + dy * dy)
            if length > 0:
                offset = 0.015  # –û—Ç—Å—Ç—É–ø –æ—Ç —Ü–µ–Ω—Ç—Ä–∞ —Å–ø–æ—Ä—ã
                start_offset = offset / length
                end_offset = offset / length

                start_x = parent_pos[0] + dx * start_offset
                start_y = parent_pos[1] + dy * start_offset
                arrow_dx = dx * (1 - 2 * end_offset)
                arrow_dy = dy * (1 - 2 * end_offset)

                # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É —Å—Ç—Ä–µ–ª–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–ª–∏–Ω—ã
                # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —à–∏—Ä–∏–Ω–∞ 0.5, –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è 3.0
                # –®–∏—Ä–∏–Ω–∞ = 1/10 –æ—Ç –¥–ª–∏–Ω—ã, –Ω–æ –≤ —Ä–∞–∑—É–º–Ω—ã—Ö –ø—Ä–µ–¥–µ–ª–∞—Ö
                arrow_width = max(0.5, min(3.0, length * 0.1))
                head_width = max(0.004, min(0.012, length * 0.05))
                head_length = max(0.004, min(0.012, length * 0.05))

                ax.arrow(
                    start_x, start_y, arrow_dx, arrow_dy,
                    head_width=head_width, head_length=head_length,
                    fc=color, ec=color, alpha=0.7, linewidth=arrow_width
                )

    def _add_legend(self, ax):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –ª–µ–≥–µ–Ω–¥—É –∫ –≥—Ä–∞—Ñ–∏–∫—É."""
        from matplotlib.lines import Line2D

        legend_elements = [
            # –°–ø–æ—Ä—ã
            Line2D([0], [0], marker='o', color='w', markerfacecolor='lightblue',
                   markeredgecolor='blue', markersize=10, label='–û–¥–∏–Ω–æ—á–Ω–∞—è —Å–ø–æ—Ä–∞'),
            Line2D([0], [0], marker='o', color='w', markerfacecolor='lightcoral',
                   markeredgecolor='red', markersize=12, label='–û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–∞—è —Å–ø–æ—Ä–∞'),

            # –°–≤—è–∑–∏
            Line2D([0], [0], color='red', linewidth=3, label='buffer_max (u_max)'),
            Line2D([0], [0], color='blue', linewidth=3, label='buffer_min (u_min)')
        ]

        ax.legend(handles=legend_elements, loc='upper right', fontsize=9)

    def export_buffer_graph(self, filename: str = None) -> str:
        """
        –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –±—É—Ñ–µ—Ä–Ω—ã–π –≥—Ä–∞—Ñ –≤ JSON —Ñ–∞–π–ª.
        
        Args:
            filename: –∏–º—è —Ñ–∞–π–ª–∞ (–µ—Å–ª–∏ None, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
            
        Returns:
            –ø—É—Ç—å –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
        """
        try:
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            buffer_dir = "buffer"
            if not os.path.exists(buffer_dir):
                os.makedirs(buffer_dir)

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –µ—Å–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω–æ
            if filename is None:
                filename = "buffer_graph_latest.json"

            save_path = os.path.join(buffer_dir, filename)

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
            export_data = {
                'metadata': {
                    'export_time': datetime.now().isoformat(),
                    'algorithm_version': 'BufferMergeManager_v1.0',
                    'distance_threshold': self.distance_threshold
                },
                
                'stats': self.stats.copy(),
                
                'spores': self._export_spores_data(),
                
                'links': self._export_links_data(),
                
                'correspondence_maps': {
                    'ghost_to_buffer': self.ghost_to_buffer.copy(),
                    'buffer_to_ghosts': self.buffer_to_ghosts.copy()
                }
            }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ JSON
            with open(save_path, 'w', encoding='utf-8') as f:
                json.dump(export_data, f, indent=2, ensure_ascii=False)
            
            print(f"\nüíæ –ë—É—Ñ–µ—Ä–Ω—ã–π –≥—Ä–∞—Ñ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω: {save_path}")
            print(f"   üìä –°–ø–æ—Ä: {len(export_data['spores'])}")
            print(f"   üîó –°–≤—è–∑–µ–π: {len(export_data['links'])}")
            
            return save_path
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –±—É—Ñ–µ—Ä–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∞: {e}")
            import traceback
            traceback.print_exc()
            return ""

    def _export_spores_data(self) -> List[Dict]:
        """–§–æ—Ä–º–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å–ø–æ—Ä –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞."""
        spores_data = []
        
        for buffer_id, position in getattr(self, 'buffer_positions', {}).items():
            ghost_list = self.buffer_to_ghosts.get(buffer_id, [])
            
            spore_data = {
                'buffer_id': buffer_id,
                'position': [float(position[0]), float(position[1])],
                'merged_ghosts': ghost_list.copy(),
                'ghost_count': len(ghost_list),
                'is_merged': len(ghost_list) > 1
            }
            
            spores_data.append(spore_data)
        
        return spores_data

    def _export_links_data(self) -> List[Dict]:
        """–§–æ—Ä–º–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å–≤—è–∑–µ–π –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞."""
        links_data = []
        
        for link in getattr(self, 'buffer_links', []):
            link_data = {
                'parent_id': link['parent_id'],
                'child_id': link['child_id'],
                'link_type': link['link_type'],
                'source_info': link.get('source_info', 'unknown')
            }
            
            links_data.append(link_data)
        
        return links_data

    def _print_final_stats(self):
        """–í—ã–≤–æ–¥–∏—Ç –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–µ—Ä–¥–∂–∞."""
        print("\nüìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ú–ï–†–î–ñ–ê:")
        print(f"   üî¢ –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–ø–æ—Ä: {self.stats['total_processed']}")
        print(f"   ‚ûï –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –±—É—Ñ–µ—Ä: {self.stats['added_to_buffer']}")
        print(f"   üîó –û–±—ä–µ–¥–∏–Ω–µ–Ω–æ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏: {self.stats['merged_to_existing']}")
        compression_ratio = (self.stats['merged_to_existing'] /
                                max(self.stats['total_processed'], 1))
        print(f"   üìâ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Å–∂–∞—Ç–∏—è: {compression_ratio:.1%}")
        print(f"   üîó –°–≤—è–∑–µ–π —Å–æ–∑–¥–∞–Ω–æ: {len(getattr(self, 'buffer_links', []))}")
        if self.stats.get('merged_links', 0) > 0:
            print(f"   üîó –°–≤—è–∑–µ–π –æ–±—ä–µ–¥–∏–Ω–µ–Ω–æ: {self.stats['merged_links']}")

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö
        if 'image_path' in self.stats:
            print(f"   üñºÔ∏è –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è: {self.stats['image_path']}")
        if 'export_path' in self.stats:
            print(f"   üíæ JSON —ç–∫—Å–ø–æ—Ä—Ç: {self.stats['export_path']}")

        print("\nüó∫Ô∏è –ö–ê–†–¢–ê –°–û–û–¢–í–ï–¢–°–¢–í–ò–ô:")
        for buffer_id, ghost_list in self.buffer_to_ghosts.items():
            if len(ghost_list) > 1:
                print(f"   üîó {buffer_id} ‚Üê {ghost_list}")
            else:
                print(f"   üìç {buffer_id} ‚Üê {ghost_list[0]}")

    def _get_success_result(self) -> Dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ –º–µ—Ä–¥–∂–∞."""
        return {
            'success': True,
            'stats': self.stats.copy(),
            'ghost_to_buffer': self.ghost_to_buffer.copy(),
            'buffer_to_ghosts': self.buffer_to_ghosts.copy()
        }

    def _get_error_result(self, error_msg: str) -> Dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –æ—à–∏–±–∫–æ–π."""
        return {
            'success': False,
            'error': error_msg,
            'stats': self.stats.copy()
        }

    def get_buffer_spore_count(self) -> int:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ø–æ—Ä –≤ –±—É—Ñ–µ—Ä–Ω–æ–º –≥—Ä–∞—Ñ–µ."""
        return len(getattr(self, 'buffer_positions', {}))

    def get_correspondence_map(self) -> Tuple[Dict[str, str], Dict[str, List[str]]]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–∞—Ä—Ç—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π."""
        return (self.ghost_to_buffer.copy(),
                self.buffer_to_ghosts.copy())

    def materialize_buffer_to_real(self, spore_manager, zoom_manager, color_manager, pendulum, config) -> Dict:
        """
        –ú–∞—Ç–µ—Ä–∏–∞–ª–∏–∑—É–µ—Ç –±—É—Ñ–µ—Ä–Ω—ã–π –≥—Ä–∞—Ñ –≤ —Ä–µ–∞–ª—å–Ω—ã–µ —Å–ø–æ—Ä—ã –∏ —Å–≤—è–∑–∏.
        
        Args:
            spore_manager: SporeManager –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö —Å–ø–æ—Ä –∏ —Å–≤—è–∑–µ–π
            zoom_manager: ZoomManager –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—ä–µ–∫—Ç–æ–≤
            color_manager: ColorManager –¥–ª—è —Ü–≤–µ—Ç–æ–≤
            pendulum: PendulumSystem –¥–ª—è —Ñ–∏–∑–∏–∫–∏
            config: –∫–æ–Ω—Ñ–∏–≥ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–ø–æ—Ä
            
        Returns:
            dict: —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Ç–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        """
        print(f"\nüé® –ú–ê–¢–ï–†–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–£–§–ï–†–ù–û–ì–û –ì–†–ê–§–ê –í –†–ï–ê–õ–¨–ù–´–ô")
        
        if not self.buffer_positions:
            return self._get_error_result("–ë—É—Ñ–µ—Ä–Ω—ã–π –≥—Ä–∞—Ñ –ø—É—Å—Ç - –Ω–µ—á–µ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞—Ç—å")
            
        try:
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            materialize_stats = {
                'spores_created': 0,
                'links_created': 0,
                'errors': []
            }
            
            # 1. –°–æ–∑–¥–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ —Å–ø–æ—Ä—ã
            real_spores_map = self._create_real_spores(
                spore_manager, zoom_manager, color_manager, pendulum, config, materialize_stats)
            
            # 2. –°–æ–∑–¥–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ —Å–≤—è–∑–∏
            self._create_real_links(spore_manager, real_spores_map, materialize_stats, zoom_manager, config)
            
            # 3. –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∞  
            visualization_path = self._create_real_graph_visualization(spore_manager)
            if visualization_path:
                materialize_stats['visualization_path'] = visualization_path
            
            # 4. –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self._print_materialize_stats(materialize_stats)
            
            # 5. –û–±–Ω–æ–≤–ª—è–µ–º —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏
            zoom_manager.update_transform()
            
            return {
                'success': True,
                'stats': materialize_stats
            }
            
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}"
            print(f"‚ùå {error_msg}")
            import traceback
            traceback.print_exc()
            return self._get_error_result(error_msg)

    def _create_real_spores(self, spore_manager, zoom_manager, color_manager, pendulum, config, stats) -> Dict[str, any]:
        """–°–æ–∑–¥–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ —Å–ø–æ—Ä—ã –∏–∑ –±—É—Ñ–µ—Ä–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∞."""
        print(f"\n   üåü –°–û–ó–î–ê–ù–ò–ï –†–ï–ê–õ–¨–ù–´–• –°–ü–û–†:")
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Spore
        from ..core.spore import Spore
        
        real_spores_map = {}  # buffer_id -> real_spore
        spore_config = config.get('spore', {})
        goal_position = spore_config.get('goal_position', [0, 0])
        
        for buffer_id, position in self.buffer_positions.items():
            try:
                # –ü–æ–∑–∏—Ü–∏—è –≤ 3D (Y=0)
                position_3d = (float(position[0]), 0, float(position[1]))
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–ø–æ—Ä–∞ —Ü–µ–ª–µ–≤–æ–π
                is_goal = buffer_id == "buffer_root"
                
                # –°–æ–∑–¥–∞–µ–º —Ä–µ–∞–ª—å–Ω—É—é —Å–ø–æ—Ä—É
                real_spore = Spore(
                    pendulum=pendulum,
                    dt=spore_config.get('dt', 0.05),
                    scale=spore_config.get('scale', 0.1),
                    position=position_3d,
                    goal_position=goal_position,
                    is_goal=is_goal,
                    color_manager=color_manager,
                    config=spore_config
                )
                
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
                real_spore.id = f"real_{buffer_id}"
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ SporeManager
                spore_manager.add_spore_manual(real_spore)
                
                # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤ ZoomManager
                zoom_key = f"real_{buffer_id}"
                zoom_manager.register_object(real_spore, zoom_key)
                real_spore._zoom_manager_key = zoom_key  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–∞—Ä—Ç–µ
                real_spores_map[buffer_id] = real_spore
                stats['spores_created'] += 1
                
                # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã—Ö —Å–ø–æ—Ä–∞—Ö
                ghost_count = len(self.buffer_to_ghosts.get(buffer_id, []))
                merge_info = f" (–æ–±—ä–µ–¥–∏–Ω—è–µ—Ç {ghost_count})" if ghost_count > 1 else ""
                
                print(f"      ‚úÖ {buffer_id} ‚Üí real_spore{merge_info}")
                
            except Exception as e:
                error_msg = f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–ø–æ—Ä—ã {buffer_id}: {e}"
                print(f"      ‚ùå {error_msg}")
                stats['errors'].append(error_msg)
        
        return real_spores_map

    def _create_real_links(self, spore_manager, real_spores_map, stats, zoom_manager, config):
        """–°–æ–∑–¥–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ —Å–≤—è–∑–∏ –∏–∑ –±—É—Ñ–µ—Ä–Ω—ã—Ö —Å–≤—è–∑–µ–π."""
        print(f"\n   üîó –°–û–ó–î–ê–ù–ò–ï –†–ï–ê–õ–¨–ù–´–• –°–í–Ø–ó–ï–ô:")
        
        # üîç –û–¢–õ–ê–î–ö–ê –¢–ò–ü–û–í –î–ê–ù–ù–´–•
        print(f"   üîç –û–¢–õ–ê–î–ö–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö –≤ buffer_links:")
        for i, link in enumerate(self.buffer_links):
            print(f"      Link {i}: link_type type={type(link['link_type'])}, value={link['link_type']}")
            if i >= 3:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3
                break
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Link
        from ..visual.link import Link
        
        # –¶–≤–µ—Ç–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–≤—è–∑–µ–π  
        link_colors = {
            'buffer_max': 'ghost_max',    # –ö—Ä–∞—Å–Ω—ã–π –¥–ª—è u_max
            'buffer_min': 'ghost_min'     # –°–∏–Ω–∏–π –¥–ª—è u_min
        }
        
        for link in self.buffer_links:
            try:
                parent_buffer_id = link['parent_id']
                child_buffer_id = link['child_id']
                link_type = str(link['link_type'])  # üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É
                
                # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ —Å–ø–æ—Ä—ã
                parent_spore = real_spores_map.get(parent_buffer_id)
                child_spore = real_spores_map.get(child_buffer_id)
                
                if not parent_spore or not child_spore:
                    error_msg = f"–ù–µ –Ω–∞–π–¥–µ–Ω—ã —Å–ø–æ—Ä—ã –¥–ª—è —Å–≤—è–∑–∏ {parent_buffer_id} ‚Üí {child_buffer_id}"
                    print(f"      ‚ùå {error_msg}")
                    stats['errors'].append(error_msg)
                    continue
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç —Å–≤—è–∑–∏
                color_key = link_colors.get(link_type, 'link_default')
                
                # –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª—å–Ω—É—é —Å–≤—è–∑—å
                visual_link = Link(
                    parent_spore=parent_spore,
                    child_spore=child_spore,
                    zoom_manager=zoom_manager,
                    color_manager=spore_manager.color_manager,
                    config=spore_manager.config
                )
                
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–≤–µ—Ç –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è
                visual_link.color = spore_manager.color_manager.get_color('link', color_key)
                
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º ID
                visual_link.id = f"real_link_{parent_buffer_id}_to_{child_buffer_id}"
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ SporeManager (–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å)
                spore_manager.links.append(visual_link)
                
                # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤ ZoomManager
                link_id = zoom_manager.get_unique_link_id()
                zoom_manager.register_object(visual_link, link_id)
                visual_link._zoom_manager_key = link_id  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Å–≤—è–∑—å –≤ –≥—Ä–∞—Ñ
                spore_manager.graph.add_edge(
                    parent_spore=parent_spore,
                    child_spore=child_spore,
                    link_type=self.safe_str_replace(link_type, 'buffer_', 'real_'),  # buffer_max ‚Üí real_max
                    link_object=visual_link
                )
                
                stats['links_created'] += 1
                
                print(f"      ‚úÖ {parent_buffer_id} ‚Üí {child_buffer_id} ({link_type})")
                
            except Exception as e:
                error_msg = f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–≤—è–∑–∏ {link.get('source_info', 'unknown')}: {e}"
                print(f"      ‚ùå {error_msg}")
                stats['errors'].append(error_msg)

    def _create_real_graph_visualization(self, spore_manager) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∞."""
        try:
            print(f"\n   üñºÔ∏è –°–û–ó–î–ê–ù–ò–ï –í–ò–ó–£–ê–õ–ò–ó–ê–¶–ò–ò –†–ï–ê–õ–¨–ù–û–ì–û –ì–†–ê–§–ê:")
            
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            buffer_dir = "buffer"
            if not os.path.exists(buffer_dir):
                os.makedirs(buffer_dir)
            
            save_path = os.path.join(buffer_dir, "real_graph_result.png")
            
            # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
            fig, ax = plt.subplots(1, 1, figsize=(14, 12))
            
            # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ä–µ–∞–ª—å–Ω—ã—Ö —Å–ø–æ—Ä–∞—Ö
            real_spores = spore_manager.objects
            real_links = spore_manager.links
            
            # 1. –†–∏—Å—É–µ–º —Å–≤—è–∑–∏ –ø–µ—Ä–≤—ã–º–∏
            self._draw_real_links(ax, real_links)
            
            # 2. –†–∏—Å—É–µ–º —Å–ø–æ—Ä—ã –ø–æ–≤–µ—Ä—Ö
            self._draw_real_spores(ax, real_spores)
            
            # 3. –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä–∞—Ñ–∏–∫–∞
            ax.set_title(f"–†–µ–∞–ª—å–Ω—ã–π –≥—Ä–∞—Ñ –ø–æ—Å–ª–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏\n"
                        f"–°–ø–æ—Ä—ã: {len(real_spores)}, "
                        f"–°–≤—è–∑–∏: {len(real_links)}")
            ax.set_xlabel("X")
            ax.set_ylabel("Y") 
            ax.grid(True, alpha=0.3)
            ax.axis('equal')
            
            # 4. –õ–µ–≥–µ–Ω–¥–∞ –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∞
            self._add_real_graph_legend(ax)
            
            plt.tight_layout()
            plt.savefig(save_path, dpi=150, bbox_inches='tight')
            plt.close()
            
            print(f"      ‚úÖ –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∞: {save_path}")
            return save_path
            
        except Exception as e:
            print(f"      ‚ùå –û—à–∏–±–∫–∞ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
            return ""

    def _draw_real_spores(self, ax, real_spores):
        """–†–∏—Å—É–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ —Å–ø–æ—Ä—ã."""
        for spore in real_spores:
            if hasattr(spore, 'calc_2d_pos'):
                pos = spore.calc_2d_pos()
                
                # –¶–≤–µ—Ç: –∑–µ–ª–µ–Ω—ã–π –¥–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö —Å–ø–æ—Ä
                color = 'lightgreen'
                edge_color = 'darkgreen'
                
                # –†–∞–∑–º–µ—Ä –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ç–∏–ø–∞
                marker_size = 120 if getattr(spore, 'is_goal', False) else 80
                
                ax.scatter(pos[0], pos[1], s=marker_size, c=color,
                          alpha=0.8, edgecolors=edge_color, linewidth=2)
                
                # –ü–æ–¥–ø–∏—Å—å
                spore_id = getattr(spore, 'id', 'unknown')
                label = self.safe_str_replace(spore_id, 'real_buffer_', '')  # üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—É—é –∑–∞–º–µ–Ω—É
                ax.annotate(label, (pos[0], pos[1]),
                           xytext=(5, 5), textcoords='offset points',
                           fontsize=9, ha='left', weight='bold')

    def _draw_real_links(self, ax, real_links):
        """–†–∏—Å—É–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ —Å–≤—è–∑–∏."""
        # –¶–≤–µ—Ç–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–≤—è–∑–µ–π
        link_colors = {
            'real_max': 'red',      # u_max - –∫—Ä–∞—Å–Ω—ã–π
            'real_min': 'blue'      # u_min - —Å–∏–Ω–∏–π  
        }
        
        for link in real_links:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ —Å–ø–æ—Ä
                parent_pos = link.parent_spore.calc_2d_pos() if hasattr(link.parent_spore, 'calc_2d_pos') else None
                child_pos = link.child_spore.calc_2d_pos() if hasattr(link.child_spore, 'calc_2d_pos') else None
                
                if parent_pos is None or child_pos is None:
                    continue
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –ø–æ —Ç–∏–ø—É —Å–≤—è–∑–∏ (–∏–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∞)
                link_type = 'real_max'  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
                if hasattr(link, 'color_key'):
                    if 'min' in str(link.color_key):
                        link_type = 'real_min'
                
                color = link_colors.get(link_type, 'gray')
                
                # –†–∏—Å—É–µ–º —Å—Ç—Ä–µ–ª–∫—É
                dx = child_pos[0] - parent_pos[0]
                dy = child_pos[1] - parent_pos[1]
                
                # –°–º–µ—â–µ–Ω–∏–µ –æ—Ç —Ü–µ–Ω—Ç—Ä–∞ —Å–ø–æ—Ä
                length = np.sqrt(dx*dx + dy*dy)
                if length > 0:
                    offset = 0.02
                    start_offset = offset / length
                    end_offset = offset / length
                    
                    start_x = parent_pos[0] + dx * start_offset
                    start_y = parent_pos[1] + dy * start_offset
                    arrow_dx = dx * (1 - 2*end_offset)
                    arrow_dy = dy * (1 - 2*end_offset)
                    
                    ax.arrow(start_x, start_y, arrow_dx, arrow_dy,
                            head_width=0.01, head_length=0.01,
                            fc=color, ec=color, alpha=0.8, linewidth=2)
                            
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ —Å–≤—è–∑–∏: {e}")

    def _add_real_graph_legend(self, ax):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –ª–µ–≥–µ–Ω–¥—É –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∞."""
        from matplotlib.lines import Line2D
        
        legend_elements = [
            # –°–ø–æ—Ä—ã
            Line2D([0], [0], marker='o', color='w', markerfacecolor='lightgreen',
                   markeredgecolor='darkgreen', markersize=10, label='–†–µ–∞–ª—å–Ω–∞—è —Å–ø–æ—Ä–∞'),
            
            # –°–≤—è–∑–∏
            Line2D([0], [0], color='red', linewidth=3, label='real_max (u_max)'),
            Line2D([0], [0], color='blue', linewidth=3, label='real_min (u_min)')
        ]
        
        ax.legend(handles=legend_elements, loc='upper right', fontsize=9)

    def _print_materialize_stats(self, stats):
        """–í—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–∞—Ç–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏."""
        print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ú–ê–¢–ï–†–ò–ê–õ–ò–ó–ê–¶–ò–ò:")
        print(f"   üåü –°–æ–∑–¥–∞–Ω–æ —Å–ø–æ—Ä: {stats['spores_created']}")
        print(f"   üîó –°–æ–∑–¥–∞–Ω–æ —Å–≤—è–∑–µ–π: {stats['links_created']}")
        
        if stats['errors']:
            print(f"   ‚ùå –û—à–∏–±–æ–∫: {len(stats['errors'])}")
            for error in stats['errors'][:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                print(f"      ‚Ä¢ {error}")
        else:
            print(f"   ‚úÖ –û—à–∏–±–æ–∫ –Ω–µ—Ç")
            
        if 'visualization_path' in stats:
            print(f"   üñºÔ∏è –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è: {stats['visualization_path']}")

    def has_buffer_data(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ –±—É—Ñ–µ—Ä–Ω–æ–º –≥—Ä–∞—Ñ–µ."""
        return bool(getattr(self, 'buffer_positions', {}))