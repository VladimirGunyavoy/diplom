from ursina import *
import numpy as np
from typing import Dict, Optional, Tuple

from ..core.spore import Spore
from ..utils.scalable import Scalable
from .color_manager import ColorManager
from ..visual.ui_manager import UIManager
from ..visual.scene_setup import SceneSetup
# from .link import Link

class ZoomManager:
    def __init__(self, scene_setup: SceneSetup, 
                 color_manager: Optional[ColorManager] = None, 
                 ui_manager: Optional[UIManager] = None):
        self.zoom_x: float = 1
        self.zoom_y: float = 1
        self.zoom_z: float = 1

        self.zoom_fact: float = 1 + 1/8

        self.a_transformation: float = 1.0
        self.b_translation: np.ndarray = np.array([0, 0, 0], dtype=float)

        self.spores_scale: float = 1.0
        self.common_scale: float = 1.0

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π ColorManager –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
        self.color_manager: ColorManager = color_manager if color_manager is not None else ColorManager()

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π UIManager –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
        self.ui_manager: UIManager = ui_manager if ui_manager is not None else UIManager(self.color_manager)

        self.objects: Dict[str, Scalable] = {}
        self.scene_setup: SceneSetup = scene_setup

        # UI —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è zoom manager —Ç–µ–ø–µ—Ä—å —Å–æ–∑–¥–∞—é—Ç—Å—è –≤ UI_setup.py
        self.ui_elements: Dict = {}

        self.invariant_point: Tuple[float, float, float] = (0, 0, 0)

        # –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Å—á–µ—Ç—á–∏–∫–∏ –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö ID
        self._global_spore_counter = 0
        self._global_link_counter = 0
        self._global_object_counter = 0
        
        # –§–ª–∞–≥ –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—ã–≤–æ–¥–∞
        self.auto_print_enabled = True

    def register_object(self, obj: Scalable, name: Optional[str] = None) -> None:
        if name is None:
            name = f"obj_{len(self.objects)}"
        self.objects[name] = obj
        obj.apply_transform(self.a_transformation, self.b_translation, spores_scale=self.spores_scale)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ–±—ä–µ–∫—Ç –ø—Ä–∏–∑—Ä–∞—á–Ω—ã–º
        is_ghost = (
            getattr(obj, 'is_ghost', False) or
            'ghost' in name.lower() or
            (hasattr(obj, 'color') and hasattr(obj.color, 'a') and getattr(obj.color, 'a', 1.0) < 0.8)
        )
        
        # üîç –û–¢–õ–ê–î–ö–ê: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –í–°–ï–• –æ–±—ä–µ–∫—Ç–æ–≤ (–≤–∫–ª—é—á–∞—è –ø—Ä–∏–∑—Ä–∞–∫–∏)
        if self.auto_print_enabled:
            if not is_ghost:
                # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                self.print_quick_info(name, obj)
    
    def print_quick_info(self, name: str, obj: Scalable) -> None:
        """
        –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–º –æ–±—ä–µ–∫—Ç–µ.
        –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–µ-–ø—Ä–∏–∑—Ä–∞—á–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤.
        """
        obj_type = type(obj).__name__
        obj_id = getattr(obj, 'id', 'N/A')
        
        print(f"üîç –î–æ–±–∞–≤–ª–µ–Ω –æ–±—ä–µ–∫—Ç: {name} ({obj_type}, ID: {obj_id})")
        print(f"   üìä –í—Å–µ–≥–æ –æ–±—ä–µ–∫—Ç–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ: {len(self.objects)}")
        
        # üîç –î–ï–¢–ê–õ–¨–ù–ê–Ø –û–¢–õ–ê–î–ö–ê –ü–û–ó–ò–¶–ò–ô –î–õ–Ø –°–ü–û–†
        if obj_type == 'Spore':
            print(f"   üìç –î–ï–¢–ê–õ–¨–ù–ê–Ø –ü–û–ó–ò–¶–ò–Ø –°–ü–û–†–´:")
            print(f"      x, y, z: ({obj.x:.6f}, {obj.y:.6f}, {obj.z:.6f})")
            print(f"      real_position: {obj.real_position}")
            if hasattr(obj, 'logic') and obj.logic:
                print(f"      logic.position_2d: {obj.logic.position_2d}")
            print(f"      is_ghost: {getattr(obj, 'is_ghost', False)}")
            print(f"      color: {getattr(obj, 'color', 'N/A')}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–∑—Ä–∞–∫–æ–≤, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        ghost_count = 0
        for n, o in self.objects.items():
            if (getattr(o, 'is_ghost', False) or
                'ghost' in n.lower() or
                (hasattr(o, 'color') and hasattr(o.color, 'a') and getattr(o.color, 'a', 1.0) < 0.8)):
                ghost_count += 1
        
        if ghost_count > 0:
            print(f"   üëª –ü—Ä–∏–∑—Ä–∞—á–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤: {ghost_count}")
        
        print()  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
    
    def enable_auto_print(self) -> None:
        """–í–∫–ª—é—á–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–≤–æ–¥ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –æ–±—ä–µ–∫—Ç–æ–≤."""
        self.auto_print_enabled = True
        print("üîç –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–≤–æ–¥ –≤–∫–ª—é—á–µ–Ω")
    
    def disable_auto_print(self) -> None:
        """–û—Ç–∫–ª—é—á–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–≤–æ–¥ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –æ–±—ä–µ–∫—Ç–æ–≤."""
        self.auto_print_enabled = False
        print("üîç –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–≤–æ–¥ –æ—Ç–∫–ª—é—á–µ–Ω")
    
    def print_all_objects(self) -> None:
        """
        –í—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å–µ—Ö –æ–±—ä–µ–∫—Ç–∞—Ö, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤ ZoomManager.
        –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä–µ–∫—Ç–æ–≤, –∏—Ö —Ç–∏–ø—ã –∏ –∏–º–µ–Ω–∞ (–∏—Å–∫–ª—é—á–∞—è –ø—Ä–∏–∑—Ä–∞—á–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã).
        """
        print(f"\nüîç ZoomManager: –û–±—ä–µ–∫—Ç—ã –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ")
        print(f"   üìä –í—Å–µ–≥–æ –æ–±—ä–µ–∫—Ç–æ–≤: {len(self.objects)}")
        
        if not self.objects:
            print("   üì≠ –ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤")
            return
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø—Ä–∏–∑—Ä–∞—á–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
        non_ghost_objects = {}
        ghost_count = 0
        
        for name, obj in self.objects.items():
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ–±—ä–µ–∫—Ç –ø—Ä–∏–∑—Ä–∞—á–Ω—ã–º
            is_ghost = (
                getattr(obj, 'is_ghost', False) or  # –ê—Ç—Ä–∏–±—É—Ç is_ghost
                'ghost' in name.lower() or          # –ò–º—è —Å–æ–¥–µ—Ä–∂–∏—Ç "ghost"
                (hasattr(obj, 'color') and hasattr(obj.color, 'a') and getattr(obj.color, 'a', 1.0) < 0.8)  # –ü—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å
            )
            
            if is_ghost:
                ghost_count += 1
            else:
                non_ghost_objects[name] = obj
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø—Ä–∏–∑—Ä–∞–∫–∞–º
        if ghost_count > 0:
            print(f"   üëª –ü—Ä–∏–∑—Ä–∞—á–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤: {ghost_count} (—Å–∫—Ä—ã—Ç—ã –∏–∑ –≤—ã–≤–æ–¥–∞)")
        
        if not non_ghost_objects:
            print("   üì≠ –ù–µ—Ç –Ω–µ-–ø—Ä–∏–∑—Ä–∞—á–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤")
            return
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –Ω–µ-–ø—Ä–∏–∑—Ä–∞—á–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –ø–æ —Ç–∏–ø–∞–º
        object_types = {}
        for name, obj in non_ghost_objects.items():
            obj_type = type(obj).__name__
            if obj_type not in object_types:
                object_types[obj_type] = []
            object_types[obj_type].append(name)
        
        # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–∏–ø–∞–º
        print(f"   üìã –¢–∏–ø—ã –æ–±—ä–µ–∫—Ç–æ–≤ (–Ω–µ-–ø—Ä–∏–∑—Ä–∞–∫–∏):")
        for obj_type, names in object_types.items():
            print(f"      ‚Ä¢ {obj_type}: {len(names)} —à—Ç.")
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–º–µ–Ω –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞
            if len(names) <= 5:
                for name in names:
                    print(f"        - {name}")
            else:
                for name in names[:3]:
                    print(f"        - {name}")
                print(f"        ... –∏ –µ—â–µ {len(names) - 3} –æ–±—ä–µ–∫—Ç–æ–≤")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –Ω–µ-–ø—Ä–∏–∑—Ä–∞—á–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
        print(f"   üÜï –ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã (–Ω–µ-–ø—Ä–∏–∑—Ä–∞–∫–∏):")
        recent_objects = list(non_ghost_objects.items())[-3:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 –Ω–µ-–ø—Ä–∏–∑—Ä–∞—á–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–∞
        for name, obj in recent_objects:
            obj_type = type(obj).__name__
            obj_id = getattr(obj, 'id', 'N/A')
            print(f"      ‚Ä¢ {name} ({obj_type}, ID: {obj_id})")
        
        print()  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
    
    def show_all_objects(self) -> None:
        """
        –†—É—á–Ω–æ–π –≤—ã–∑–æ–≤ –¥–ª—è –ø–æ–∫–∞–∑–∞ –≤—Å–µ—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –≤ ZoomManager.
        –ê–Ω–∞–ª–æ–≥–∏—á–µ–Ω print_all_objects(), –Ω–æ –Ω–µ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.
        """
        self.print_all_objects()
    
    def show_all_objects_with_ghosts(self) -> None:
        """
        –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –í–°–ï –æ–±—ä–µ–∫—Ç—ã, –≤–∫–ª—é—á–∞—è –ø—Ä–∏–∑—Ä–∞—á–Ω—ã–µ.
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø–æ–ª–Ω–æ–π –æ—Ç–ª–∞–¥–∫–∏.
        """
        print(f"\nüîç ZoomManager: –í–°–ï –æ–±—ä–µ–∫—Ç—ã (–≤–∫–ª—é—á–∞—è –ø—Ä–∏–∑—Ä–∞–∫–∏)")
        print(f"   üìä –í—Å–µ–≥–æ –æ–±—ä–µ–∫—Ç–æ–≤: {len(self.objects)}")
        
        if not self.objects:
            print("   üì≠ –ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤")
            return
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã –ø–æ —Ç–∏–ø–∞–º
        object_types = {}
        ghost_objects = {}
        
        for name, obj in self.objects.items():
            obj_type = type(obj).__name__
            if obj_type not in object_types:
                object_types[obj_type] = []
            object_types[obj_type].append(name)
            
            # –û—Ç–¥–µ–ª—å–Ω–æ —Å–æ–±–∏—Ä–∞–µ–º –ø—Ä–∏–∑—Ä–∞—á–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
            is_ghost = (
                getattr(obj, 'is_ghost', False) or
                'ghost' in name.lower() or
                (hasattr(obj, 'color') and hasattr(obj.color, 'a') and getattr(obj.color, 'a', 1.0) < 0.8)
            )
            if is_ghost:
                ghost_objects[name] = obj
        
        # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–∏–ø–∞–º
        print(f"   üìã –¢–∏–ø—ã –æ–±—ä–µ–∫—Ç–æ–≤:")
        for obj_type, names in object_types.items():
            print(f"      ‚Ä¢ {obj_type}: {len(names)} —à—Ç.")
            if len(names) <= 5:
                for name in names:
                    is_ghost = name in ghost_objects
                    ghost_marker = " üëª" if is_ghost else ""
                    print(f"        - {name}{ghost_marker}")
            else:
                for name in names[:3]:
                    is_ghost = name in ghost_objects
                    ghost_marker = " üëª" if is_ghost else ""
                    print(f"        - {name}{ghost_marker}")
                print(f"        ... –∏ –µ—â–µ {len(names) - 3} –æ–±—ä–µ–∫—Ç–æ–≤")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
        print(f"   üÜï –ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã:")
        recent_objects = list(self.objects.items())[-3:]
        for name, obj in recent_objects:
            obj_type = type(obj).__name__
            obj_id = getattr(obj, 'id', 'N/A')
            is_ghost = name in ghost_objects
            ghost_marker = " üëª" if is_ghost else ""
            print(f"      ‚Ä¢ {name} ({obj_type}, ID: {obj_id}){ghost_marker}")
        
        print()  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
    
    def print_all_object_names(self) -> None:
        """
        –í—ã–≤–æ–¥–∏—Ç –∏–º–µ–Ω–∞ –í–°–ï–• –æ–±—ä–µ–∫—Ç–æ–≤, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤ ZoomManager.
        –í–∫–ª—é—á–∞–µ—Ç –∫–∞–∫ –æ–±—ã—á–Ω—ã–µ, —Ç–∞–∫ –∏ –ø—Ä–∏–∑—Ä–∞—á–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã.
        """
        print(f"\nüîç ZoomManager: –ò–º–µ–Ω–∞ –≤—Å–µ—Ö –æ–±—ä–µ–∫—Ç–æ–≤")
        print(f"   üìä –í—Å–µ–≥–æ –æ–±—ä–µ–∫—Ç–æ–≤: {len(self.objects)}")
        
        if not self.objects:
            print("   üì≠ –ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤")
            return
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç—ã –ø–æ —Ç–∏–ø–∞–º
        object_types = {}
        ghost_objects = {}
        
        for name, obj in self.objects.items():
            obj_type = type(obj).__name__
            if obj_type not in object_types:
                object_types[obj_type] = []
            object_types[obj_type].append(name)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ–±—ä–µ–∫—Ç –ø—Ä–∏–∑—Ä–∞—á–Ω—ã–º
            is_ghost = (
                getattr(obj, 'is_ghost', False) or
                'ghost' in name.lower() or
                (hasattr(obj, 'color') and hasattr(obj.color, 'a') and getattr(obj.color, 'a', 1.0) < 0.8)
            )
            if is_ghost:
                ghost_objects[name] = obj
        
        # –í—ã–≤–æ–¥–∏–º –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã –ø–æ —Ç–∏–ø–∞–º —Å –ø–æ–º–µ—Ç–∫–∞–º–∏ –ø—Ä–∏–∑—Ä–∞–∫–æ–≤
        print(f"   üìã –í—Å–µ –æ–±—ä–µ–∫—Ç—ã –ø–æ —Ç–∏–ø–∞–º:")
        for obj_type, names in object_types.items():
            print(f"      ‚Ä¢ {obj_type}: {len(names)} —à—Ç.")
            for name in names:
                is_ghost = name in ghost_objects
                ghost_marker = " üëª" if is_ghost else ""
                print(f"        - {name}{ghost_marker}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø—Ä–∏–∑—Ä–∞–∫–∞–º
        ghost_count = len(ghost_objects)
        if ghost_count > 0:
            print(f"\n   üëª –ü—Ä–∏–∑—Ä–∞—á–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤: {ghost_count}")
            print("      –ü—Ä–∏–∑—Ä–∞–∫–∏ –ø–æ–º–µ—á–µ–Ω—ã üëª")
        else:
            print(f"\n   ‚úÖ –ü—Ä–∏–∑—Ä–∞—á–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–µ—Ç")
        
        print()  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
    
    def unregister_object(self, name: str) -> None:
        """–£–¥–∞–ª—è–µ—Ç –æ–±—ä–µ–∫—Ç –∏–∑ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è."""
        if name in self.objects:
            del self.objects[name]

    def get_unique_spore_id(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è —Å–ø–æ—Ä—ã."""
        self._global_spore_counter += 1
        return f"spore_{self._global_spore_counter}"

    def get_unique_link_id(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –ª–∏–Ω–∫–∞."""
        self._global_link_counter += 1
        return f"link_{self._global_link_counter}"

    def get_unique_object_id(self, prefix: str = "obj") -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –ª—é–±–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞."""
        self._global_object_counter += 1
        return f"{prefix}_{self._global_object_counter}"


    def identify_invariant_point(self) -> Tuple[float, float]:
        player = self.scene_setup.player
        psi = np.radians(self.scene_setup.player.rotation_y)
        phi = np.radians(self.scene_setup.player.camera_pivot.rotation_x)

        h = self.scene_setup.player.camera_pivot.world_position.y
        
        if np.tan(phi) == 0:
            # Avoid division by zero if camera is looking straight ahead
            return 0, 0

        d = (h / np.tan(phi)) 

        dx = d * np.sin(psi)
        dy = d * np.cos(psi) 

        x_0 = self.scene_setup.player.camera_pivot.world_position.x + dx
        z_0 = self.scene_setup.player.camera_pivot.world_position.z + dy

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ ui_manager.update_dynamic_elements()
        return x_0, z_0

    def update_transform(self) -> None:
        from src.visual.link import Link
        for obj in self.objects.values():
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ–±—ä–µ–∫—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –∏–º–µ–µ—Ç –≤–∞–ª–∏–¥–Ω—ã–π NodePath
                if isinstance(obj, Link):
                    obj.update_geometry()
                if hasattr(obj, 'enabled') and obj.enabled and hasattr(obj, 'position'):
                    obj.apply_transform(self.a_transformation, self.b_translation, spores_scale=self.spores_scale)
                
            except (AssertionError, AttributeError, RuntimeError) as e:
                # –û–±—ä–µ–∫—Ç –Ω–µ–≤–∞–ª–∏–¥–µ–Ω - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –±–µ–∑ –∫—Ä–∞—à–∞
                continue
        # self.scene_setup.player.speed = self.scene_setup.base_speed * self.a_transformation
    
    def change_zoom(self, sign: int) -> None:
        inv = np.array(self.identify_invariant_point())
        inv_3d = np.array([inv[0], 0, inv[1]])

        zoom_multiplier = self.zoom_fact ** sign
        self.a_transformation *= zoom_multiplier
        self.b_translation = zoom_multiplier * self.b_translation + (1 - zoom_multiplier) * inv_3d
        self.update_transform()

    def reset_all(self) -> None:
        self.a_transformation = 1
        self.b_translation = np.array([0, 0, 0], dtype=float)
        self.spores_scale = 1
        self.update_transform()
        self.scene_setup.player.speed = int(self.scene_setup.base_speed)
        self.scene_setup.player.position = self.scene_setup.base_position



    def scale_spores(self, sign: int) -> None:
        self.spores_scale *= self.zoom_fact ** sign
        
        self.update_transform()

    def zoom_in(self) -> None:
        """–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –º–∞—Å—à—Ç–∞–± (–ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç)."""
        self.change_zoom(1)

    def zoom_out(self) -> None:
        """–£–º–µ–Ω—å—à–∞–µ—Ç –º–∞—Å—à—Ç–∞–± (–æ—Ç–¥–∞–ª—è–µ—Ç)."""
        self.change_zoom(-1)

    def reset_zoom(self) -> None:
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –≤—Å–µ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é."""
        self.reset_all()

    def increase_spores_scale(self) -> None:
        """–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –º–∞—Å—à—Ç–∞–± —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–ø–æ—Ä."""
        self.scale_spores(1)

    def decrease_spores_scale(self) -> None:
        """–£–º–µ–Ω—å—à–∞–µ—Ç –º–∞—Å—à—Ç–∞–± —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–ø–æ—Ä."""
        self.scale_spores(-1)



