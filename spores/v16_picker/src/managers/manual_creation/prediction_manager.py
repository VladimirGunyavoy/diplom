from typing import Optional, List
import numpy as np
from ursina import destroy

from .shared_dependencies import SharedDependencies
from ...visual.prediction_visualizer import PredictionVisualizer
from ...visual.link import Link
from ...core.spore_graph import SporeGraph

# –§–ª–∞–≥ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —á–∞—Å—Ç—ã–º–∏ –ª–æ–≥–∞–º–∏ PredictionManager
DEBUG_PM_SPAM = False  # –≤—ã–∫–ª—é—á–∞–µ–º —á–∞—Å—Ç—ã–µ –ª–æ–≥–∏ PredictionManager

class PredictionManager:
    """
    –£–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è–º–∏ min/max —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –ø—Ä–∏–∑—Ä–∞—á–Ω—ã–º–∏ –¥–µ—Ä–µ–≤—å—è–º–∏.

    –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏:
    - –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π min/max —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è (4 –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è)
    - –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–∑—Ä–∞—á–Ω—ã—Ö –¥–µ—Ä–µ–≤—å–µ–≤ –¥–ª—è –ø—Ä–µ–≤—å—é
    - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–∏–Ω–∫–∞–º–∏ –∫ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è–º
    - –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
    """

    def __init__(self, deps: SharedDependencies, manual_spore_manager=None):
        self.deps = deps
        self.manual_spore_manager = manual_spore_manager  # –°—Å—ã–ª–∫–∞ –Ω–∞ ManualSporeManager

        # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è min/max —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        self.prediction_visualizers: List[PredictionVisualizer] = []
        self.prediction_links: List[Link] = []  # –õ–∏–Ω–∫–∏ –æ—Ç –ø—Ä–µ–≤—å—é —Å–ø–æ—Ä—ã –∫ –ø—Ä–∏–∑—Ä–∞–∫–∞–º
        self.show_predictions = True

        # –ü—Ä–∏–∑—Ä–∞—á–Ω—ã–π –≥—Ä–∞—Ñ —Å–≤—è–∑–µ–π  
        self.ghost_graph = SporeGraph(graph_type='ghost')
        print("   ‚úì Ghost SporeGraph –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ SharedDependencies
        self.min_control = deps.min_control
        self.max_control = deps.max_control

        # –¢–µ–∫—É—â–∞—è –≥–ª—É–±–∏–Ω–∞ –¥–µ—Ä–µ–≤–∞ –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
        self.tree_depth = 2
        
        # üîç –§–ª–∞–≥ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –æ—Ç–ª–∞–¥–∫–∏ –ø—Ä–∏–∑—Ä–∞—á–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞
        self.debug_ghost_tree = False

        print(f"   ‚úì Prediction Manager —Å–æ–∑–¥–∞–Ω (—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {self.min_control} .. {self.max_control})")

    def update_predictions(self, preview_spore, preview_position_2d: np.ndarray, creation_mode: str, tree_depth: int, ghost_dt_vector=None) -> None:
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è.

        Args:
            preview_spore: –ü—Ä–µ–≤—å—é —Å–ø–æ—Ä–∞ –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
            preview_position_2d: –ü–æ–∑–∏—Ü–∏—è –ø—Ä–µ–≤—å—é –≤ 2D
            creation_mode: 'spores' –∏–ª–∏ 'tree'
            tree_depth: –ì–ª—É–±–∏–Ω–∞ –¥–µ—Ä–µ–≤–∞ –¥–ª—è —Ä–µ–∂–∏–º–∞ 'tree'
        """
        if DEBUG_PM_SPAM: print(f"[PM] update_predictions mode={creation_mode} depth={tree_depth} ghosts={len(self.prediction_visualizers)} links={len(self.prediction_links)}")
        
        # print(f"üîç PredictionManager.update_predictions –≤—ã–∑–≤–∞–Ω:")
        # print(f"   show_predictions: {self.show_predictions}")
        # print(f"   preview_spore: {preview_spore is not None}")
        # print(f"   creation_mode: {creation_mode}")
        # print(f"   tree_depth: {tree_depth}")
        
        if not self.show_predictions:
            print("   ‚ùå –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã (show_predictions=False)")
            return
        
        if not preview_spore:
            print("   ‚ùå –ù–µ—Ç –ø—Ä–µ–≤—å—é —Å–ø–æ—Ä—ã")
            return

        self.tree_depth = tree_depth
        # print(f"   ‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã, —Å–æ–∑–¥–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è...")

        if creation_mode == 'tree':
            # print("   üå≤ –†–µ–∂–∏–º –¥–µ—Ä–µ–≤–∞")
            self._update_tree_preview(preview_spore, preview_position_2d, ghost_dt_vector)
        else:
            # print("   üß¨ –†–µ–∂–∏–º —Å–ø–æ—Ä")
            self._update_spore_predictions(preview_spore, preview_position_2d)
        
        # print(f"   üìä –°–æ–∑–¥–∞–Ω–æ visualizers: {len(self.prediction_visualizers)}")
        # print(f"   üìä –°–æ–∑–¥–∞–Ω–æ links: {len(self.prediction_links)}")

    def _update_spore_predictions(self, preview_spore, preview_position_2d: np.ndarray) -> None:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è: 2 –≤–ø–µ—Ä–µ–¥ (min/max) + 2 –Ω–∞–∑–∞–¥ (min/max)."""
        
        # print(f"üîç _update_spore_predictions –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç—É")
        
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
        self.clear_predictions()

        if not preview_spore:
            return

        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π dt
            dt = self._get_current_dt()

            # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è 4 –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π: forward/backward + min/max
            prediction_configs = [
                {'name': 'forward_min', 'control': self.min_control, 'dt': dt, 'direction': 'forward'},
                {'name': 'forward_max', 'control': self.max_control, 'dt': dt, 'direction': 'forward'},
                {'name': 'backward_min', 'control': self.min_control, 'dt': -dt, 'direction': 'backward'},
                {'name': 'backward_max', 'control': self.max_control, 'dt': -dt, 'direction': 'backward'}
            ]

            for config in prediction_configs:
                # –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
                predicted_pos_2d = self.deps.pendulum.step(
                    preview_position_2d,
                    config['control'],
                    config['dt']
                )

                # –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
                prediction_viz = PredictionVisualizer(
                    parent_spore=preview_spore,
                    color_manager=self.deps.color_manager,
                    zoom_manager=self.deps.zoom_manager,
                    cost_function=None,
                    config={
                        'spore': {'show_ghosts': True},
                        'angel': {'show_angels': False, 'show_pillars': False}
                    },
                    spore_id=self.deps.zoom_manager.get_unique_spore_id()
                )

                # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
                prediction_viz.update(predicted_pos_2d)

                # –°–æ–∑–¥–∞–µ–º –ª–∏–Ω–∫ –æ—Ç –ø—Ä–µ–≤—å—é —Å–ø–æ—Ä—ã –∫ –ø—Ä–∏–∑—Ä–∞–∫—É
                if prediction_viz.ghost_spore:
                    # ‚úÖ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–≥–æ –ø–æ –∑–Ω–∞–∫—É dt:
                    #   dt > 0  ‚Üí preview ‚Üí ghost (forward)
                    #   dt < 0  ‚Üí ghost ‚Üí preview (backward)
                    if config['dt'] > 0:
                        parent_spore = preview_spore
                        child_spore = prediction_viz.ghost_spore
                    else:
                        parent_spore = prediction_viz.ghost_spore
                        child_spore = preview_spore

                    prediction_link = Link(
                        parent_spore=parent_spore,
                        child_spore=child_spore,
                        color_manager=self.deps.color_manager,
                        zoom_manager=self.deps.zoom_manager,
                        config=self.deps.config
                    )

                    # ‚úÖ –¶–≤–µ—Ç —Ç–æ–ª—å–∫–æ –ø–æ –∑–Ω–∞–∫—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                    if config['control'] > 0:
                        link_color_name = 'ghost_max'  # –ö—Ä–∞—Å–Ω—ã–π –¥–ª—è max
                    else:
                        link_color_name = 'ghost_min'  # –°–∏–Ω–∏–π –¥–ª—è min

                    prediction_link.color = self.deps.color_manager.get_color('link', link_color_name)

                    # –û–±–Ω–æ–≤–ª—è–µ–º –≥–µ–æ–º–µ—Ç—Ä–∏—é –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤ zoom manager
                    prediction_link.update_geometry()
                    link_id = self.deps.zoom_manager.get_unique_link_id()
                    self.deps.zoom_manager.register_object(prediction_link, link_id)
                    prediction_link._zoom_manager_key = link_id  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è

                    self.prediction_links.append(prediction_link)

                self.prediction_visualizers.append(prediction_viz)

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π: {e}")
            import traceback
            traceback.print_exc()

    def _update_tree_preview(self, preview_spore, preview_position_2d: np.ndarray, ghost_dt_vector=None) -> None:
        """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–∏–∑—Ä–∞—á–Ω–æ–µ –¥–µ—Ä–µ–≤–æ –¥–ª—è –ø—Ä–µ–≤—å—é."""

        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
        self.clear_predictions()
        if DEBUG_PM_SPAM: print("[PM] _update_tree_preview: cleared old predictions")

        if not preview_spore:
            return

        try:
            # –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è –¥–µ—Ä–µ–≤–∞
            from ...logic.tree.spore_tree import SporeTree
            from ...logic.tree.spore_tree_config import SporeTreeConfig

            if ghost_dt_vector is not None:
                try:
                    if DEBUG_PM_SPAM: print(f"[PredictionManager] ghost_dt_vector head: " +
                          ", ".join(f"{v:+.5f}" for v in list(ghost_dt_vector[:4])))
                except Exception:
                    pass

            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π dt
            dt = self._get_current_dt()

            # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥ –¥–µ—Ä–µ–≤–∞
            factor = self.deps.config.get('tree', {}).get('dt_grandchildren_factor', 0.05)
            tree_config = SporeTreeConfig(
                initial_position=preview_position_2d.copy(),
                dt_base=dt,
                dt_grandchildren_factor=factor,
                show_debug=False
            )

            # –°–æ–∑–¥–∞–µ–º –ª–æ–≥–∏–∫—É –¥–µ—Ä–µ–≤–∞ —Å —É—á–µ—Ç–æ–º ghost_tree_dt_vector
            if ghost_dt_vector is not None and len(ghost_dt_vector) == 12:
                # print(f"üéØ –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π ghost_tree_dt_vector –¥–ª—è –ø—Ä–∏–∑—Ä–∞—á–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞")  # –û—Ç–∫–ª—é—á–µ–Ω –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Å–ø–∞–º–∞
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º dt –∏–∑ –≤–µ–∫—Ç–æ—Ä–∞ (–±–µ—Ä–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è SporeTree)
                dt_children_abs = np.abs(ghost_dt_vector[:4])
                dt_grandchildren_abs = np.abs(ghost_dt_vector[4:12])
                
                tree_logic = SporeTree(
                    pendulum=self.deps.pendulum,
                    config=tree_config,
                    dt_children=dt_children_abs,
                    dt_grandchildren=dt_grandchildren_abs,
                    auto_create=False
                )
            else:
                # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ
                tree_logic = SporeTree(
                    pendulum=self.deps.pendulum,
                    config=tree_config,
                    auto_create=False
                )

            # –°–æ–∑–¥–∞–µ–º –¥–µ—Ç–µ–π
            tree_logic.create_children()

            # –°–æ–∑–¥–∞–µ–º –≤–Ω—É–∫–æ–≤ –µ—Å–ª–∏ –Ω—É–∂–Ω–∞ –≥–ª—É–±–∏–Ω–∞ 2
            if self.tree_depth >= 2:
                tree_logic.create_grandchildren()

            if DEBUG_PM_SPAM: print(f"[PM] _update_tree_preview: children={len(tree_logic.children)} gc={len(getattr(tree_logic,'grandchildren',[]))} dt={dt:.6f}")

            # üîß –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ —Å –Ω–æ–≤—ã–º–∏ dt
            if ghost_dt_vector is not None and len(ghost_dt_vector) == 12:
                self._recalculate_positions_with_new_dt(tree_logic, ghost_dt_vector, preview_position_2d)

            # DEBUG: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ dt –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø—Ä–∏–º–µ–Ω–∏–ª–∏—Å—å –∫ –¥–µ—Ä–µ–≤—É (–æ—Ç–∫–ª—é—á–µ–Ω–æ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Å–ø–∞–º–∞)
            # print(f"üîç DEBUG: tree_logic —Å–æ–∑–¥–∞–Ω:")
            # print(f"   –î–µ—Ç–∏ dt: {[child['dt'] for child in tree_logic.children]}")
            # if hasattr(tree_logic, 'grandchildren') and tree_logic.grandchildren:
            #     print(f"   –í–Ω—É–∫–∏ dt: {[gc['dt'] for gc in tree_logic.grandchildren]}")

            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –ø—Ä–∏–∑—Ä–∞—á–Ω—ã–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
            self._create_ghost_tree_from_logic(tree_logic, preview_spore)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–∏–∑—Ä–∞—á–Ω–æ–µ –¥–µ—Ä–µ–≤–æ –¥–ª—è merge –∏ debug
            if self.manual_spore_manager:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±—ã–ª –ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π tree_logic –æ–±—ä–µ–¥–∏–Ω–µ–Ω
                old_tree_logic = getattr(self.manual_spore_manager, '_last_tree_logic', None)
                was_modified = (old_tree_logic and 
                               hasattr(old_tree_logic, '_grandchildren_modified') and 
                               old_tree_logic._grandchildren_modified)
                
                # –ï—Å–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –¥–µ—Ä–µ–≤–æ –±—ã–ª–æ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–æ, –∫–æ–ø–∏—Ä—É–µ–º —Ñ–ª–∞–≥ –≤ –Ω–æ–≤–æ–µ
                if was_modified:
                    tree_logic._grandchildren_modified = True
                
                self.manual_spore_manager._last_tree_logic = tree_logic

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–∑—Ä–∞—á–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞: {e}")

    def _recalculate_positions_with_new_dt(self, tree_logic, ghost_dt_vector, initial_position):
        """
        üîß –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ—Ç –ø–æ–∑–∏—Ü–∏–∏ –≤—Å–µ—Ö —É–∑–ª–æ–≤ –¥–µ—Ä–µ–≤–∞ —Å –Ω–æ–≤—ã–º–∏ dt.
        
        Args:
            tree_logic: SporeTree —Å –Ω–æ–≤—ã–º–∏ dt
            ghost_dt_vector: –í–µ–∫—Ç–æ—Ä –∏–∑ 12 dt (4 –¥–µ—Ç–µ–π + 8 –≤–Ω—É–∫–æ–≤)
            initial_position: –ù–∞—á–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –∫–æ—Ä–Ω—è –¥–µ—Ä–µ–≤–∞
        """
        try:
            if self.debug_ghost_tree:
                print(f"   üîß –ü–ï–†–ï–°–ß–ï–¢ –ü–û–ó–ò–¶–ò–ô: –ù–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–µ—Å—á–µ—Ç —Å –Ω–æ–≤—ã–º–∏ dt")
                print(f"      –ù–∞—á–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è: {initial_position}")
                print(f"      –ù–æ–≤—ã–µ dt –¥–µ—Ç–µ–π: {ghost_dt_vector[:4]}")
                print(f"      –ù–æ–≤—ã–µ dt –≤–Ω—É–∫–æ–≤: {ghost_dt_vector[4:12]}")
            
            # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –¥–µ—Ç–µ–π
            for i, child_data in enumerate(tree_logic.children):
                if i < len(ghost_dt_vector[:4]):
                    new_dt = float(ghost_dt_vector[i])
                    control = child_data.get('control', 0.0)
                    new_position = self.deps.pendulum.step(initial_position, control, new_dt)
                    child_data['position'] = new_position
                    child_data['dt'] = new_dt   # ‚Üê –î–û–ë–ê–í–õ–ï–ù–û: –∞–∫—Ç—É–∞–ª–∏–∑–∏—Ä—É–µ–º dt (—Å–æ—Ö—Ä–∞–Ω—è–µ–º –∑–Ω–∞–∫)
                    
                    if self.debug_ghost_tree:
                        old_pos = child_data.get('original_position', 'N/A')
                        print(f"      –†–µ–±–µ–Ω–æ–∫ {i}: dt={new_dt:+.6f}, control={control:+.6f}, pos={old_pos} ‚Üí {new_position}")
                        child_data['original_position'] = old_pos
            
            # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –≤–Ω—É–∫–æ–≤
            if hasattr(tree_logic, 'grandchildren') and tree_logic.grandchildren:
                for i, grandchild_data in enumerate(tree_logic.grandchildren):
                    if i < len(ghost_dt_vector[4:12]):
                        new_dt = float(ghost_dt_vector[4 + i])
                        control = grandchild_data.get('control', 0.0)
                        parent_idx = grandchild_data['parent_idx']
                        if parent_idx < len(tree_logic.children):
                            parent_position = tree_logic.children[parent_idx]['position']
                            new_position = self.deps.pendulum.step(parent_position, control, new_dt)
                            grandchild_data['position'] = new_position
                            grandchild_data['dt'] = new_dt  # ‚Üê –î–û–ë–ê–í–õ–ï–ù–û
                            
                            if self.debug_ghost_tree:
                                old_pos = grandchild_data.get('original_position', 'N/A')
                                print(f"      –í–Ω—É–∫ {i}: dt={new_dt:+.6f}, control={control:+.6f}, pos={old_pos} ‚Üí {new_position}")
                                grandchild_data['original_position'] = old_pos
            
            if self.debug_ghost_tree:
                print(f"   üîß –ü–ï–†–ï–°–ß–ï–¢ –ü–û–ó–ò–¶–ò–ô: –ó–∞–≤–µ—Ä—à–µ–Ω")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—á–µ—Ç–∞ –ø–æ–∑–∏—Ü–∏–π: {e}")
            import traceback
            traceback.print_exc()

    def _create_ghost_tree_from_logic(self, tree_logic, preview_spore):
        """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–∏–∑—Ä–∞—á–Ω—ã–µ —Å–ø–æ—Ä—ã –∏ –ª–∏–Ω–∫–∏ –∏–∑ –ª–æ–≥–∏–∫–∏ –¥–µ—Ä–µ–≤–∞."""

        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–∑—Ä–∞—á–Ω—ã–µ —Å–ø–æ—Ä—ã –¥–ª—è –¥–µ—Ç–µ–π
        child_ghosts = []
        for i, child_data in enumerate(tree_logic.children):
            # üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–µ–±–µ–Ω–∫–∞ –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –ø—Ä–∏–∑—Ä–∞–∫–∞ (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞ –æ—Ç–ª–∞–¥–∫–∞)
            if hasattr(self, 'debug_ghost_tree') and self.debug_ghost_tree:
                print(f"   üîç –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–∑—Ä–∞–∫ —Ä–µ–±–µ–Ω–∫–∞ {i}:")
                print(f"      –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: dt={child_data['dt']:+.6f}, pos={child_data['position']}")
            
            ghost_viz = self._create_ghost_spore_from_data(child_data, f"child_{i}", 0.4)
            if ghost_viz and ghost_viz.ghost_spore:
                child_ghosts.append(ghost_viz.ghost_spore)

        # DEBUG: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –ø—Ä–∏–∑—Ä–∞—á–Ω—ã—Ö –¥–µ—Ç–µ–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–æ—Ç–∫–ª—é—á–µ–Ω–æ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Å–ø–∞–º–∞)
        # if len(child_ghosts) > 0:
        #     print(f"üîç DEBUG: –ü–æ–∑–∏—Ü–∏–∏ –ø—Ä–∏–∑—Ä–∞—á–Ω—ã—Ö –¥–µ—Ç–µ–π:")
        #     for i, (child_ghost, child_data) in enumerate(zip(child_ghosts, tree_logic.children)):
        #         if child_ghost:
        #             actual_pos = (child_ghost.x, child_ghost.z)  
        #             expected_pos = (child_data['position'][0], child_data['position'][1])
        #             print(f"   Child {i}: expected={expected_pos}, actual={actual_pos}, dt={child_data['dt']:+.6f}")

        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–∑—Ä–∞—á–Ω—ã–µ —Å–ø–æ—Ä—ã –¥–ª—è –≤–Ω—É–∫–æ–≤ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        grandchild_ghosts = []
        if hasattr(tree_logic, 'grandchildren') and tree_logic.grandchildren:
            for i, grandchild_data in enumerate(tree_logic.grandchildren):
                # üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤–Ω—É–∫–∞ –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –ø—Ä–∏–∑—Ä–∞–∫–∞ (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞ –æ—Ç–ª–∞–¥–∫–∞)
                if self.debug_ghost_tree:
                    print(f"   üîç –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–∑—Ä–∞–∫ –≤–Ω—É–∫–∞ {i}:")
                    print(f"      –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: dt={grandchild_data['dt']:+.6f}, pos={grandchild_data['position']}")
                
                ghost_viz = self._create_ghost_spore_from_data(grandchild_data, f"grandchild_{i}", 0.3)
                if ghost_viz and ghost_viz.ghost_spore:
                    grandchild_ghosts.append(ghost_viz.ghost_spore)

        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–∑—Ä–∞—á–Ω—ã–µ –ª–∏–Ω–∫–∏ –æ—Ç –∫–æ—Ä–Ω—è –∫ –¥–µ—Ç—è–º
        for i, child_ghost in enumerate(child_ghosts):
            if child_ghost and i < len(tree_logic.children):
                child_data = tree_logic.children[i]
                
                # ‚úÖ –¶–≤–µ—Ç —Ç–æ–ª—å–∫–æ –ø–æ –∑–Ω–∞–∫—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                link_color = 'ghost_max' if child_data['control'] > 0 else 'ghost_min'

                # ‚úÖ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–≥–æ –ø–æ –∑–Ω–∞–∫—É dt:
                #   dt > 0  ‚Üí root(preview) ‚Üí child
                #   dt < 0  ‚Üí child ‚Üí root(preview)
                if child_data['dt'] > 0:
                    parent_spore = preview_spore
                    child_link_spore = child_ghost
                else:
                    parent_spore = child_ghost
                    child_link_spore = preview_spore

                self._create_ghost_link(
                    parent_spore,
                    child_link_spore,
                    f"root_to_child_{i}",
                    link_color
                )

        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–∑—Ä–∞—á–Ω—ã–µ –ª–∏–Ω–∫–∏ –æ—Ç –¥–µ—Ç–µ–π –∫ –≤–Ω—É–∫–∞–º (–µ—Å–ª–∏ tree_depth >= 2)
        if self.tree_depth >= 2 and grandchild_ghosts:
            for i, grandchild_ghost in enumerate(grandchild_ghosts):
                if grandchild_ghost:
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—è –≤–Ω—É–∫–∞ –∏–∑ –¥–∞–Ω–Ω—ã—Ö
                    grandchild_data = tree_logic.grandchildren[i]
                    parent_idx = grandchild_data['parent_idx']

                    if parent_idx < len(child_ghosts) and child_ghosts[parent_idx]:
                        # ‚úÖ –¶–≤–µ—Ç –ø–æ –∑–Ω–∞–∫—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–Ω—É–∫–∞
                        link_color = 'ghost_max' if grandchild_data['control'] > 0 else 'ghost_min'

                        # ‚úÖ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ –∑–Ω–∞–∫—É dt:
                        #   dt > 0  ‚Üí child ‚Üí grandchild
                        #   dt < 0  ‚Üí grandchild ‚Üí child
                        if grandchild_data['dt'] > 0:
                            parent_spore = child_ghosts[parent_idx]
                            child_link_spore = grandchild_ghost
                        else:
                            parent_spore = grandchild_ghost
                            child_link_spore = child_ghosts[parent_idx]

                        self._create_ghost_link(
                            parent_spore,
                            child_link_spore,
                            f"child_{parent_idx}_to_grandchild_{i}",
                            link_color
                        )

    def _create_ghost_spore_from_data(self, spore_data, name_suffix, alpha):
        """–°–æ–∑–¥–∞–µ—Ç –æ–¥–Ω—É –ø—Ä–∏–∑—Ä–∞—á–Ω—É—é —Å–ø–æ—Ä—É –∏–∑ –¥–∞–Ω–Ω—ã—Ö –¥–µ—Ä–µ–≤–∞."""

        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é —Å–ø–æ—Ä—ã
        final_position = spore_data['position']  # –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å [x, z]
        
        # üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –ø–æ–ª—É—á–∞–µ–º –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–∑—Ä–∞–∫–∞ (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞ –æ—Ç–ª–∞–¥–∫–∞)
        if self.debug_ghost_tree:
            print(f"         üîç –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–∑—Ä–∞–∫–∞:")
            print(f"            final_position: {final_position}")
            print(f"            spore_data keys: {list(spore_data.keys())}")

        # –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
        prediction_viz = PredictionVisualizer(
            parent_spore=None,  # –î–ª—è –ø—Ä–∏–∑—Ä–∞–∫–æ–≤ –¥–µ—Ä–µ–≤–∞ –Ω–µ –Ω—É–∂–µ–Ω parent
            color_manager=self.deps.color_manager,
            zoom_manager=self.deps.zoom_manager,
            cost_function=None,
            config={
                'spore': {'show_ghosts': True},
                'angel': {'show_angels': False, 'show_pillars': False}
            },
            spore_id=self.deps.zoom_manager.get_unique_spore_id()
        )

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –ø—Ä–∏–∑—Ä–∞–∫–∞
        if prediction_viz.ghost_spore:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å
            base_color = self.deps.color_manager.get_color('spore', 'default')
            try:
                prediction_viz.ghost_spore.color = (base_color.r, base_color.g, base_color.b, alpha)
            except:
                prediction_viz.ghost_spore.color = (0.6, 0.4, 0.9, alpha)

            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é
            prediction_viz.update(final_position)

            # –ü—Ä–∏–∑—Ä–∞—á–Ω—ã–µ —Å–ø–æ—Ä—ã –±–æ–ª—å—à–µ –Ω–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—é—Ç—Å—è –≤ ZoomManager - –æ–Ω–∏ –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–µ
            # –ü—Ä–æ—Å—Ç–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º ID
            prediction_viz.ghost_spore.id = f"tree_ghost_{name_suffix}"

        # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
        self.prediction_visualizers.append(prediction_viz)
        return prediction_viz

    def _create_ghost_link(self, parent_spore, child_spore, link_suffix, color_name):
        """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–∏–∑—Ä–∞—á–Ω—ã–π –ª–∏–Ω–∫ –º–µ–∂–¥—É –¥–≤—É–º—è —Å–ø–æ—Ä–∞–º–∏."""
        try:
            ghost_link = Link(
                parent_spore=parent_spore,
                child_spore=child_spore,
                color_manager=self.deps.color_manager,
                zoom_manager=self.deps.zoom_manager,
                config=self.deps.config
            )

            # ‚úÖ –¶–≤–µ—Ç —Å –∞–ª—å—Ñ–æ–π –∏–∑ colors.json
            ghost_link.color = self.deps.color_manager.get_color('link', color_name)
            # —É–±—Ä–∞—Ç—å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—É—é —É—Å—Ç–∞–Ω–æ–≤–∫—É alpha
            # (–µ—Å–ª–∏ –æ—á–µ–Ω—å –Ω—É–∂–Ω–æ ‚Äî –¥–µ–ª–∞–π—Ç–µ —ç—Ç–æ —á–µ—Ä–µ–∑ colors.json –∏–ª–∏ config)

            # –û–±–Ω–æ–≤–ª—è–µ–º –≥–µ–æ–º–µ—Ç—Ä–∏—é –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º
            ghost_link.update_geometry()
            link_id = self.deps.zoom_manager.get_unique_link_id()
            self.deps.zoom_manager.register_object(ghost_link, link_id)
            ghost_link._zoom_manager_key = link_id  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è

            # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
            self.prediction_links.append(ghost_link)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–∑—Ä–∞—á–Ω—É—é —Å–≤—è–∑—å –≤ –≥—Ä–∞—Ñ
            self.ghost_graph.add_edge(
                parent_spore=parent_spore,
                child_spore=child_spore,
                link_type=color_name,  # ghost_max –∏–ª–∏ ghost_min
                link_object=ghost_link
            )
            
            if DEBUG_PM_SPAM: print(f"[PM] +ghost_link {link_suffix}")

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–∑—Ä–∞—á–Ω–æ–≥–æ –ª–∏–Ω–∫–∞ {link_suffix}: {e}")

    def clear_predictions(self) -> None:
        """–û—á–∏—â–∞–µ—Ç –≤—Å–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –∏ –∏—Ö –ª–∏–Ω–∫–∏."""
        # –û—á–∏—â–∞–µ–º –ø—Ä–∏–∑—Ä–∞—á–Ω—ã–π –≥—Ä–∞—Ñ
        self.ghost_graph.clear()
        
        if DEBUG_PM_SPAM: print(f"[PM] clear_predictions: removing {len(self.prediction_visualizers)} ghosts, {len(self.prediction_links)} links")

        # –ü—Ä–∏–∑—Ä–∞—á–Ω—ã–µ —Å–ø–æ—Ä—ã –±–æ–ª—å—à–µ –Ω–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—é—Ç—Å—è –≤ ZoomManager, –ø—Ä–æ—Å—Ç–æ —É–Ω–∏—á—Ç–æ–∂–∞–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä—ã
        for viz in self.prediction_visualizers:
            viz.destroy()
        self.prediction_visualizers.clear()

        # –û—á–∏—â–∞–µ–º –ª–∏–Ω–∫–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
        for i, link in enumerate(self.prediction_links):
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –∫–ª—é—á –µ—Å–ª–∏ –µ—Å—Ç—å
            if hasattr(link, '_zoom_manager_key'):
                try:
                    self.deps.zoom_manager.unregister_object(link._zoom_manager_key)
                except:
                    pass
            else:
                # Fallback - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –∫–ª—é—á –ª–∏–Ω–∫–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
                link_key = getattr(link, '_zoom_manager_key', None)
                if link_key:
                    try:
                        self.deps.zoom_manager.unregister_object(link_key)
                    except:
                        pass

            try:
                destroy(link)
            except:
                pass
        self.prediction_links.clear()

        if DEBUG_PM_SPAM: print("[PM] clear_predictions: done")

    def set_show_predictions(self, enabled: bool) -> None:
        """–í–∫–ª—é—á–∞–µ—Ç/–≤—ã–∫–ª—é—á–∞–µ—Ç –ø–æ–∫–∞–∑ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π."""
        self.show_predictions = enabled
        if not enabled:
            self.clear_predictions()

    def _get_current_dt(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π dt –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞."""
        dt = self.deps.config.get('pendulum', {}).get('dt', 0.1)
        if DEBUG_PM_SPAM: print(f"[PM] _get_current_dt -> {dt}")
        return dt

    def update_links_max_length(self, max_length: Optional[float]) -> None:
        """–û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç –¥–ª–∏–Ω—É –≤—Å–µ—Ö –ø—Ä–∏–∑—Ä–∞—á–Ω—ã—Ö –ª–∏–Ω–∫–æ–≤ –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –≥–µ–æ–º–µ—Ç—Ä–∏—é."""
        if DEBUG_PM_SPAM: print(f"[PM] update_links_max_length: set to {max_length}, links={len(getattr(self,'prediction_links',[]))}")
        for link in getattr(self, 'prediction_links', []):
            try:
                link.set_max_length(max_length)
            except Exception as e:
                print(f"[PredictionManager] –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å max_length –ª–∏–Ω–∫–∞: {e}")

    def destroy(self) -> None:
        """–û—á–∏—â–∞–µ—Ç –≤—Å–µ —Ä–µ—Å—É—Ä—Å—ã –º–µ–Ω–µ–¥–∂–µ—Ä–∞."""
        self.clear_predictions()
        print("   ‚úì Prediction Manager —É–Ω–∏—á—Ç–æ–∂–µ–Ω")

    def rebuild_ghost_tree(self):
        """
        –ß–∏—Ç–∞–µ—Ç dt-–≤–µ–∫—Ç–æ—Ä –∏–∑ self.deps.manual_spore_manager (–∏–ª–∏ self.manual_spore_manager)
        –∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞—ë—Ç –ø—Ä–∏–∑—Ä–∞—á–Ω–æ–µ –¥–µ—Ä–µ–≤–æ + –ª–∏–Ω–∫–∏.
        """
        msm = getattr(self.deps, "manual_spore_manager", None)
        if msm is None:
            msm = getattr(self, "manual_spore_manager", None)
        if msm is None:
            print("[PM.rebuild_ghost_tree] no manual_spore_manager")
            return

        dt_vec = getattr(msm, "ghost_dt_vector", None)
        if dt_vec is None:
            print("[PM.rebuild_ghost_tree] no ghost_dt_vector")
            return

        # 1) –æ—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –ø—Ä–∏–∑—Ä–∞–∫–∏/–ª–∏–Ω–∫–∏
        try:
            self.clear_predictions()  # –µ—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å —Ç–∞–∫–æ–π –º–µ—Ç–æ–¥
        except Exception:
            pass
        for ln in getattr(self, "prediction_links", []):
            try:
                ln.destroy()
            except Exception:
                pass
        self.prediction_links = []

        # 2) –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –ø—Ä–∏–∑—Ä–∞—á–Ω–æ–µ –¥–µ—Ä–µ–≤–æ –ø–æ dt_vec
        try:
            # –ø–æ–¥—Å—Ç–∞–≤—å —Å–≤–æ–π —Ä–µ–∞–ª—å–Ω—ã–π –∫–æ–Ω–≤–µ–π–µ—Ä –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –ø—Ä–∏–∑—Ä–∞—á–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞
            ghosts = self.deps.spore_manager.build_ghost_tree_from_dt_vector(dt_vec)
            # 3) –ø–æ–≤–µ—Å–∏—Ç—å –Ω–æ–≤—ã–µ –ª–∏–Ω–∫–∏
            self.prediction_links = self._make_links_for_ghosts(ghosts)
            print("üîÑ –ü—Ä–∏–∑—Ä–∞—á–Ω–æ–µ –¥–µ—Ä–µ–≤–æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–æ –ø–æ—Å–ª–µ —Ä–µ—Å–∫–µ–π–ª–∞ dt")
        except Exception as ex:
            print(f"[PM.rebuild_ghost_tree] error: {ex}")

    def get_ghost_graph_stats(self) -> None:
        """–í—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–∏–∑—Ä–∞—á–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∞"""
        print("\nüëª –ü–†–ò–ó–†–ê–ß–ù–´–ô –ì–†–ê–§:")
        if self.ghost_graph:
            self.ghost_graph.debug_print()
        else:
            print("   ‚ùå –ü—Ä–∏–∑—Ä–∞—á–Ω—ã–π –≥—Ä–∞—Ñ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
    def copy_ghost_structure_to_real(self, real_graph) -> None:
        """
        –ö–æ–ø–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–∏–∑—Ä–∞—á–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∞ –≤ —Ä–µ–∞–ª—å–Ω—ã–π –≥—Ä–∞—Ñ.
        
        Args:
            real_graph: SporeGraph –∫—É–¥–∞ –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å (–æ–±—ã—á–Ω–æ spore_manager.graph)
        """
        if not self.ghost_graph or not real_graph:
            print("‚ùå –û–¥–∏–Ω –∏–∑ –≥—Ä–∞—Ñ–æ–≤ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return
            
        print("\nüîÑ –ö–û–ü–ò–†–û–í–ê–ù–ò–ï –ü–†–ò–ó–†–ê–ß–ù–û–ô –°–¢–†–£–ö–¢–£–†–´ –í –†–ï–ê–õ–¨–ù–£–Æ")
        print(f"   üì§ –ò—Å—Ç–æ—á–Ω–∏–∫: {len(self.ghost_graph.edges)} –ø—Ä–∏–∑—Ä–∞—á–Ω—ã—Ö —Å–≤—è–∑–µ–π")
        
        # –ü–µ—Ä–µ–¥–∞–µ–º spore_manager –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö Link
        real_graph.copy_structure_from(self.ghost_graph, spore_manager=self.deps.spore_manager)
        
        # –ù–û–í–û–ï: –û—á–∏—â–∞–µ–º –ø—Ä–∏–∑—Ä–∞—á–Ω—ã–π –≥—Ä–∞—Ñ –ø–æ—Å–ª–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
        print("   üßπ –û—á–∏—â–∞–µ–º –ø—Ä–∏–∑—Ä–∞—á–Ω—ã–π –≥—Ä–∞—Ñ...")
        self.ghost_graph.clear()
        print("   ‚úÖ –ü—Ä–∏–∑—Ä–∞—á–Ω—ã–π –≥—Ä–∞—Ñ –æ—á–∏—â–µ–Ω")
        
        print(f"   üì• –†–µ–∑—É–ª—å—Ç–∞—Ç: {len(real_graph.edges)} —Ä–µ–∞–ª—å–Ω—ã—Ö —Å–≤—è–∑–µ–π")
        print("   ‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞")
