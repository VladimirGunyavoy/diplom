from typing import Optional, Tuple, List
import numpy as np
from ursina import Vec3, color, destroy, mouse, camera, raycast, Vec2

from ..core.spore import Spore
from ..managers.zoom_manager import ZoomManager
from ..managers.spore_manager import SporeManager
from ..managers.color_manager import ColorManager
from ..managers.manual_creation.preview_manager import PreviewManager
from ..managers.manual_creation.prediction_manager import PredictionManager
from ..managers.manual_creation.tree_creation_manager import TreeCreationManager
from ..logic.pendulum import PendulumSystem
from ..visual.link import Link


class ManualSporeManager:
    """
    –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è —Å–ø–æ—Ä —Å –ø—Ä–µ–≤—å—é –ø–æ –∫—É—Ä—Å–æ—Ä—É.

    –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:
    - –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω—É—é —Å–ø–æ—Ä—É –≤ –ø–æ–∑–∏—Ü–∏–∏ –∫—É—Ä—Å–æ—Ä–∞ –º—ã—à–∏
    - –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –ø—Ä–∏ min/max —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏
    - –°–æ–∑–¥–∞–µ—Ç —Å–ø–æ—Ä—ã + —Ü–µ–ø–æ—á–∫–∏ —Ä–æ–¥–∏—Ç–µ–ª–µ–π –ø–æ –õ–ö–ú
    """

    def __init__(self,
                 spore_manager: SporeManager,
                 zoom_manager: ZoomManager,
                 pendulum: PendulumSystem,
                 color_manager: ColorManager,
                 config: dict):

        self.spore_manager = spore_manager

        # –°–æ–∑–¥–∞–µ–º SharedDependencies –æ–¥–∏–Ω —Ä–∞–∑
        from .manual_creation.shared_dependencies import SharedDependencies
        self.deps = SharedDependencies(
            zoom_manager=zoom_manager,
            color_manager=color_manager,
            pendulum=pendulum,
            config=config
        )
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º spore_manager –≤ deps –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏–∑ –¥—Ä—É–≥–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self.deps.spore_manager = spore_manager

        # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å –æ–±—â–∏–º–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏
        self.preview_manager = PreviewManager(self.deps)
        self.prediction_manager = PredictionManager(self.deps, self)  # –ü–µ—Ä–µ–¥–∞–µ–º self –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ _last_tree_logic
        self.tree_creation_manager = TreeCreationManager(self.deps, spore_manager, self)  # –ù–û–í–û–ï: –ø–µ—Ä–µ–¥–∞–µ–º self
        
        # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º ghost_tree_dt_vector
        # self.tree_creation_manager.ghost_tree_dt_vector = self._ghost_tree_dt_vector

        # –û–±—â–∏–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –ª–∏–Ω–∫–∏
        self.created_links: List[Link] = []
        
        # –ü–æ–ª—É—á–∞–µ–º id_manager –æ—Ç spore_manager
        self.id_manager = self.spore_manager.id_manager

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ dt –≤–µ–∫—Ç–æ—Ä–∞ –æ—Ç –ø—Ä–∏–∑—Ä–∞—á–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞
        self._ghost_tree_dt_vector = None

        # –ë–∞–∑–æ–≤—ã–π dt –Ω–∞ –º–æ–º–µ–Ω—Ç –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –ø–∞—Ä (–¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏ –ø—Ä–æ–∫—Ä—É—Ç–∫–µ)
        self.ghost_dt_baseline: Optional[float] = None

        # –ò—Å—Ç–æ—Ä–∏—è —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø —Å–ø–æ—Ä –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —É–¥–∞–ª–µ–Ω–∏—è
        self.spore_groups_history: List[List[Spore]] = []  # –ò—Å—Ç–æ—Ä–∏—è –≥—Ä—É–ø–ø —Å–ø–æ—Ä
        self.group_links_history: List[List[Link]] = []    # –ò—Å—Ç–æ—Ä–∏—è –ª–∏–Ω–∫–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã

        # –°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–æ–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è (–±–µ–∑ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏)
        self.creation_mode = 'spores'  # –¢–æ–ª—å–∫–æ –≤ ManualSporeManager
        self.tree_depth = 2           # –¢–æ–ª—å–∫–æ –≤ ManualSporeManager
        
        # –ù–û–í–û–ï: –î–ª—è –æ—Ç–ª–∞–¥–æ—á–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞
        self._last_tree_logic = None

        print(f"   ‚úì Manual Spore Manager —Å–æ–∑–¥–∞–Ω (—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {self.prediction_manager.min_control} .. {self.prediction_manager.max_control})")
        print(f"   üìö –ò—Å—Ç–æ—Ä–∏—è –≥—Ä—É–ø–ø –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

    def toggle_creation_mode(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Ä–µ–∂–∏–º —Å–æ–∑–¥–∞–Ω–∏—è."""
        self.creation_mode = 'tree' if self.creation_mode == 'spores' else 'spores'
        mode_name = '–¥–µ—Ä–µ–≤—å—è' if self.creation_mode == 'tree' else '—Å–ø–æ—Ä—ã'
        print(f"üîÑ –†–µ–∂–∏–º —Å–æ–∑–¥–∞–Ω–∏—è: {mode_name}")

    def set_tree_depth(self, depth: int):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≥–ª—É–±–∏–Ω—É –¥–µ—Ä–µ–≤–∞."""
        self.tree_depth = max(1, min(depth, 2))
        print(f"üå≤ –ì–ª—É–±–∏–Ω–∞ –¥–µ—Ä–µ–≤–∞: {self.tree_depth}")



    @property
    def ghost_tree_dt_vector(self):
        """–ü–æ–ª—É—á–∞–µ—Ç dt –≤–µ–∫—Ç–æ—Ä –æ—Ç –ø—Ä–∏–∑—Ä–∞—á–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞."""
        return self._ghost_tree_dt_vector

    @ghost_tree_dt_vector.setter
    def ghost_tree_dt_vector(self, value):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç dt –≤–µ–∫—Ç–æ—Ä –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç —Å TreeCreationManager."""
        self._ghost_tree_dt_vector = value
        if hasattr(self, 'tree_creation_manager'):
            self.tree_creation_manager.ghost_tree_dt_vector = value
            




    def _get_next_link_id(self) -> int:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –ª–∏–Ω–∫–∞"""
        return self.id_manager.get_next_link_id()

    def _get_next_spore_id(self) -> int:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è —Å–ø–æ—Ä—ã"""
        return self.id_manager.get_next_spore_id()

    def get_mouse_world_position(self) -> Optional[Tuple[float, float]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–∑–∏—Ü–∏—é –∫—É—Ä—Å–æ—Ä–∞ –º—ã—à–∏."""
        pos_2d = self.deps.get_cursor_position_2d()
        return (pos_2d[0], pos_2d[1])

    def update_cursor_position(self) -> None:
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ–∑–∏—Ü–∏—é –ø—Ä–µ–≤—å—é —Å–ø–æ—Ä—ã –ø–æ –ø–æ–∑–∏—Ü–∏–∏ –∫—É—Ä—Å–æ—Ä–∞ –º—ã—à–∏.
        """
            # print(f"DEBUG: update_cursor_position –≤—ã–∑–≤–∞–Ω")
            # print(f"   preview_enabled: {self.preview_manager.preview_enabled}")
        
        if not self.preview_manager.preview_enabled:
            # print("   STOP: preview –æ—Ç–∫–ª—é—á–µ–Ω")  # –£–±—Ä–∞–Ω–æ —Å–ø–∞–º-—Å–æ–æ–±—â–µ–Ω–∏–µ
            return

        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –∫—É—Ä—Å–æ—Ä–∞ –º—ã—à–∏
        mouse_pos = self.get_mouse_world_position()
        # print(f"   mouse_pos: {mouse_pos}")
        
        if mouse_pos is None:
            # print("   STOP: mouse_pos = None")  # –£–±—Ä–∞–Ω–æ —Å–ø–∞–º-—Å–æ–æ–±—â–µ–Ω–∏–µ
            return

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º PreviewManager –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏
        # print("   –í—ã–∑—ã–≤–∞–µ–º preview_manager.update_cursor_position...")
        self.preview_manager.update_cursor_position(mouse_pos)

        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
        # print(f"   show_predictions: {self.prediction_manager.show_predictions}")
        if self.prediction_manager.show_predictions:
            # print("   –í—ã–∑—ã–≤–∞–µ–º _update_predictions...")
            self._update_predictions()
        else:
            # print("   SKIP: –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã")  # –£–±—Ä–∞–Ω–æ —Å–ø–∞–º-—Å–æ–æ–±—â–µ–Ω–∏–µ
            pass

    def _update_predictions(self) -> None:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è."""
        self.prediction_manager.update_predictions(
            preview_spore=self.preview_manager.get_preview_spore(),
            preview_position_2d=self.preview_manager.get_preview_position(),
            creation_mode=self.creation_mode,
            tree_depth=self.tree_depth,
            ghost_dt_vector=self._ghost_tree_dt_vector
        )

    def create_spore_at_cursor(self):
        """–°–æ–∑–¥–∞–µ—Ç –¥–µ—Ä–µ–≤–æ –Ω—É–∂–Ω–æ–π –≥–ª—É–±–∏–Ω—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞."""
        if not self.preview_manager.preview_enabled or not self.preview_manager.has_preview():
            return None

        preview_position_2d = self.preview_manager.get_preview_position()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥–ª—É–±–∏–Ω—É –¥–µ—Ä–µ–≤–∞ –ø–æ —Ä–µ–∂–∏–º—É
        if self.creation_mode == 'tree':
            depth = self.tree_depth  # 1 –∏–ª–∏ 2
        else:
            depth = 1  # "spores" —Ä–µ–∂–∏–º = –¥–µ—Ä–µ–≤–æ –≥–ª—É–±–∏–Ω—ã 1
        
        # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä–µ–∫—Ç–æ–≤ –¥–æ —Å–æ–∑–¥–∞–Ω–∏—è
        links_before = len(self.tree_creation_manager.created_links)
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º TreeCreationManager –¥–ª—è –≤—Å–µ—Ö —Å–ª—É—á–∞–µ–≤
        created_spores = self.tree_creation_manager.create_tree_at_cursor(preview_position_2d, depth)
        
        if created_spores:
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –ª–∏–Ω–∫–∏ –∏–∑ TreeCreationManager
            links_after = len(self.tree_creation_manager.created_links)
            created_links = self.tree_creation_manager.created_links[links_before:links_after]
            
            print(f"   üîó –ü–æ–ª—É—á–µ–Ω–æ {len(created_links)} –ª–∏–Ω–∫–æ–≤ –∏–∑ TreeCreationManager")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é –ü–†–ê–í–ò–õ–¨–ù–û
            self.spore_groups_history.append(created_spores.copy())
            self.group_links_history.append(created_links.copy())  # ‚úÖ –¢–µ–ø–µ—Ä—å —Ä–µ–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∫–∏!
            print(f"   üìö –ì—Ä—É–ø–ø–∞ #{len(self.spore_groups_history)} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {len(created_spores)} —Å–ø–æ—Ä + {len(created_links)} –ª–∏–Ω–∫–æ–≤")
            
        return created_spores



    def toggle_ghost_system(self):
        """
        –ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –≤–∏–¥–∏–º–æ—Å—Ç—å –≤—Å–µ–π –ø—Ä–∏–∑—Ä–∞—á–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã.
        –£–ø—Ä–∞–≤–ª—è–µ—Ç preview_manager –∏ prediction_manager —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ.
        
        Returns:
            bool: –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ (True = –≤–∫–ª—é—á–µ–Ω–æ)
        """
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Ç preview_manager
        current_state = self.preview_manager.preview_enabled
        new_state = not current_state
        
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º preview spore
        self.preview_manager.preview_enabled = new_state
        
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º predictions
        self.prediction_manager.show_predictions = new_state
        
        # –ï—Å–ª–∏ –æ—Ç–∫–ª—é—á–∞–µ–º - –æ—á–∏—â–∞–µ–º –≤—Å–µ –ø—Ä–∏–∑—Ä–∞—á–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
        if not new_state:
            self.prediction_manager.clear_predictions()
            # –°–∫—Ä—ã–≤–∞–µ–º preview spore –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if self.preview_manager.preview_spore:
                self.preview_manager.preview_spore.visible = False
        else:
            # –ï—Å–ª–∏ –≤–∫–ª—é—á–∞–µ–º - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º preview spore –æ–±—Ä–∞—Ç–Ω–æ
            if self.preview_manager.preview_spore:
                self.preview_manager.preview_spore.visible = True
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π –≤—ã–≤–æ–¥
        state_name = "–≤–∫–ª—é—á–µ–Ω–∞" if new_state else "–æ—Ç–∫–ª—é—á–µ–Ω–∞"
        print(f"üëª –ü—Ä–∏–∑—Ä–∞—á–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ {state_name}")
        
        return new_state

    def _destroy_preview(self) -> None:
        """–£–Ω–∏—á—Ç–æ–∂–∞–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –∏ –∏—Ö –ª–∏–Ω–∫–∏."""
        self.prediction_manager.clear_predictions()

    def destroy(self) -> None:
        """–û—á–∏—â–∞–µ—Ç –≤—Å–µ —Ä–µ—Å—É—Ä—Å—ã –º–µ–Ω–µ–¥–∂–µ—Ä–∞."""
        self.preview_manager.destroy()
        self._destroy_preview()
        print("   ‚úì Manual Spore Manager —É–Ω–∏—á—Ç–æ–∂–µ–Ω")

    def clear_all(self) -> None:
        """–û—á–∏—â–∞–µ—Ç –≤—Å–µ —Ä–µ—Å—É—Ä—Å—ã —Å–æ–∑–¥–∞–Ω–Ω—ã–µ ManualSporeManager."""
        print("üßπ ManualSporeManager: –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —Ä–µ—Å—É—Ä—Å–æ–≤...")

        # –î–û–ë–ê–í–ò–¢–¨ –ü–ï–†–ï–î —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ª–æ–≥–∏–∫–æ–π:
        # –û—á–∏—â–∞–µ–º –æ–±—ä–µ–∫—Ç—ã TreeCreationManager
        self.tree_creation_manager.clear_all_created_objects()

        # üÜï –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ —É–¥–∞–ª–µ–Ω–∏—è
        print(f"   üìä –õ–∏–Ω–∫–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: {len(self.created_links)}")

        # 1. –£–Ω–∏—á—Ç–æ–∂–∞–µ–º –≤—Å–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –ª–∏–Ω–∫–∏
        for i, link in enumerate(self.created_links):
            try:
                # üÜï –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ª–∏–Ω–∫–∞
                print(f"   üîç –õ–∏–Ω–∫ {i+1}: enabled={getattr(link, 'enabled', 'N/A')}, visible={getattr(link, 'visible', 'N/A')}")
                print(f"            parent={getattr(link, 'parent', 'N/A')}, model={getattr(link, 'model', 'N/A')}")

                # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã —É–¥–∞–ª–µ–Ω–∏—è
                link.enabled = False  # –û—Ç–∫–ª—é—á–∞–µ–º
                link.visible = False  # –°–∫—Ä—ã–≤–∞–µ–º
                link.parent = None    # type: ignore # –û—Ç–≤—è–∑—ã–≤–∞–µ–º –æ—Ç —Ä–æ–¥–∏—Ç–µ–ª—è

                destroy(link)  # –£–Ω–∏—á—Ç–æ–∂–∞–µ–º
                print(f"   ‚úÖ –õ–∏–Ω–∫ {i+1} –æ–±—Ä–∞–±–æ—Ç–∞–Ω")

            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å –ª–∏–Ω–∫–æ–º {i+1}: {e}")

        # üÜï –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ Ursina
        try:
            from ursina import scene, camera
            all_entities = [e for e in scene.entities if hasattr(e, 'model') and e.model]
            arrow_entities = [e for e in all_entities if 'arrow' in str(e.model).lower()]
            print(f"   üìä –í—Å–µ–≥–æ entities –≤ —Å—Ü–µ–Ω–µ: {len(scene.entities)}")
            print(f"   üèπ Entities —Å–æ —Å—Ç—Ä–µ–ª–∫–∞–º–∏: {len(arrow_entities)}")
        except Exception as e:
            print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Å—Ü–µ–Ω—ã: {e}")

        # üÜï –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –≥—Ä—É–ø–ø
        cleared_groups = len(self.spore_groups_history)
        self.spore_groups_history.clear()
        self.group_links_history.clear()
        print(f"   üìö –û—á–∏—â–µ–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è: {cleared_groups} –≥—Ä—É–ø–ø")

        self.created_links.clear()

    def delete_last_spore_group(self) -> bool:
        """
        –£–¥–∞–ª—è–µ—Ç –ø–æ—Å–ª–µ–¥–Ω—é—é —Å–æ–∑–¥–∞–Ω–Ω—É—é –≥—Ä—É–ø–ø—É —Å–ø–æ—Ä –∏ –∏—Ö –ª–∏–Ω–∫–∏.

        Returns:
            True –µ—Å–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ, False –µ—Å–ª–∏ –Ω–µ—á–µ–≥–æ —É–¥–∞–ª—è—Ç—å
        """
        if not self.spore_groups_history:
            print("   ‚ö†Ô∏è –ù–µ—Ç –≥—Ä—É–ø–ø –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return False

        try:
            # 1. –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –≥—Ä—É–ø–ø—É –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
            last_spores = self.spore_groups_history.pop()
            last_links = self.group_links_history.pop()

            print(f"   üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã #{len(self.spore_groups_history) + 1}")
            print(f"   üìä –ö —É–¥–∞–ª–µ–Ω–∏—é: {len(last_spores)} —Å–ø–æ—Ä + {len(last_links)} –ª–∏–Ω–∫–æ–≤")

            # 2. –£–î–ê–õ–Ø–ï–ú –õ–ò–ù–ö–ò (–≤–∞–∂–Ω–æ –¥–µ–ª–∞—Ç—å –î–û —É–¥–∞–ª–µ–Ω–∏—è —Å–ø–æ—Ä)
            deleted_links = 0
            for i, link in enumerate(last_links):
                try:
                    # –î–µ—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∏–∑ zoom_manager –∏—Å–ø–æ–ª—å–∑—É—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –∫–ª—é—á
                    if hasattr(link, '_zoom_manager_key'):
                        key = link._zoom_manager_key
                        self.deps.zoom_manager.unregister_object(key)
                        print(f"   ‚úì –õ–∏–Ω–∫ {i+1} –¥–µ—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {key}")
                    else:
                        # Fallback: –ø–æ–∏—Å–∫ –ø–æ —Å—Å—ã–ª–∫–µ
                        if hasattr(self.deps.zoom_manager, 'objects'):
                            for key, obj in list(self.deps.zoom_manager.objects.items()):
                                if obj is link:
                                    self.deps.zoom_manager.unregister_object(key)
                                    print(f"   ‚úì –õ–∏–Ω–∫ {i+1} –¥–µ—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω (fallback): {key}")
                                    break

                    # –£–¥–∞–ª—è–µ–º –∏–∑ created_links
                    if link in self.created_links:
                        self.created_links.remove(link)

                    # üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–¥–∞–ª—è–µ–º –∏–∑ SporeManager.links –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å PNG
                    if hasattr(self.spore_manager, 'links') and link in self.spore_manager.links:
                        self.spore_manager.links.remove(link)
                        print(f"   üîÑ –õ–∏–Ω–∫ {i+1} —É–¥–∞–ª–µ–Ω –∏–∑ SporeManager.links")
                    
                    # –£–Ω–∏—á—Ç–æ–∂–∞–µ–º –æ–±—ä–µ–∫—Ç Ursina
                    destroy(link)
                    deleted_links += 1
                    print(f"   ‚úÖ –õ–∏–Ω–∫ {i+1} —É–¥–∞–ª–µ–Ω")

                except Exception as e:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ª–∏–Ω–∫–∞ {i+1}: {e}")

            # 3. –£–î–ê–õ–Ø–ï–ú –°–ü–û–†–´
            deleted_spores = 0
            for i, spore in enumerate(last_spores):
                try:
                    # –£–¥–∞–ª—è–µ–º –∏–∑ SporeManager
                    if hasattr(self.spore_manager, 'remove_spore'):
                        removed = self.spore_manager.remove_spore(spore)
                        if removed:
                            print(f"   ‚úì –°–ø–æ—Ä–∞ {i+1} —É–¥–∞–ª–µ–Ω–∞ –∏–∑ SporeManager")
                    else:
                        # Fallback –µ—Å–ª–∏ remove_spore –µ—â–µ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω
                        if hasattr(self.spore_manager, 'objects') and spore in self.spore_manager.objects:
                            self.spore_manager.objects.remove(spore)
                            print(f"   ‚úì –°–ø–æ—Ä–∞ {i+1} —É–¥–∞–ª–µ–Ω–∞ –∏–∑ objects (fallback)")

                    # –î–µ—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∏–∑ zoom_manager –∏—Å–ø–æ–ª—å–∑—É—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –∫–ª—é—á
                    if hasattr(spore, '_zoom_manager_key'):
                        key = spore._zoom_manager_key
                        self.deps.zoom_manager.unregister_object(key)
                        print(f"   ‚úì –°–ø–æ—Ä–∞ {i+1} –¥–µ—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞: {key}")
                    else:
                        # Fallback: –ø–æ–∏—Å–∫ –ø–æ —Å—Å—ã–ª–∫–µ
                        if hasattr(self.deps.zoom_manager, 'objects'):
                            for key, obj in list(self.deps.zoom_manager.objects.items()):
                                if obj is spore:
                                    self.deps.zoom_manager.unregister_object(key)
                                    print(f"   ‚úì –°–ø–æ—Ä–∞ {i+1} –¥–µ—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ (fallback): {key}")
                                    break

                    # –£–Ω–∏—á—Ç–æ–∂–∞–µ–º –æ–±—ä–µ–∫—Ç Ursina
                    destroy(spore)
                    deleted_spores += 1
                    print(f"   ‚úÖ –°–ø–æ—Ä–∞ {i+1} —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∞")

                except Exception as e:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–ø–æ—Ä—ã {i+1}: {e}")

            # –ù–û–í–û–ï: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –≥—Ä–∞—Ñ - —É–¥–∞–ª—è–µ–º —Å–≤—è–∑–∏ 
            if hasattr(self.spore_manager, 'graph'):
                print("   üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≥—Ä–∞—Ñ–∞ —Å–≤—è–∑–µ–π...")
                removed_edges = 0
                
                # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–≤—è–∑–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —É–¥–∞–ª—è–µ–º—ã–º–∏ —Å–ø–æ—Ä–∞–º–∏
                for spore in last_spores:
                    if hasattr(spore, 'id') and spore.id:
                        # –£–¥–∞–ª—è–µ–º –≤—Å–µ –∏—Å—Ö–æ–¥—è—â–∏–µ —Å–≤—è–∑–∏
                        children = self.spore_manager.graph.get_children(spore.id)
                        for child in children:
                            if self.spore_manager.graph.remove_edge(spore.id, child.id):
                                removed_edges += 1
                                
                        # –£–¥–∞–ª—è–µ–º –≤—Å–µ –≤—Ö–æ–¥—è—â–∏–µ —Å–≤—è–∑–∏  
                        parents = self.spore_manager.graph.get_parents(spore.id)
                        for parent in parents:
                            if self.spore_manager.graph.remove_edge(parent.id, spore.id):
                                removed_edges += 1
                                
                        # –£–¥–∞–ª—è–µ–º —Å–ø–æ—Ä—É –∏–∑ –≥—Ä–∞—Ñ–∞
                        if spore.id in self.spore_manager.graph.nodes:
                            del self.spore_manager.graph.nodes[spore.id]
                            if spore.id in self.spore_manager.graph.outgoing:
                                del self.spore_manager.graph.outgoing[spore.id]
                            if spore.id in self.spore_manager.graph.incoming:
                                del self.spore_manager.graph.incoming[spore.id]
                
                print(f"   üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ –∏–∑ –≥—Ä–∞—Ñ–∞: {removed_edges} —Å–≤—è–∑–µ–π")
            else:
                print("   ‚ö†Ô∏è –ì—Ä–∞—Ñ —Å–≤—è–∑–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω")

            # 4. –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê
            print(f"   üéØ –£–î–ê–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û:")
            print(f"      üìä –°–ø–æ—Ä —É–¥–∞–ª–µ–Ω–æ: {deleted_spores}/{len(last_spores)}")
            print(f"      üîó –õ–∏–Ω–∫–æ–≤ —É–¥–∞–ª–µ–Ω–æ: {deleted_links}/{len(last_links)}")
            print(f"      üìö –ì—Ä—É–ø–ø –æ—Å—Ç–∞–ª–æ—Å—å –≤ –∏—Å—Ç–æ—Ä–∏–∏: {len(self.spore_groups_history)}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —É–¥–∞–ª–µ–Ω–∏–µ –±—ã–ª–æ —É—Å–ø–µ—à–Ω—ã–º
            if deleted_spores == len(last_spores) and deleted_links == len(last_links):
                # üîß –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø: –û–±–Ω–æ–≤–ª—è–µ–º PNG –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
                try:
                    # –ò–º–ø–æ—Ä—Ç –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ buffer_merge_manager —á–µ—Ä–µ–∑ input_manager
                    if (hasattr(self.spore_manager, '_manual_spore_manager_ref') and 
                        hasattr(self.spore_manager._manual_spore_manager_ref, '_input_manager_ref')):
                        
                        input_manager = self.spore_manager._manual_spore_manager_ref._input_manager_ref
                        if (hasattr(input_manager, 'buffer_merge_manager') and
                            hasattr(input_manager.buffer_merge_manager, '_create_real_graph_visualization')):
                            
                            print("   üñºÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ PNG –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è...")
                            viz_path = input_manager.buffer_merge_manager._create_real_graph_visualization(self.spore_manager)
                            if viz_path:
                                print(f"   ‚úÖ PNG –æ–±–Ω–æ–≤–ª–µ–Ω: {viz_path}")
                            else:
                                print("   ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å PNG")
                        else:
                            print("   ‚ö†Ô∏è BufferMergeManager –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è PNG")
                    else:
                        print("   ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ InputManager –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è PNG")
                        
                except Exception as e:
                    print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è PNG: {e}")
                    # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
                
                print(f"   ‚úÖ –ì—Ä—É–ø–ø–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!")
                return True
            else:
                print(f"   ‚ö†Ô∏è –£–¥–∞–ª–µ–Ω–∏–µ —á–∞—Å—Ç–∏—á–Ω–æ –Ω–µ—É—Å–ø–µ—à–Ω–æ")
                return False

        except Exception as e:
            print(f"   ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã: {e}")
            import traceback
            traceback.print_exc()
            return False

    def get_groups_history_stats(self) -> dict:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø.

        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –≥—Ä—É–ø–ø, —Å–ø–æ—Ä –∏ –ª–∏–Ω–∫–æ–≤ –≤ –∏—Å—Ç–æ—Ä–∏–∏
        """
        total_groups = len(self.spore_groups_history)
        total_spores = sum(len(group) for group in self.spore_groups_history)
        total_links = sum(len(links) for links in self.group_links_history)

        return {
            'total_groups': total_groups,
            'total_spores': total_spores,
            'total_links': total_links,
            'can_delete': total_groups > 0
        }

    def print_groups_history_stats(self) -> None:
        """–í—ã–≤–æ–¥–∏—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å—Ç–æ—Ä–∏–∏ –≥—Ä—É–ø–ø."""
        stats = self.get_groups_history_stats()

        print(f"\nüìö –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ò–°–¢–û–†–ò–ò –ì–†–£–ü–ü:")
        print(f"   üî¢ –í—Å–µ–≥–æ –≥—Ä—É–ø–ø: {stats['total_groups']}")
        print(f"   üß¨ –í—Å–µ–≥–æ —Å–ø–æ—Ä: {stats['total_spores']}")
        print(f"   üîó –í—Å–µ–≥–æ –ª–∏–Ω–∫–æ–≤: {stats['total_links']}")
        print(f"   üóëÔ∏è –ú–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å: {'–î–∞' if stats['can_delete'] else '–ù–µ—Ç'}")

        if stats['total_groups'] > 0:
            print(f"   üìã –ü–æ—Å–ª–µ–¥–Ω—è—è –≥—Ä—É–ø–ø–∞: {len(self.spore_groups_history[-1])} —Å–ø–æ—Ä + {len(self.group_links_history[-1])} –ª–∏–Ω–∫–æ–≤")
        print("========================")

    def _get_current_dt(self) -> float:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π dt –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."""
        return self.deps.config.get('pendulum', {}).get('dt', 0.1)

    def clear_all_graphs(self) -> None:
        """–û—á–∏—â–∞–µ—Ç –≤—Å–µ –≥—Ä–∞—Ñ—ã —Å–≤—è–∑–µ–π (—Ä–µ–∞–ª—å–Ω—ã–π –∏ –ø—Ä–∏–∑—Ä–∞—á–Ω—ã–π)."""
        try:
            # –û—á–∏—â–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –≥—Ä–∞—Ñ
            if hasattr(self.spore_manager, 'graph'):
                self.spore_manager.graph.clear()
                print("üßπ –†–µ–∞–ª—å–Ω—ã–π –≥—Ä–∞—Ñ –æ—á–∏—â–µ–Ω")
            
            # –û—á–∏—â–∞–µ–º –ø—Ä–∏–∑—Ä–∞—á–Ω—ã–π –≥—Ä–∞—Ñ
            if hasattr(self.prediction_manager, 'ghost_graph'):
                self.prediction_manager.ghost_graph.clear()
                print("üßπ –ü—Ä–∏–∑—Ä–∞—á–Ω—ã–π –≥—Ä–∞—Ñ –æ—á–∏—â–µ–Ω")
                
            print("‚úÖ –í—Å–µ –≥—Ä–∞—Ñ—ã —Å–≤—è–∑–µ–π –æ—á–∏—â–µ–Ω—ã")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –≥—Ä–∞—Ñ–æ–≤: {e}")

    def debug_graph_consistency(self) -> None:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –º–µ–∂–¥—É –≥—Ä–∞—Ñ–∞–º–∏ –∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º–∏."""
        try:
            print("\nüîç –ü–†–û–í–ï–†–ö–ê –ö–û–ù–°–ò–°–¢–ï–ù–¢–ù–û–°–¢–ò –ì–†–ê–§–û–í:")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –≥—Ä–∞—Ñ
            if hasattr(self.spore_manager, 'graph'):
                real_graph = self.spore_manager.graph
                print(f"üìä –†–µ–∞–ª—å–Ω—ã–π –≥—Ä–∞—Ñ: {len(real_graph.nodes)} —É–∑–ª–æ–≤, {len(real_graph.edges)} —Å–≤—è–∑–µ–π")
                print(f"üìä SporeManager: {len(self.spore_manager.objects)} —Å–ø–æ—Ä, {len(self.spore_manager.links)} –ª–∏–Ω–∫–æ–≤")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É–∑–ª—ã –±–µ–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö —Å–ø–æ—Ä
                orphaned_nodes = 0
                for spore_id in real_graph.nodes:
                    found = any(spore.id == spore_id for spore in self.spore_manager.objects)
                    if not found:
                        orphaned_nodes += 1
                        
                if orphaned_nodes > 0:
                    print(f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ {orphaned_nodes} —É–∑–ª–æ–≤-—Å–∏—Ä–æ—Ç –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≥—Ä–∞—Ñ–µ")
                else:
                    print("‚úÖ –†–µ–∞–ª—å–Ω—ã–π –≥—Ä–∞—Ñ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–µ–Ω")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–∑—Ä–∞—á–Ω—ã–π –≥—Ä–∞—Ñ  
            if hasattr(self.prediction_manager, 'ghost_graph'):
                ghost_graph = self.prediction_manager.ghost_graph
                print(f"üìä –ü—Ä–∏–∑—Ä–∞—á–Ω—ã–π –≥—Ä–∞—Ñ: {len(ghost_graph.nodes)} —É–∑–ª–æ–≤, {len(ghost_graph.edges)} —Å–≤—è–∑–µ–π")
                if hasattr(self.prediction_manager, 'prediction_links'):
                    print(f"üìä PredictionManager: {len(self.prediction_manager.prediction_links)} –ª–∏–Ω–∫–æ–≤")
                
                if len(ghost_graph.edges) == len(getattr(self.prediction_manager, 'prediction_links', [])):
                    print("‚úÖ –ü—Ä–∏–∑—Ä–∞—á–Ω—ã–π –≥—Ä–∞—Ñ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–µ–Ω")
                else:
                    print("‚ö†Ô∏è –ü—Ä–∏–∑—Ä–∞—á–Ω—ã–π –≥—Ä–∞—Ñ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω")
                    
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏: {e}")