from __future__ import annotations
from ..visual.spore_visual import SporeVisual
from ..logic.spore_logic import SporeLogic
from ..managers.color_manager import ColorManager
import numpy as np
from ..logic.pendulum import PendulumSystem
from typing import Optional, Any, Tuple, List, Dict

class Spore(SporeVisual):
    """
    –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π –∫–ª–∞—Å—Å Spore, –∫–æ—Ç–æ—Ä—ã–π:
    - –ù–∞—Å–ª–µ–¥—É–µ—Ç—Å—è –æ—Ç SporeVisual (–≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è)
    - –ê–≥—Ä–µ–≥–∏—Ä—É–µ—Ç SporeLogic (–º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ª–æ–≥–∏–∫–∞)
    - –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –æ–±—Ä–∞—Ç–Ω—É—é —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º API
    """
    
    def __init__(self,
                 dt: float,
                 pendulum: PendulumSystem,
                 goal_position: (np.ndarray | Tuple[float, float] |
                                 Tuple[float, float, float]),
                 model: str = 'sphere',
                 color_manager: Optional[ColorManager] = None,
                 is_goal: bool = False,
                 is_ghost: bool = False,
                 id_manager=None,
                 spore_id=None,  # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —è–≤–Ω—ã–π ID
                 *args: Any, **kwargs: Any):
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–∏–∑—É–∞–ª—å–Ω—É—é —á–∞—Å—Ç—å (Entity.id –æ—Å—Ç–∞–µ—Ç—Å—è –Ω–µ—Ç—Ä–æ–Ω—É—Ç—ã–º)
        super().__init__(model=model, color_manager=color_manager,
                         is_goal=is_goal, *args, **kwargs)
        
        # üîß –ù–û–í–ê–Ø –°–ò–°–¢–ï–ú–ê: –ù–∞—à —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π spore_id
        if spore_id is not None:
            # –Ø–≤–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π ID (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
            self.spore_id = spore_id
        elif id_manager is not None:
            # –ü–æ–ª—É—á–∞–µ–º ID –∏–∑ IDManager
            if is_ghost:
                self.spore_id = id_manager.get_next_ghost_id()
            else:
                self.spore_id = id_manager.get_next_spore_id()
        else:
            # Fallback: –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
            if 'position' in kwargs:
                pos = kwargs['position']
                if hasattr(pos, '__len__') and len(pos) >= 2:
                    y_coord = pos[2] if len(pos) > 2 else pos[1]
                    self.spore_id = (f"spore_{pos[0]:.4f}_{y_coord:.4f}_"
                                     f"{id(self)}")
                else:
                    self.spore_id = f"spore_{id(self)}"
            else:
                self.spore_id = f"spore_{id(self)}"
            print(f"‚ö†Ô∏è Spore —Å–æ–∑–¥–∞–Ω–∞ –±–µ–∑ IDManager, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω fallback "
                  f"spore_id: {self.spore_id}")
        
        self.is_ghost: bool = is_ghost  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–ª–∞–≥
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ IDManager –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –ø—Ä–∏ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏
        self._id_manager = id_manager

        # –°–æ–∑–¥–∞–µ–º –ª–æ–≥–∏—á–µ—Å–∫—É—é —á–∞—Å—Ç—å
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º goal_position –≤ 2D –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        goal_position_2d = np.array(goal_position)[:2]
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –ª–æ–≥–∏–∫–∏
        if 'position' in kwargs:
            initial_pos = kwargs['position']
            if hasattr(initial_pos, '__len__') and len(initial_pos) >= 2:
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º 3D –ø–æ–∑–∏—Ü–∏—é –≤ 2D –¥–ª—è –ª–æ–≥–∏–∫–∏
                if len(initial_pos) == 3:
                    initial_pos_2d = np.array(initial_pos)[[0, 2]]
                else:
                    initial_pos_2d = np.array(initial_pos)
            else:
                initial_pos_2d = np.array([0.0, 0.0])  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
        else:
            initial_pos_2d = np.array([0.0, 0.0])  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
            
        self.logic: SporeLogic = SporeLogic(
            pendulum=pendulum, 
            dt=dt, 
            goal_position_2d=goal_position_2d,
            initial_position_2d=initial_pos_2d
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        self.dt: float = dt
        self.pendulum: PendulumSystem = pendulum
        self.goal_position: (np.ndarray | Tuple[float, float] |
                             Tuple[float, float, float]) = goal_position
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤—ã—Ö —Å–ø–æ—Ä
        self._initial_pendulum: PendulumSystem = pendulum
        self._initial_dt: float = dt
        self._initial_model: str = model
        self._initial_color_manager: Optional[ColorManager] = color_manager
        self._initial_is_goal: bool = is_goal
        self._initial_is_ghost: bool = is_ghost
        
        init_kwargs = kwargs.copy()
        init_kwargs['model'] = model
        init_kwargs['color_manager'] = color_manager
        init_kwargs['is_goal'] = is_goal
        
        self._initial_kwargs: Dict[str, Any] = init_kwargs
        
        # –§–ª–∞–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —ç–≤–æ–ª—é—Ü–∏–∏ (–¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã—Ö —Å–ø–æ—Ä)
        self.evolution_completed = False
        
        # –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: cost_function –∏ cost
        self.cost_function = self.logic.calculate_cost
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ü–≤–µ—Ç –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏
        self.update_visual_state()
        
    def get_spore_id(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞—à –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π spore_id (–ù–ï Entity.id –æ—Ç Ursina)"""
        return str(self.spore_id)

    def __str__(self) -> str:
        """–î–ª—è –æ—Ç–ª–∞–¥–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏ Ursina id –∏ –Ω–∞—à spore_id"""
        ursina_id = getattr(self, 'id', 'N/A')
        return f"Spore(ursina_id={ursina_id}, spore_id={self.spore_id})"
    
    def apply_transform(self, a: float, b: np.ndarray, **kwargs: Any) -> None:
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—é –∫ –≤–∏–∑—É–∞–ª—å–Ω–æ–π —á–∞—Å—Ç–∏"""
        super().apply_transform(a, b, **kwargs)
    
    def calc_2d_pos(self) -> np.ndarray:
        """–û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 2D –ø–æ–∑–∏—Ü–∏—é –∏–∑ –ª–æ–≥–∏–∫–∏"""
        return self.logic.position_2d
    
    def calc_3d_pos(self, pos_2d: np.ndarray) -> np.ndarray:
        """–û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç 2D –ø–æ–∑–∏—Ü–∏—é –≤ 3D"""
        # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: –∏–∑–±–µ–≥–∞–µ–º –ª–∏—à–Ω–∏—Ö –∫–æ–ø–∏–π –µ—Å–ª–∏ pos_2d —É–∂–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–∏–ø
        if not isinstance(pos_2d, np.ndarray):
            pos_2d = np.array(pos_2d, dtype=float)
        # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: —Å–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ –Ω–∞–ø—Ä—è–º—É—é –±–µ–∑ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
        result = np.empty(3, dtype=float)
        result[0] = pos_2d[0]
        result[1] = self.y_coordinate
        result[2] = pos_2d[1]
        return result
    
    def evolve_3d(self, state: Optional[np.ndarray] = None,
                  control: float = 0,
                  dt: Optional[float] = None) -> np.ndarray:
        """
        –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: —ç–≤–æ–ª—é—Ü–∏—è —Å –≤–æ–∑–≤—Ä–∞—Ç–æ–º 3D –ø–æ–∑–∏—Ü–∏–∏
        """
        if state is None:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é –ª–æ–≥–∏–∫–∏
            new_pos_2d = self.logic.evolve(control=control, dt=dt)
        else:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º state –≤ 2D –µ—Å–ª–∏ –Ω—É–∂–Ω–æ - –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
            if hasattr(state, '__len__') and len(state) >= 2:
                if len(state) == 3:
                    # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: —Å–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–µ–µ –¥–ª—è 3D->2D
                    state_2d = np.empty(2, dtype=float)
                    state_2d[0] = state[0]
                    state_2d[1] = state[2]
                else:
                    # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: asarray –±—ã—Å—Ç—Ä–µ–µ —á–µ–º array –¥–ª—è —Å—Ä–µ–∑–æ–≤
                    state_2d = np.asarray(state[:2], dtype=float)
            else:
                state_2d = self.logic.position_2d
            
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ª–æ–≥–∏–∫—É –¥–ª—è —ç–≤–æ–ª—é—Ü–∏–∏
            temp_logic = SporeLogic(dt=self.dt, pendulum=self.pendulum,
                                    goal_position_2d=self.logic.goal_position_2d,
                                    initial_position_2d=state_2d)
            new_pos_2d = temp_logic.evolve(control=control, dt=dt)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ 3D –ø–æ–∑–∏—Ü–∏—é - –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
        result = np.empty(3, dtype=float)
        result[0] = new_pos_2d[0]
        result[1] = self.y_coordinate
        result[2] = new_pos_2d[1]
        return result
    
    def evolve_2d(self, state: Optional[np.ndarray] = None,
                  control: float = 0,
                  dt: Optional[float] = None) -> np.ndarray:
        """
        –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: —ç–≤–æ–ª—é—Ü–∏—è —Å –≤–æ–∑–≤—Ä–∞—Ç–æ–º 2D –ø–æ–∑–∏—Ü–∏–∏
        """
        if state is None or len(state) != 2:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é –ª–æ–≥–∏–∫–∏
            return self.logic.evolve(control=control, dt=dt)
        else:
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ª–æ–≥–∏–∫—É –¥–ª—è —ç–≤–æ–ª—é—Ü–∏–∏
            temp_logic = SporeLogic(dt=self.dt, pendulum=self.pendulum,
                                    goal_position_2d=self.logic.goal_position_2d,
                                    initial_position_2d=np.array(state))
            return temp_logic.evolve(control=control, dt=dt)
    
    def step(self, state: Optional[np.ndarray] = None,
             control: float = 0,
             dt: Optional[float] = None) -> Spore:
        """
        –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é —Å–ø–æ—Ä—É —Å —ç–≤–æ–ª—é—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–µ–π
        """
        if state is None:
            state = self.real_position
        
        new_spore = self.clone()
        new_3d_position = self.evolve_3d(state=state, control=control, dt=dt)
        new_spore.real_position = new_3d_position
        
        # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É —Å –Ω–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–µ–π - –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
        pos_2d = np.empty(2, dtype=float)
        pos_2d[0] = new_3d_position[0]
        pos_2d[1] = new_3d_position[2]
        new_spore.set_logic_position_2d(pos_2d)
        
        return new_spore
    
    def clone(self, new_position: Optional[np.ndarray |
                                           Tuple[float, float, float]] = None
              ) -> Spore:
        """
        –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: —Å–æ–∑–¥–∞–µ—Ç –∫–æ–ø–∏—é —Å–ø–æ—Ä—ã.
        –ú–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –∫–ª–æ–Ω–∞.
        """
        init_kwargs = self._initial_kwargs.copy()
        init_kwargs['position'] = (new_position if new_position is not None
                                   else self.real_position)
        
        # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –∫–ª—é—á–∏, –µ—Å–ª–∏ –æ–Ω–∏ –ø—Ä–∏—à–ª–∏ —á–µ—Ä–µ–∑ _initial_args
        keys_to_remove = ['pendulum', 'dt', 'model', 'color_manager',
                          'goal_position', 'is_goal', 'is_ghost']
        for key in keys_to_remove:
            if key in init_kwargs:
                del init_kwargs[key]
        
        new_spore = Spore(
            pendulum=self._initial_pendulum,
            dt=self._initial_dt,
            model=self._initial_model,
            color_manager=self._initial_color_manager,
            goal_position=self.goal_position,
            is_goal=self._initial_is_goal,
            is_ghost=self._initial_is_ghost,
            id_manager=getattr(self, '_id_manager', None),  # IDManager
            **init_kwargs
        )
        
        # –ö–æ–ø–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ª–æ–≥–∏–∫–∏
        new_spore.logic.position_2d = self.logic.position_2d.copy()
        
        return new_spore
    
    def sample_random_controls(self, N: int) -> np.ndarray:
        """–û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö —É–ø—Ä–∞–≤–ª–µ–Ω–∏–π"""
        return self.logic.sample_controls(N, method='random')
    
    def sample_mesh_controls(self, N: int) -> np.ndarray:
        """–û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–µ—Ç–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–π"""
        return self.logic.sample_controls(N, method='mesh')
    
    def simulate_controls(self, controls: np.ndarray) -> List[np.ndarray]:
        """–û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: —Å–∏–º—É–ª—è—Ü–∏—è –Ω–∞–±–æ—Ä–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–π"""
        return self.logic.simulate_controls(controls)
    
    def sync_with_logic(self, *args, **kwargs) -> None:
        """–û–±—ë—Ä—Ç–∫–∞ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –ª–æ–≥–∏–∫–æ–π"""
        super().sync_with_logic(self.logic)
    
    def set_logic_position_2d(self, position_2d: np.ndarray) -> None:
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç 2D –ø–æ–∑–∏—Ü–∏—é –ª–æ–≥–∏–∫–∏"""
        self.logic.set_position_2d(position_2d)
    
    def is_alive(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∂–∏–≤–∞ –ª–∏ —Å–ø–æ—Ä–∞."""
        return self.logic.is_alive()
    
    def set_alive(self, alive: bool) -> None:
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∂–∏–∑–Ω–∏ —Å–ø–æ—Ä—ã."""
        self.logic.set_alive(alive)
    
    def check_death(self) -> None:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É—Å–ª–æ–≤–∏—è —Å–º–µ—Ä—Ç–∏ —Å–ø–æ—Ä—ã –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç alive=False –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏."""
        old_alive = self.logic.is_alive()
        self.logic.check_death()
        
        # –ï—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –æ–±–Ω–æ–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
        if old_alive != self.logic.is_alive():
            self.update_visual_state()
    
    def mark_evolution_completed(self) -> None:
        """–ü–æ–º–µ—á–∞–µ—Ç —Å–ø–æ—Ä—É –∫–∞–∫ –∑–∞–≤–µ—Ä—à–∏–≤—à—É—é —ç–≤–æ–ª—é—Ü–∏—é."""
        self.evolution_completed = True
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        self.update_visual_state()
    
    def can_evolve(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –º–æ–∂–µ—Ç –ª–∏ —Å–ø–æ—Ä–∞ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å —ç–≤–æ–ª—é—Ü–∏—é."""
        return self.is_alive() and not self.evolution_completed
    
    def update_visual_state(self) -> None:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –≤–∏–∑—É–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–ø–æ—Ä—ã."""
        if hasattr(self, 'is_goal') and self.is_goal:
            # –¶–µ–ª–µ–≤–∞—è —Å–ø–æ—Ä–∞ - –≤—Å–µ–≥–¥–∞ –∑–µ–ª–µ–Ω—ã–π —Ü–≤–µ—Ç (–±–µ—Å—Å–º–µ—Ä—Ç–Ω–∞)
            self.set_color_type('goal')
        elif hasattr(self, 'is_candidate') and self.is_candidate:
            # –ö–∞–Ω–¥–∏–¥–∞—Ç—Å–∫–∞—è —Å–ø–æ—Ä–∞ - –±–µ–ª—ã–π –ø–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π
            self.set_color_type('candidate')
        elif hasattr(self, 'is_ghost') and self.is_ghost:
            # –ü—Ä–∏–∑—Ä–∞—á–Ω–∞—è —Å–ø–æ—Ä–∞ - –ø–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π —Ü–≤–µ—Ç
            self.set_color_type('ghost')
        elif self.evolution_completed:
            # –°–ø–æ—Ä–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞ —ç–≤–æ–ª—é—Ü–∏—é - —Å–∏–Ω–∏–π —Ü–≤–µ—Ç
            self.set_color_type('completed')
        elif not self.logic.is_alive():
            # –ú–µ—Ä—Ç–≤–∞—è —Å–ø–æ—Ä–∞ - —Å–µ—Ä—ã–π —Ü–≤–µ—Ç
            self.set_color_type('dead')
        else:
            # –ñ–∏–≤–∞—è –æ–±—ã—á–Ω–∞—è —Å–ø–æ—Ä–∞ - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ü–≤–µ—Ç
            self.set_color_type('default')
    
    def remove_self(self) -> None:
        """–û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: —É–¥–∞–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞"""
        self.destroy()
    
    def __repr__(self) -> str:
        """–û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
        return f'{self.position}'

