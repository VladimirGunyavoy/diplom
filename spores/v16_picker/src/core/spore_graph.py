"""
SporeGraph - –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–≤—è–∑–µ–π –º–µ–∂–¥—É —Å–ø–æ—Ä–∞–º–∏

–≠—Ç–æ—Ç –∫–ª–∞—Å—Å –∑–Ω–∞–µ—Ç:
- –ö–∞–∫–∞—è —Å–ø–æ—Ä–∞ —Å –∫–∞–∫–æ–π —Å–æ–µ–¥–∏–Ω–µ–Ω–∞
- –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–≤—è–∑–∏ (parent_spore -> child_spore)
- –¢–∏–ø —Å–≤—è–∑–∏ (—Ü–≤–µ—Ç: ghost_max, ghost_min, default)
- –ì—Ä–∞—Ñ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–µ–∞–ª—å–Ω—ã–º –∏–ª–∏ –ø—Ä–∏–∑—Ä–∞—á–Ω—ã–º
"""

from typing import Dict, Optional, Set, List, Tuple, Any
from ..core.spore import Spore
from ..visual.link import Link


class EdgeInfo:
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–±—Ä–µ –≥—Ä–∞—Ñ–∞ –º–µ–∂–¥—É –¥–≤—É–º—è —Å–ø–æ—Ä–∞–º–∏"""

    def __init__(self,
                 parent_spore: Spore,
                 child_spore: Spore,
                 link_type: str = 'default',
                 link_object: Optional[Link] = None):
        self.parent_spore = parent_spore
        self.child_spore = child_spore
        self.link_type = link_type
        self.link_object = link_object

    def get_direction_tuple(self) -> Tuple[str, str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ç–µ–∂ (parent_id, child_id) –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ä–µ–±—Ä–∞"""
        # üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ ID
        parent_id = self._get_spore_id(self.parent_spore)
        child_id = self._get_spore_id(self.child_spore)
        return (parent_id, child_id)
    
    def _get_spore_id(self, spore: Spore) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π ID —Å–ø–æ—Ä—ã, –∏—Å–ø—Ä–∞–≤–ª—è—è bound method"""
        spore_id = spore.id
        if hasattr(spore_id, '__call__'):  # –ï—Å–ª–∏ —ç—Ç–æ bound method
            if hasattr(spore, 'is_ghost') and spore.is_ghost:
                spore_id = f"tree_ghost_root"
            else:
                spore_id = f"spore_{id(spore)}"
        return str(spore_id)

    def __repr__(self):
        parent_id = self._get_spore_id(self.parent_spore)
        child_id = self._get_spore_id(self.child_spore)
        return (f"EdgeInfo({parent_id} -> {child_id}, "
                f"type={self.link_type})")


class SporeGraph:
    """
    –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –≥—Ä–∞—Ñ —Å–≤—è–∑–µ–π –º–µ–∂–¥—É —Å–ø–æ—Ä–∞–º–∏.

    –•—Ä–∞–Ω–∏—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å–≤—è–∑–µ–π –æ—Ç–¥–µ–ª—å–Ω–æ –æ—Ç –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ Link.
    –ü–æ–∑–≤–æ–ª—è–µ—Ç –ª–µ–≥–∫–æ –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –º–µ–∂–¥—É —Ä–µ–∞–ª—å–Ω—ã–º –∏ –ø—Ä–∏–∑—Ä–∞—á–Ω—ã–º –≥—Ä–∞—Ñ–æ–º.
    """

    def __init__(self, graph_type: str = 'real'):
        """
        Args:
            graph_type: 'real' –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∞, 'ghost' –¥–ª—è –ø—Ä–∏–∑—Ä–∞—á–Ω–æ–≥–æ
        """
        self.graph_type = graph_type

        # –û—Å–Ω–æ–≤–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ: –æ—Ç (parent_id, child_id) –∫ EdgeInfo
        self.edges: Dict[Tuple[str, str], EdgeInfo] = {}

        # –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
        self.nodes: Dict[str, Spore] = {}
        self.outgoing: Dict[str, Set[str]] = {}
        self.incoming: Dict[str, Set[str]] = {}

    def add_spore(self, spore: Spore) -> None:
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–ø–æ—Ä—É –≤ –≥—Ä–∞—Ñ"""
        if not hasattr(spore, 'id') or spore.id is None:
            raise ValueError(f"Spore –¥–æ–ª–∂–Ω–∞ –∏–º–µ—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π id: {spore}")

        # üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º bound method ID
        spore_id = spore.id
        if hasattr(spore_id, '__call__'):  # –ï—Å–ª–∏ —ç—Ç–æ bound method
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π ID –¥–ª—è –ø—Ä–∏–∑—Ä–∞—á–Ω—ã—Ö —Å–ø–æ—Ä
            if hasattr(spore, 'is_ghost') and spore.is_ghost:
                spore_id = f"tree_ghost_root"
            else:
                spore_id = f"spore_{id(spore)}"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º id –æ–±—ä–µ–∫—Ç–∞ –∫–∞–∫ fallback

        self.nodes[spore_id] = spore
        if spore_id not in self.outgoing:
            self.outgoing[spore_id] = set()
        if spore_id not in self.incoming:
            self.incoming[spore_id] = set()

    def add_edge(self,
                 parent_spore: Spore,
                 child_spore: Spore,
                 link_type: str = 'default',
                 link_object: Optional[Link] = None) -> EdgeInfo:
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç —Ä–µ–±—Ä–æ –≤ –≥—Ä–∞—Ñ

        Args:
            parent_spore: –°–ø–æ—Ä–∞-—Ä–æ–¥–∏—Ç–µ–ª—å (–Ω–∞—á–∞–ª–æ —Å—Ç—Ä–µ–ª–∫–∏)
            child_spore: –°–ø–æ—Ä–∞-—Ä–µ–±–µ–Ω–æ–∫ (–∫–æ–Ω–µ—Ü —Å—Ç—Ä–µ–ª–∫–∏)
            link_type: –¢–∏–ø —Å–≤—è–∑–∏ (ghost_max, ghost_min, default)
            link_object: –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –≤–∏–∑—É–∞–ª—å–Ω—ã–π Link

        Returns:
            EdgeInfo: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–º —Ä–µ–±—Ä–µ
        """
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–æ—Ä—ã –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        self.add_spore(parent_spore)
        self.add_spore(child_spore)

        edge_info = EdgeInfo(parent_spore, child_spore, link_type, link_object)
        edge_key = edge_info.get_direction_tuple()

        # –ï—Å–ª–∏ —Ä–µ–±—Ä–æ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ
        if edge_key in self.edges:
            print(f"‚ö†Ô∏è SporeGraph: –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Ä–µ–±—Ä–æ {edge_key}")

        self.edges[edge_key] = edge_info

        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å—ã
        parent_id = self._get_spore_id(parent_spore)
        child_id = self._get_spore_id(child_spore)
        self.outgoing[parent_id].add(child_id)
        self.incoming[child_id].add(parent_id)

        return edge_info
    
    def _get_spore_id(self, spore: Spore) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π ID —Å–ø–æ—Ä—ã, –∏—Å–ø—Ä–∞–≤–ª—è—è bound method"""
        spore_id = spore.id
        if hasattr(spore_id, '__call__'):  # –ï—Å–ª–∏ —ç—Ç–æ bound method
            if hasattr(spore, 'is_ghost') and spore.is_ghost:
                spore_id = f"tree_ghost_root"
            else:
                spore_id = f"spore_{id(spore)}"
        return str(spore_id)

    def remove_edge(self, parent_id: str, child_id: str) -> bool:
        """
        –£–¥–∞–ª—è–µ—Ç —Ä–µ–±—Ä–æ –∏–∑ –≥—Ä–∞—Ñ–∞

        Returns:
            bool: True –µ—Å–ª–∏ —Ä–µ–±—Ä–æ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ, False –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
        """
        edge_key = (parent_id, child_id)
        if edge_key not in self.edges:
            return False

        del self.edges[edge_key]

        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å—ã
        if parent_id in self.outgoing:
            self.outgoing[parent_id].discard(child_id)
        if child_id in self.incoming:
            self.incoming[child_id].discard(parent_id)

        return True

    def get_children(self, parent_id: str) -> List[Spore]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ—Ö –¥–µ—Ç–µ–π –¥–∞–Ω–Ω–æ–π —Å–ø–æ—Ä—ã"""
        child_ids = self.outgoing.get(parent_id, set())
        return [self.nodes[child_id] for child_id in child_ids
                if child_id in self.nodes]

    def get_parents(self, child_id: str) -> List[Spore]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ—Ö —Ä–æ–¥–∏—Ç–µ–ª–µ–π –¥–∞–Ω–Ω–æ–π —Å–ø–æ—Ä—ã"""
        parent_ids = self.incoming.get(child_id, set())
        return [self.nodes[parent_id] for parent_id in parent_ids
                if parent_id in self.nodes]

    def get_edge_info(self, parent_id: str,
                      child_id: str) -> Optional[EdgeInfo]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–±—Ä–µ"""
        return self.edges.get((parent_id, child_id))

    def copy_structure_from(self, other_graph: 'SporeGraph',
                           spore_manager=None) -> None:
        """
        –ö–æ–ø–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å–≤—è–∑–µ–π –∏–∑ –¥—Ä—É–≥–æ–≥–æ –≥—Ä–∞—Ñ–∞,
        —Å–æ–∑–¥–∞–≤–∞—è —Å–≤—è–∑–∏ –º–µ–∂–¥—É —Ä–µ–∞–ª—å–Ω—ã–º–∏ —Å–ø–æ—Ä–∞–º–∏.

        Args:
            other_graph: –ì—Ä–∞—Ñ-–∏—Å—Ç–æ—á–Ω–∏–∫ (–æ–±—ã—á–Ω–æ –ø—Ä–∏–∑—Ä–∞—á–Ω—ã–π)
            spore_manager: SporeManager –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö Link
        """
        print(f"üîÑ –ö–æ–ø–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏–∑ {other_graph.graph_type} "
              f"–≥—Ä–∞—Ñ–∞ –≤ {self.graph_type}")
        print(f"   üìä –ò—Å—Ç–æ—á–Ω–∏–∫: {len(other_graph.edges)} —Ä–µ–±–µ—Ä, "
              f"{len(other_graph.nodes)} —É–∑–ª–æ–≤")

        if not spore_manager or self.graph_type != 'real':
            print("   ‚ö†Ô∏è –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –≤ —Ä–µ–∞–ª—å–Ω—ã–π "
                  "–≥—Ä–∞—Ñ —Å SporeManager")
            return

        created_links = 0
        skipped_links = 0

        for edge_key, edge_info in other_graph.edges.items():
            # –ò—â–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ —Å–ø–æ—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –ø—Ä–∏–∑—Ä–∞—á–Ω—ã–º
            real_parent = find_real_spore_for_ghost(
                edge_info.parent_spore, spore_manager)
            real_child = find_real_spore_for_ghost(
                edge_info.child_spore, spore_manager)

            if real_parent and real_child:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–≤—è–∑—å –µ—â–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                edge_exists = self.get_edge_info(
                    real_parent.id, real_child.id) is not None

                if not edge_exists:
                    try:
                        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Link –∑–¥–µ—Å—å —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å
                        # —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
                        from ..visual.link import Link

                        # –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–π Link –º–µ–∂–¥—É –†–ï–ê–õ–¨–ù–´–ú–ò —Å–ø–æ—Ä–∞–º–∏
                        visual_link = Link(
                            parent_spore=real_parent,
                            child_spore=real_child,
                            color_manager=spore_manager.color_manager,
                            zoom_manager=spore_manager.zoom_manager,
                            config=spore_manager.config
                        )

                        # –í—Å–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–≤—è–∑–∏ –ø–æ–ª—É—á–∞—é—Ç –æ–±—ã—á–Ω—ã–π —Ü–≤–µ—Ç
                        visual_link.color = spore_manager.color_manager.get_color(
                            'link', 'default')

                        # –î–æ–±–∞–≤–ª—è–µ–º —Å–≤—è–∑—å –≤ –≥—Ä–∞—Ñ (–º–µ–∂–¥—É —Ä–µ–∞–ª—å–Ω—ã–º–∏ —Å–ø–æ—Ä–∞–º–∏)
                        self.add_edge(
                            parent_spore=real_parent,
                            child_spore=real_child,
                            link_type='default',  # –¢–æ–ª—å–∫–æ –æ–±—ã—á–Ω—ã–µ —Å–≤—è–∑–∏
                            link_object=visual_link
                        )

                        # –î–æ–±–∞–≤–ª—è–µ–º –≤ SporeManager
                        spore_manager.links.append(visual_link)

                        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤ ZoomManager
                        link_id = spore_manager.zoom_manager.get_unique_link_id()
                        spore_manager.zoom_manager.register_object(
                            visual_link, link_id)
                        visual_link._zoom_manager_key = link_id

                        created_links += 1

                    except Exception as e:
                        print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Link –º–µ–∂–¥—É "
                              f"{real_parent.id} -> {real_child.id}: {e}")
                        skipped_links += 1
                else:
                    skipped_links += 1
            else:
                print("   ‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω—ã —Ä–µ–∞–ª—å–Ω—ã–µ —Å–ø–æ—Ä—ã –¥–ª—è "
                      "–ø—Ä–∏–∑—Ä–∞—á–Ω–æ–π —Å–≤—è–∑–∏")
                skipped_links += 1

        print(f"   ‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ –≤ –≥—Ä–∞—Ñ: {len(self.edges)} —Ä–µ–±–µ—Ä, "
              f"{len(self.nodes)} —É–∑–ª–æ–≤")
        print(f"   üîó –°–æ–∑–¥–∞–Ω–æ –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö –ª–∏–Ω–∫–æ–≤: {created_links}")
        print(f"   ‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ —Å–≤—è–∑–µ–π: {skipped_links}")

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤—Å–µ—Ö –æ–±—ä–µ–∫—Ç–æ–≤
        if spore_manager and hasattr(spore_manager, 'zoom_manager'):
            spore_manager.zoom_manager.update_transform()

    def clear(self) -> None:
        """–û—á–∏—â–∞–µ—Ç –≤–µ—Å—å –≥—Ä–∞—Ñ"""
        self.edges.clear()
        self.nodes.clear()
        self.outgoing.clear()
        self.incoming.clear()

    def get_stats(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≥—Ä–∞—Ñ–∞"""
        link_types = {}
        for edge_info in self.edges.values():
            link_types[edge_info.link_type] = (
                link_types.get(edge_info.link_type, 0) + 1)

        return {
            'graph_type': self.graph_type,
            'nodes_count': len(self.nodes),
            'edges_count': len(self.edges),
            'link_types': link_types
        }

    def debug_print(self) -> None:
        """–í—ã–≤–æ–¥–∏—Ç –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä–∞—Ñ–µ"""
        stats = self.get_stats()
        print(f"üìä {self.graph_type.upper()} –ì–†–ê–§:")
        print(f"   üî¥ –£–∑–ª–æ–≤ (—Å–ø–æ—Ä): {stats['nodes_count']}")
        print(f"   üîó –†–µ–±–µ—Ä (—Å–≤—è–∑–µ–π): {stats['edges_count']}")
        print(f"   üé® –¢–∏–ø—ã —Å–≤—è–∑–µ–π: {stats['link_types']}")

    def create_debug_visualization(self, filename_prefix="graph_debug"):
        """
        –°–æ–∑–¥–∞–µ—Ç –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é –≥—Ä–∞—Ñ–∞ —Å matplotlib.
        
        Args:
            filename_prefix: –ü—Ä–µ—Ñ–∏–∫—Å –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
            
        Returns:
            str: –ü—É—Ç—å –∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
        """
        try:
            import matplotlib.pyplot as plt
            import numpy as np
            import os
            
            # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É buffer –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            buffer_dir = "buffer"
            os.makedirs(buffer_dir, exist_ok=True)
            
            fig, ax = plt.subplots(figsize=(12, 8))
            
            # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —É–∑–ª–∞—Ö
            nodes_info = []
            for spore_id, spore in self.nodes.items():
                try:
                    if hasattr(spore, 'calc_2d_pos'):
                        pos_2d = spore.calc_2d_pos()
                        is_ghost = getattr(spore, 'is_ghost', False)
                        nodes_info.append({
                            'id': spore_id,
                            'pos': pos_2d,
                            'is_ghost': is_ghost,
                            'spore': spore
                        })
                    else:
                        print(f"   ‚ö†Ô∏è –£–∑–µ–ª {spore_id} –Ω–µ –∏–º–µ–µ—Ç calc_2d_pos")
                except Exception as e:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–∑–ª–∞ {spore_id}: {e}")
            
            print(f"üîç –ê–ù–ê–õ–ò–ó {self.graph_type.upper()} –ì–†–ê–§–ê:")
            print(f"   üìä –£–∑–ª–æ–≤ –≤ –≥—Ä–∞—Ñ–µ: {len(self.nodes)}")
            print(f"   üìä –£–∑–ª–æ–≤ —Å –ø–æ–∑–∏—Ü–∏—è–º–∏: {len(nodes_info)}")
            print(f"   üìä –†–µ–±–µ—Ä –≤ –≥—Ä–∞—Ñ–µ: {len(self.edges)}")
            
            # –†–∏—Å—É–µ–º —É–∑–ª—ã
            for node in nodes_info:
                pos = node['pos']
                color = 'red' if node['is_ghost'] else 'blue'
                alpha = 0.7 if node['is_ghost'] else 1.0
                
                ax.scatter(pos[0], pos[1], c=color, s=100, alpha=alpha)
                ax.annotate(f"{node['id']}", (pos[0], pos[1]), 
                           xytext=(5, 5), textcoords='offset points', fontsize=8)
            
            # –†–∏—Å—É–µ–º —Ä–µ–±—Ä–∞
            edge_count_by_type = {}
            for edge_key, edge_info in self.edges.items():
                try:
                    parent_pos = edge_info.parent_spore.calc_2d_pos()
                    child_pos = edge_info.child_spore.calc_2d_pos()
                    
                    # –¶–≤–µ—Ç –ø–æ —Ç–∏–ø—É —Å–≤—è–∑–∏ (–ë–ï–ó active!)
                    if edge_info.link_type == 'ghost_max':
                        color = 'green'
                    elif edge_info.link_type == 'ghost_min':
                        color = 'orange'
                    else:
                        color = 'blue'  # –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ = –æ–±—ã—á–Ω—ã–µ —Å–≤—è–∑–∏
                    
                    # –†–∏—Å—É–µ–º —Å—Ç—Ä–µ–ª–∫—É
                    ax.annotate('', xy=child_pos, xytext=parent_pos,
                               arrowprops=dict(arrowstyle='->', color=color, lw=1.5))
                    
                    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–∏–ø–æ–≤
                    edge_count_by_type[edge_info.link_type] = edge_count_by_type.get(edge_info.link_type, 0) + 1
                    
                except Exception as e:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞ —Ä–∏—Å–æ–≤–∞–Ω–∏—è —Ä–µ–±—Ä–∞ {edge_key}: {e}")
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞
            ax.set_title(f'{self.graph_type.upper()} –ì–†–ê–§ - –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è')
            ax.set_xlabel('Œ∏ (—É–≥–æ–ª, —Ä–∞–¥)')
            ax.set_ylabel('Œ∏Ãá (—Å–∫–æ—Ä–æ—Å—Ç—å, —Ä–∞–¥/—Å)')
            ax.grid(True, alpha=0.3)
            
            # –õ–µ–≥–µ–Ω–¥–∞ (–ë–ï–ó active!)
            legend_elements = [
                plt.Line2D([0], [0], marker='o', color='w', markerfacecolor='blue', markersize=8, label='–†–µ–∞–ª—å–Ω—ã–µ —É–∑–ª—ã'),
                plt.Line2D([0], [0], marker='o', color='w', markerfacecolor='red', markersize=8, alpha=0.7, label='–ü—Ä–∏–∑—Ä–∞—á–Ω—ã–µ —É–∑–ª—ã'),
                plt.Line2D([0], [0], color='green', linewidth=2, label='ghost_max —Å–≤—è–∑–∏'),
                plt.Line2D([0], [0], color='orange', linewidth=2, label='ghost_min —Å–≤—è–∑–∏'),
                plt.Line2D([0], [0], color='blue', linewidth=2, label='–æ–±—ã—á–Ω—ã–µ —Å–≤—è–∑–∏')
            ]
            ax.legend(handles=legend_elements, loc='upper right')
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∏–º–µ–Ω–µ–º
            filename = f"{filename_prefix}_{self.graph_type}.png"
            filepath = os.path.join(buffer_dir, filename)
            
            plt.tight_layout()
            plt.savefig(filepath, dpi=150, bbox_inches='tight')
            plt.close()
            
            print(f"üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –¢–ò–ü–û–í –°–í–Ø–ó–ï–ô:")
            for link_type, count in edge_count_by_type.items():
                print(f"   üé® {link_type}: {count}")
            
            print(f"üíæ –ì—Ä–∞—Ñ–∏–∫ {self.graph_type} –≥—Ä–∞—Ñ–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filepath}")
            return filepath
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
            import traceback
            traceback.print_exc()
            return None

    def print_graph_structure(self):
        """
        –í—ã–≤–æ–¥–∏—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≥—Ä–∞—Ñ–∞ –≤ –∫–æ–Ω—Å–æ–ª—å –≤ —á–∏—Ç–∞–µ–º–æ–º –≤–∏–¥–µ.
        """
        print(f"\n" + "="*60)
        print(f"üìä –°–¢–†–£–ö–¢–£–†–ê {self.graph_type.upper()} –ì–†–ê–§–ê")
        print("="*60)
        
        # –í—ã–≤–æ–¥–∏–º —É–∑–ª—ã
        print(f"üî¥ –£–ó–õ–´ ({len(self.nodes)}):")
        for spore_id, spore in self.nodes.items():
            try:
                if hasattr(spore, 'calc_2d_pos'):
                    pos = spore.calc_2d_pos()
                    is_ghost = getattr(spore, 'is_ghost', 'N/A')
                    print(f"   ‚Ä¢ {spore_id}: pos=({pos[0]:.4f}, {pos[1]:.4f}), is_ghost={is_ghost}")
                else:
                    print(f"   ‚Ä¢ {spore_id}: –ù–ï–¢ –ü–û–ó–ò–¶–ò–ò")
            except Exception as e:
                print(f"   ‚Ä¢ {spore_id}: –û–®–ò–ë–ö–ê - {e}")
        
        # –í—ã–≤–æ–¥–∏–º —Å–≤—è–∑–∏
        print(f"\nüîó –°–í–Ø–ó–ò ({len(self.edges)}):")
        if not self.edges:
            print("   (–Ω–µ—Ç —Å–≤—è–∑–µ–π)")
        else:
            for i, (edge_key, edge_info) in enumerate(self.edges.items(), 1):
                try:
                    parent_id = edge_key[0]
                    child_id = edge_key[1]
                    link_type = edge_info.link_type
                    
                    # –ü–æ–∑–∏—Ü–∏–∏
                    if hasattr(edge_info.parent_spore, 'calc_2d_pos'):
                        parent_pos = edge_info.parent_spore.calc_2d_pos()
                        parent_pos_str = f"({parent_pos[0]:.4f}, {parent_pos[1]:.4f})"
                    else:
                        parent_pos_str = "(–Ω–µ—Ç –ø–æ–∑–∏—Ü–∏–∏)"
                        
                    if hasattr(edge_info.child_spore, 'calc_2d_pos'):
                        child_pos = edge_info.child_spore.calc_2d_pos()
                        child_pos_str = f"({child_pos[0]:.4f}, {child_pos[1]:.4f})"
                    else:
                        child_pos_str = "(–Ω–µ—Ç –ø–æ–∑–∏—Ü–∏–∏)"
                    
                    print(f"   {i:2d}. {parent_id} ‚Üí {child_id} [—Ç–∏–ø: {link_type}]")
                    print(f"       –æ—Ç: {parent_pos_str} –∫: {child_pos_str}")
                    
                except Exception as e:
                    print(f"   {i:2d}. –û–®–ò–ë–ö–ê –°–í–Ø–ó–ò {edge_key}: {e}")
        
        print("="*60)


def find_real_spore_for_ghost(ghost_spore, spore_manager, tolerance=1e-6):
    """
    –ù–∞—Ö–æ–¥–∏—Ç —Ä–µ–∞–ª—å–Ω—É—é —Å–ø–æ—Ä—É, –∫–æ—Ç–æ—Ä–∞—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø—Ä–∏–∑—Ä–∞—á–Ω–æ–π –ø–æ –ø–æ–∑–∏—Ü–∏–∏.

    Args:
        ghost_spore: –ü—Ä–∏–∑—Ä–∞—á–Ω–∞—è —Å–ø–æ—Ä–∞
        spore_manager: SporeManager —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ —Å–ø–æ—Ä–∞–º–∏
        tolerance: –î–æ–ø—É—Å—Ç–∏–º–∞—è –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å –≤ –ø–æ–∑–∏—Ü–∏–∏

    Returns:
        –†–µ–∞–ª—å–Ω–∞—è —Å–ø–æ—Ä–∞ –∏–ª–∏ None
    """
    if not ghost_spore or not hasattr(ghost_spore, 'calc_2d_pos'):
        return None

    try:
        ghost_pos = ghost_spore.calc_2d_pos()

        # –ò—â–µ–º —Å—Ä–µ–¥–∏ —Ä–µ–∞–ª—å–Ω—ã—Ö —Å–ø–æ—Ä
        for real_spore in spore_manager.objects:
            if (hasattr(real_spore, 'calc_2d_pos') and
                    not getattr(real_spore, 'is_ghost', False)):
                real_pos = real_spore.calc_2d_pos()

                # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –ø–æ–∑–∏—Ü–∏—è–º–∏
                distance = ((ghost_pos[0] - real_pos[0])**2 +
                           (ghost_pos[1] - real_pos[1])**2)**0.5

                if distance < tolerance:
                    return real_spore

        return None

    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ä–µ–∞–ª—å–Ω–æ–π —Å–ø–æ—Ä—ã: {e}")
        return None
