from ursina import Vec3
import numpy as np
from typing import Optional, Dict, Any
from ..utils.scalable import Scalable
from ..core.spore import Spore
from ..managers.color_manager import ColorManager
from ..managers.zoom_manager import ZoomManager

class Link(Scalable):
    def __init__(self, 
                 parent_spore: Spore, 
                 child_spore: Spore, 
                 zoom_manager: ZoomManager,
                 color_manager: Optional[ColorManager] = None, 
                 config: Optional[Dict[str, Any]] = None,
                 link_type: str = 'default',
                 max_length: Optional[float] = None,
                 id_manager=None,
                 link_id=None,  # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —è–≤–Ω—ã–π ID
                 **kwargs):
        self.config: Dict[str, Any] = config if config is not None else {}
        
        # –ü–æ–ª–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –∏–∑–≤–Ω–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º)
        self.id = None
        
        # üîß –ù–û–í–ê–Ø –°–ò–°–¢–ï–ú–ê: –ù–∞—à —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π link_id
        if link_id is not None:
            # –Ø–≤–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π ID (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
            self.link_id = link_id
        elif id_manager is not None:
            # –ü–æ–ª—É—á–∞–µ–º ID –∏–∑ IDManager
            self.link_id = id_manager.get_next_link_id()
        else:
            # Fallback: –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ø–æ—Ä
            parent_id = (getattr(parent_spore, 'spore_id', 'unknown') 
                        if parent_spore else 'unknown')
            child_id = (getattr(child_spore, 'spore_id', 'unknown') 
                       if child_spore else 'unknown')
            self.link_id = f"link_{parent_id}_to_{child_id}_{id(self)}"
            print(f"‚ö†Ô∏è Link —Å–æ–∑–¥–∞–Ω –±–µ–∑ IDManager, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω fallback "
                  f"link_id: {self.link_id}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ IDManager –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –ø—Ä–∏ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏
        self._id_manager = id_manager
        
        thickness: float
        if link_type == 'angel':
            thickness = self.config.get('angel', {}).get('link_thickness', 1)
        else:
            thickness = self.config.get('link', {}).get('thickness', 1)
        self.thickness = thickness
            
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π ColorManager –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
        self.color_manager: ColorManager = color_manager if color_manager is not None else ColorManager()
        self.zoom_manager: ZoomManager = zoom_manager

        self.parent_spore: Spore = parent_spore
        self.child_spore: Spore = child_spore

        self.max_length: Optional[float] = max_length

        super().__init__(
            model='models/arrow.obj',
            position=(0, 0, 0),  # –í—Ä–µ–º–µ–Ω–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è, –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –≤ update_geometry
            color=self.color_manager.get_color('link', 'default'),
            render_queue=0,
            thickness=self.thickness,
            **kwargs
        )
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–µ–æ–º–µ—Ç—Ä–∏–∏

        self.update_geometry()

    def set_max_length(self, max_length: Optional[float]) -> None:
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –≤–∏–∑—É–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É –ª–∏–Ω–∫–∞."""
        self.max_length = max_length
        self.update_geometry()

    def update_geometry(self) -> None:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ–∑–∏—Ü–∏—é, –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é –∏ –º–∞—Å—à—Ç–∞–± –ª–∏–Ω–∫–∞ –º–µ–∂–¥—É –¥–≤—É–º—è —Ç–æ—á–∫–∞–º–∏."""
        ball_size = self.parent_spore.real_scale[0] * self.zoom_manager.spores_scale

        parent_pos = self.parent_spore.real_position
        child_pos = self.child_spore.real_position
        vec = child_pos - parent_pos
        distance = float(np.linalg.norm(vec))

        # –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ª–∏—à–∫–æ–º –º–∞–ª—ã—Ö —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π
        min_distance = ball_size * 0.1
        if distance < 1e-12:
            self.visible = False
            return

        # –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã, –µ—Å–ª–∏ –µ—Å—Ç—å
        effective_length = distance
        if self.max_length is not None:
            effective_length = min(effective_length, float(self.max_length))

        if effective_length < min_distance:
            self.visible = False
            return
        else:
            self.visible = True

        # –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ —Ç–æ—á–∫–∞ "—É—Å–µ—á–µ–Ω–Ω–æ–π" —Ü–µ–ª–∏
        direction = vec / distance
        target_pos = parent_pos + direction * effective_length

        # –°–¥–≤–∏–≥ –æ—Å–Ω–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–µ–ª–∫–∏ –æ—Ç —Ä–æ–¥–∏—Ç–µ–ª—è –Ω–∞ ~ ball_size/2, –∫–∞–∫ —Ä–∞–Ω—å—à–µ
        alpha = ball_size / effective_length / 2.0
        real_pos = (1.0 - alpha) * parent_pos + alpha * target_pos

        arrow_width = self.thickness * self.zoom_manager.spores_scale
        # –≤—ã—Å–æ—Ç–∞ = —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞—è –¥–ª–∏–Ω–∞ –º–∏–Ω—É—Å –¥–∏–∞–º–µ—Ç—Ä –∫–∞—Å–∞–Ω–∏—è —Å —à–∞—Ä–∞–º–∏
        real_scale = (arrow_width, max(effective_length - ball_size, min_distance), arrow_width)

        if np.any(np.isnan(real_pos)):
            print(f"WARNING: NaN detected in Link position, hiding link")
            self.visible = False
            return

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é/–æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é/–º–∞—Å—à—Ç–∞–±
        self.position = tuple(real_pos)
        self.look_at(Vec3(*target_pos), axis='up')

        self.real_scale = np.array(real_scale)
        self.real_position = real_pos
        
    def get_link_id(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞—à –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π link_id (–ù–ï Entity.id –æ—Ç Ursina)"""
        return str(self.link_id)

    def __str__(self) -> str:
        """–î–ª—è –æ—Ç–ª–∞–¥–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏ Ursina id –∏ –Ω–∞—à link_id"""
        parent_id = getattr(self.parent_spore, 'spore_id', 'N/A') if self.parent_spore else 'N/A'
        child_id = getattr(self.child_spore, 'spore_id', 'N/A') if self.child_spore else 'N/A'
        return f"Link(ursina_id={getattr(self, 'id', 'N/A')}, link_id={self.link_id}, {parent_id}->{child_id})"
        
    def apply_transform(self, a: float, b: np.ndarray, **kwargs) -> None:
        spores_scale = kwargs.get('spores_scale', 1.0)
        self.position = self.real_position * a + b
        self.scale = self.real_scale * a