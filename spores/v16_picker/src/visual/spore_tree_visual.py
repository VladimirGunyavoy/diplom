"""
SporeTreeVisual - –ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∫–ª–∞—Å—Å –¥–µ—Ä–µ–≤–∞ —Å–ø–æ—Ä –¥–ª—è Ursina

–°–æ–∑–¥–∞–µ—Ç –≤ spores/v14_back/src/visual/spore_tree_visual.py
"""

import numpy as np
from typing import List, Dict, Optional, Any
from ursina import destroy

from ..core.spore import Spore
from ..visual.link import Link
from ..managers.color_manager import ColorManager
from ..managers.zoom_manager import ZoomManager


class SporeTreeVisual:
    """
    –¢–û–õ–¨–ö–û –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–µ—Ä–µ–≤–∞ —Å–ø–æ—Ä.
    
    –ß–∏—Ç–∞–µ—Ç –≥–æ—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ SporeTree –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏—Ö –≤ 3D.
    –ù–ï —Å–æ–¥–µ—Ä–∂–∏—Ç –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏ - —Ç–æ–ª—å–∫–æ graphics.
    """
    
    def __init__(self,
                 color_manager: ColorManager,
                 zoom_manager: ZoomManager,
                 config: dict,
                 id_manager=None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä–∞.
        
        Args:
            color_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä —Ü–≤–µ—Ç–æ–≤
            zoom_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä –∑—É–º–∞  
            config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è Spore –æ–±—ä–µ–∫—Ç–æ–≤
            id_manager: –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä ID (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        """
        self.color_manager = color_manager
        self.zoom_manager = zoom_manager
        self.config = config
        self.id_manager = id_manager
        
        # –°—Å—ã–ª–∫–∞ –Ω–∞ –ª–æ–≥–∏—á–µ—Å–∫–æ–µ –¥–µ—Ä–µ–≤–æ (—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –∏–∑–≤–Ω–µ)
        self.tree_logic = None
        
        # 3D –æ–±—ä–µ–∫—Ç—ã
        self.root_spore: Optional[Spore] = None
        self.child_spores: List[Spore] = []
        self.grandchild_spores: List[Spore] = []
        self.child_links: List[Link] = []
        self.grandchild_links: List[Link] = []
        
        # –§–ª–∞–≥ —Å–æ–∑–¥–∞–Ω–∏—è
        self.visual_created = False
        
        # –¶–≤–µ—Ç–∞ (—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç tree_optimization)
        self.child_colors = ['#FF6B6B', '#9B59B6', '#1ABC9C', '#F39C12']
        self.grandchild_colors = [
            '#FF1744', '#9C27B0', '#2196F3', '#4CAF50',
            '#FF9800', '#795548', '#E91E63', '#607D8B'
        ]
        
    def set_tree_logic(self, tree_logic):
        """
        –°–≤—è–∑—ã–≤–∞–µ—Ç –≤–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä —Å –ª–æ–≥–∏—á–µ—Å–∫–∏–º –¥–µ—Ä–µ–≤–æ–º.
        
        Args:
            tree_logic: –û–±—ä–µ–∫—Ç SporeTree —Å –≥–æ—Ç–æ–≤–æ–π –ª–æ–≥–∏–∫–æ–π
        """
        self.tree_logic = tree_logic
        
    def create_visual(self) -> None:
        """
        –°–æ–∑–¥–∞–µ—Ç 3D –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ tree_logic.
        """
        if not self.tree_logic:
            raise ValueError("–°–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ tree_logic —á–µ—Ä–µ–∑ set_tree_logic()")
            
        if not self.tree_logic._children_created:
            raise ValueError("–í tree_logic –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω—ã –¥–µ—Ç–∏")
            
        if self.visual_created:
            self.destroy_visual()
            
        # –ß–∏—Ç–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        goal_position = self.config.get('spore', {}).get('goal_position', [0, 0])
        spore_config = self.config.get('spore', {})
        
        # –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
        self._create_root_visual(goal_position, spore_config)
        self._create_children_visual(goal_position, spore_config)
        
        if self.tree_logic._grandchildren_created:
            self._create_grandchildren_visual(goal_position, spore_config)
            
        self.visual_created = True
        
        spore_count = 1 + len(self.child_spores) + len(self.grandchild_spores)
        link_count = len(self.child_links) + len(self.grandchild_links)
        
        print(f"üé® –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞: {spore_count} —Å–ø–æ—Ä, {link_count} —Å—Ç—Ä–µ–ª–æ–∫")
        
        # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –ø—Ä–∏–∑—Ä–∞—á–Ω—ã–º –¥–µ—Ä–µ–≤–æ–º (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
        if hasattr(self.tree_logic, 'ghost_tree') and self.tree_logic.ghost_tree:
            try:
                ghost_links_count = len(self.tree_logic.ghost_tree.grandchild_links)
                real_links_count = len(self.grandchild_links)
                
                print("üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ª–∏–Ω–∫–æ–≤:")
                print(f"   –ü—Ä–∏–∑—Ä–∞—á–Ω–æ–µ –¥–µ—Ä–µ–≤–æ: {ghost_links_count} –ª–∏–Ω–∫–æ–≤") 
                print(f"   –†–µ–∞–ª—å–Ω–æ–µ –¥–µ—Ä–µ–≤–æ: {real_links_count} –ª–∏–Ω–∫–æ–≤")
                print(f"   –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ: {'‚úÖ' if ghost_links_count == real_links_count else '‚ùå'}")
                
                if ghost_links_count != real_links_count:
                    print("‚ö†Ô∏è  –ü–†–û–ë–õ–ï–ú–ê: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏–Ω–∫–æ–≤ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç!")
                    print(f"   –†–∞–∑–Ω–∏—Ü–∞: {abs(ghost_links_count - real_links_count)} –ª–∏–Ω–∫–æ–≤")
            except Exception as e:
                print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ä–∞–≤–Ω–∏—Ç—å —Å –ø—Ä–∏–∑—Ä–∞—á–Ω—ã–º –¥–µ—Ä–µ–≤–æ–º: {e}")
        else:
            print("üìä –ü—Ä–∏–∑—Ä–∞—á–Ω–æ–µ –¥–µ—Ä–µ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è")
        
    def _create_root_visual(self, goal_position: List[float], spore_config: dict):
        """–°–æ–∑–¥–∞–µ—Ç –≤–∏–∑—É–∞–ª—å–Ω—ã–π –∫–æ—Ä–µ–Ω—å."""
        root_data = self.tree_logic.root
        
        self.root_spore = Spore(
            pendulum=self.tree_logic.pendulum,  # –ë–µ—Ä–µ–º –∏–∑ –ª–æ–≥–∏–∫–∏
            dt=0.1,  # –î–ª—è –∫–æ—Ä–Ω—è –Ω–µ –≤–∞–∂–Ω–æ
            goal_position=goal_position,
            scale=spore_config.get('scale', 0.1),
            position=(root_data['position'][0], 0.0, root_data['position'][1]),
            color_manager=self.color_manager,
            config=spore_config
        )
        
        # –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
        self.root_spore.id = self._get_next_spore_id()
        
        # –¶–≤–µ—Ç –∫–æ—Ä–Ω—è –∫–∞–∫ –≤ matplotlib –≤–µ—Ä—Å–∏–∏
        self.root_spore.color = self.color_manager.get_color('spore', 'default')
        
    def _create_children_visual(self, goal_position: List[float], spore_config: dict):
        """–°–æ–∑–¥–∞–µ—Ç –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö –¥–µ—Ç–µ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ tree_logic."""
        self.child_spores.clear()
        self.child_links.clear()
        
        for i, child_data in enumerate(self.tree_logic.children):
            # –°–æ–∑–¥–∞–µ–º —Å–ø–æ—Ä—É
            child_spore = Spore(
                pendulum=self.tree_logic.pendulum,
                dt=abs(child_data['dt']),  # –ß–∏—Ç–∞–µ–º –∏–∑ –ª–æ–≥–∏–∫–∏
                goal_position=goal_position,
                scale=spore_config.get('scale', 0.1),
                position=(child_data['position'][0], 0.0, child_data['position'][1]),
                color_manager=self.color_manager,
                config=spore_config
            )
            
            # –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
            child_spore.id = self._get_next_spore_id()
            
            # –¶–≤–µ—Ç —Ä–µ–±–µ–Ω–∫–∞
            child_spore.color = self.color_manager.get_color('spore', 'default')
            
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º
            self.child_spores.append(child_spore)
            
            # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–µ–ª–∫—É
            self._create_child_link_visual(i, child_data)
            
    def _create_child_link_visual(self, child_idx: int, child_data: dict):
        """–°–æ–∑–¥–∞–µ—Ç —Å—Ç—Ä–µ–ª–∫—É –¥–ª—è —Ä–µ–±–µ–Ω–∫–∞."""
        child_spore = self.child_spores[child_idx]
        
        # –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–µ–ª–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∑–Ω–∞–∫–æ–º dt –∏–∑ –ª–æ–≥–∏–∫–∏
        if child_data['dt'] > 0:  # forward: –∫–æ—Ä–µ–Ω—å ‚Üí —Ä–µ–±–µ–Ω–æ–∫
            parent_spore = self.root_spore
            child_link_spore = child_spore
        else:  # backward: —Ä–µ–±–µ–Ω–æ–∫ ‚Üí –∫–æ—Ä–µ–Ω—å  
            parent_spore = child_spore
            child_link_spore = self.root_spore
            
        # –°–æ–∑–¥–∞–µ–º –ª–∏–Ω–∫
        link = Link(
            parent_spore=parent_spore,
            child_spore=child_link_spore,
            color_manager=self.color_manager,
            zoom_manager=self.zoom_manager,
            config=self.config
        )
        
        # –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
        link.id = self._get_next_link_id()
        
        # –¶–≤–µ—Ç —Å—Ç—Ä–µ–ª–∫–∏ –ø–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é (—á–∏—Ç–∞–µ–º –∏–∑ –ª–æ–≥–∏–∫–∏)
        if child_data['control'] > 0:  # u_max
            link.color = self.color_manager.get_color('link', 'ghost_max')
        else:  # u_min
            link.color = self.color_manager.get_color('link', 'ghost_min')
            
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º
        link.update_geometry()
        self.child_links.append(link)
        
    def _create_grandchildren_visual(self, goal_position: List[float], spore_config: dict):
        """–°–æ–∑–¥–∞–µ—Ç –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö –≤–Ω—É–∫–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ tree_logic."""
        self.grandchild_spores.clear()
        self.grandchild_links.clear()
        
        print("üîó –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ª–∏–Ω–∫–æ–≤ –¥–ª—è –≤–Ω—É–∫–æ–≤")
        print(f"   –í—Å–µ–≥–æ –≤–Ω—É–∫–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {len(self.tree_logic.grandchildren)}")
        
        # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
        merged_count = sum(1 for gc in self.tree_logic.grandchildren if 'merged_from' in gc)
        regular_count = len(self.tree_logic.grandchildren) - merged_count
        print(f"   üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞: {regular_count} –æ–±—ã—á–Ω—ã—Ö + {merged_count} –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã—Ö —Å–ø–æ—Ä")
        
        created_links_count = 0
        
        for i, gc_data in enumerate(self.tree_logic.grandchildren):
            # –°–æ–∑–¥–∞–µ–º —Å–ø–æ—Ä—É –≤–Ω—É–∫–∞
            grandchild_spore = Spore(
                pendulum=self.tree_logic.pendulum,
                dt=abs(gc_data['dt']),  # –ß–∏—Ç–∞–µ–º –∏–∑ –ª–æ–≥–∏–∫–∏
                goal_position=goal_position,
                scale=spore_config.get('scale', 0.1),
                position=(gc_data['position'][0], 0.0, gc_data['position'][1]),
                color_manager=self.color_manager,
                config=spore_config
            )
            
            # –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
            grandchild_spore.id = self._get_next_spore_id()
            
            # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ü–≤–µ—Ç –¥–ª—è –≤—Å–µ—Ö —Å–ø–æ—Ä
            grandchild_spore.color = self.color_manager.get_color('spore', 'default')
            
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º
            self.grandchild_spores.append(grandchild_spore)
            
            # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–µ–ª–∫—É(–∏) –¥–ª—è –≤–Ω—É–∫–∞
            self._create_grandchild_link_visual(i, gc_data)
            created_links_count += 1
            
        print(f"üîó –ò—Ç–æ–≥–æ —Å–æ–∑–¥–∞–Ω–æ –ª–∏–Ω–∫–æ–≤: {created_links_count}")
        return created_links_count
            
    def _create_grandchild_link_visual(self, gc_idx: int, gc_data: dict):
        """–°–æ–∑–¥–∞–µ—Ç —Å—Ç—Ä–µ–ª–∫—É –¥–ª—è –≤–Ω—É–∫–∞. –î–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã—Ö —Å–ø–æ—Ä –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –ª–æ–≥–∏–∫—É."""
        grandchild_spore = self.grandchild_spores[gc_idx]
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        is_merged = 'merged_from' in gc_data
        print(f"üîó –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–Ω—É–∫–∞ {gc_idx}: merged={is_merged}, parent_idx={gc_data['parent_idx']}")
        
        # –î–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã—Ö —Å–ø–æ—Ä –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –ª–æ–≥–∏–∫—É (–∫–∞–∫ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö)
        parent_spore = self.child_spores[gc_data['parent_idx']]

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ –∑–Ω–∞–∫—É dt
        if gc_data['dt'] > 0:  # forward: —Ä–æ–¥–∏—Ç–µ–ª—å ‚Üí –≤–Ω—É–∫
            parent_link = parent_spore
            child_link = grandchild_spore
            direction = "parent ‚Üí child"
        else:  # backward: –≤–Ω—É–∫ ‚Üí —Ä–æ–¥–∏—Ç–µ–ª—å
            parent_link = grandchild_spore  
            child_link = parent_spore
            direction = "child ‚Üí parent"

        print(f"   üìç –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {direction} (dt={gc_data['dt']})")

        # –°–æ–∑–¥–∞–µ–º –û–î–ò–ù —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ª–∏–Ω–∫
        link = Link(
            parent_spore=parent_link,
            child_spore=child_link,
            color_manager=self.color_manager,
            zoom_manager=self.zoom_manager,
            config=self.config
        )

        link.id = self._get_next_link_id()
        
        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ü–≤–µ—Ç –ø–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é
        if gc_data['control'] > 0:
            link.color = self.color_manager.get_color('link', 'ghost_max')
            control_color = "ghost_max"
        else:
            link.color = self.color_manager.get_color('link', 'ghost_min')
            control_color = "ghost_min"
            
        print(f"   üé® –¶–≤–µ—Ç: {control_color} (control={gc_data['control']})")
        
        link.update_geometry()
        self.grandchild_links.append(link)
        
        print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω –ª–∏–Ω–∫ #{len(self.grandchild_links)}")
        
    def sync_with_logic(self) -> None:
        """
        –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π.
        
        –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∫–æ–≥–¥–∞ tree_logic –∏–∑–º–µ–Ω–∏–ª—Å—è (–Ω–æ–≤—ã–π dt_vector).
        """
        if not self.visual_created or not self.tree_logic:
            return
            
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ –¥–µ—Ç–µ–π
        self._sync_children_positions()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ –≤–Ω—É–∫–æ–≤ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if self.tree_logic._grandchildren_created and len(self.grandchild_spores) > 0:
            self._sync_grandchildren_positions()
            
        print("üîÑ –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —Å –ª–æ–≥–∏–∫–æ–π")
        
    def _sync_children_positions(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ–∑–∏—Ü–∏–∏ –¥–µ—Ç–µ–π –∏–∑ –ª–æ–≥–∏–∫–∏."""
        for i, child_data in enumerate(self.tree_logic.children):
            if i < len(self.child_spores):
                child_spore = self.child_spores[i]
                # –ß–∏—Ç–∞–µ–º –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é –∏–∑ –ª–æ–≥–∏–∫–∏
                new_pos = child_data['position']
                child_spore.real_position = np.array([new_pos[0], 0.0, new_pos[1]])
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–µ–ª–∫—É
                if i < len(self.child_links):
                    self.child_links[i].update_geometry()
                    
    def _sync_grandchildren_positions(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ–∑–∏—Ü–∏–∏ –≤–Ω—É–∫–æ–≤ –∏–∑ –ª–æ–≥–∏–∫–∏."""
        for i, gc_data in enumerate(self.tree_logic.grandchildren):
            if i < len(self.grandchild_spores):
                grandchild_spore = self.grandchild_spores[i]
                # –ß–∏—Ç–∞–µ–º –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é –∏–∑ –ª–æ–≥–∏–∫–∏  
                new_pos = gc_data['position']
                grandchild_spore.real_position = np.array([new_pos[0], 0.0, new_pos[1]])
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–µ–ª–∫—É
                if i < len(self.grandchild_links):
                    self.grandchild_links[i].update_geometry()
                    
    def destroy_visual(self) -> None:
        """–£–Ω–∏—á—Ç–æ–∂–∞–µ—Ç –≤—Å–µ –≤–∏–∑—É–∞–ª—å–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã."""
        # –£–Ω–∏—á—Ç–æ–∂–∞–µ–º —Å—Ç—Ä–µ–ª–∫–∏ –≤–Ω—É–∫–æ–≤
        for link in self.grandchild_links:
            try:
                destroy(link)
            except:
                pass
        self.grandchild_links.clear()
        
        # –£–Ω–∏—á—Ç–æ–∂–∞–µ–º –≤–Ω—É–∫–æ–≤
        for spore in self.grandchild_spores:
            try:
                destroy(spore)
            except:
                pass
        self.grandchild_spores.clear()
        
        # –£–Ω–∏—á—Ç–æ–∂–∞–µ–º —Å—Ç—Ä–µ–ª–∫–∏ –¥–µ—Ç–µ–π
        for link in self.child_links:
            try:
                destroy(link)
            except:
                pass
        self.child_links.clear()
        
        # –£–Ω–∏—á—Ç–æ–∂–∞–µ–º –¥–µ—Ç–µ–π
        for spore in self.child_spores:
            try:
                destroy(spore)
            except:
                pass
        self.child_spores.clear()
        
        # –£–Ω–∏—á—Ç–æ–∂–∞–µ–º –∫–æ—Ä–µ–Ω—å
        if self.root_spore:
            try:
                destroy(self.root_spore)
            except:
                pass
            self.root_spore = None
            
        self.visual_created = False
        print("üóëÔ∏è –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∞")
        
    def get_visual_info(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏."""
        return {
            'created': self.visual_created,
            'has_logic': self.tree_logic is not None,
            'spore_count': {
                'root': 1 if self.root_spore else 0,
                'children': len(self.child_spores),
                'grandchildren': len(self.grandchild_spores)
            },
            'link_count': {
                'child_links': len(self.child_links),
                'grandchild_links': len(self.grandchild_links)
            }
        }
        
    def _get_next_spore_id(self) -> int:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è —Å–ø–æ—Ä—ã."""
        if self.id_manager:
            return self.id_manager.get_next_spore_id()
        else:
            # Fallback –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            print("‚ö†Ô∏è WARNING: SporeTreeVisual —Å–æ–∑–¥–∞–Ω –±–µ–∑ ID manager!")
            return 0
        
    def _get_next_link_id(self) -> int:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è —Å—Ç—Ä–µ–ª–∫–∏."""
        if self.id_manager:
            return self.id_manager.get_next_link_id()
        else:
            # Fallback –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            print("‚ö†Ô∏è WARNING: SporeTreeVisual —Å–æ–∑–¥–∞–Ω –±–µ–∑ ID manager!")
            return 0

    def __del__(self):
        """–î–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä - –æ—á–∏—â–∞–µ—Ç —Ä–µ—Å—É—Ä—Å—ã."""
        if hasattr(self, 'visual_created') and self.visual_created:
            self.destroy_visual()