"""
Valence System - –°–∏—Å—Ç–µ–º–∞ –≤–∞–ª–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–≤—è–∑–µ–π —Å–ø–æ—Ä
==================================================================

–ú–æ–¥—É–ª—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–∞–Ω—è—Ç—ã—Ö –∏ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –≤–∞–ª–µ–Ω—Ç–Ω—ã—Ö –º–µ—Å—Ç –∫–∞–∂–¥–æ–π —Å–ø–æ—Ä—ã.
–ö–∞–∂–¥–∞—è —Å–ø–æ—Ä–∞ –∏–º–µ–µ—Ç 12 –≤–∞–ª–µ–Ω—Ç–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤:
- 4 —Å–ª–æ—Ç–∞ –¥–ª—è –¥–µ—Ç–µ–π (—Å–æ—Å–µ–¥–∏ 1-–≥–æ –ø–æ—Ä—è–¥–∫–∞)
- 8 —Å–ª–æ—Ç–æ–≤ –¥–ª—è –≤–Ω—É–∫–æ–≤ (—Å–æ—Å–µ–¥–∏ 2-–≥–æ –ø–æ—Ä—è–¥–∫–∞, —Ç–æ–ª—å–∫–æ —Å —á–µ—Ä–µ–¥–æ–≤–∞–Ω–∏–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è)

–í–ê–ñ–ù–û: –î–ª—è –≤–Ω—É–∫–æ–≤ —É—á–∏—Ç—ã–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—É—Ç–∏ –≥–¥–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ß–ï–†–ï–î–£–ï–¢–°–Ø.
–ü—É—Ç–∏ —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º (max‚Üímax, min‚Üímin) –Ω–µ —è–≤–ª—è—é—Ç—Å—è –≤–∞–ª–µ–Ω—Ç–Ω—ã–º–∏ —Å–ª–æ—Ç–∞–º–∏.

–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–ª–æ—Ç–æ–≤ –¥–µ—Ç–µ–π (4 —Å–ª–æ—Ç–∞):
- forward_max: –ø—Ä—è–º–æ–µ –≤—Ä–µ–º—è, –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
- forward_min: –ø—Ä—è–º–æ–µ –≤—Ä–µ–º—è, –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
- backward_max: –æ–±—Ä–∞—Ç–Ω–æ–µ –≤—Ä–µ–º—è, –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
- backward_min: –æ–±—Ä–∞—Ç–Ω–æ–µ –≤—Ä–µ–º—è, –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ

–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–ª–æ—Ç–æ–≤ –≤–Ω—É–∫–æ–≤ (8 —Å–ª–æ—Ç–æ–≤, —Ç–æ–ª—å–∫–æ —Å –∏–Ω–≤–µ—Ä—Å–∏–µ–π —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è):
- forward_max_forward_min: 1–π —à–∞–≥ (forward, max), 2–π —à–∞–≥ (forward, min) ‚úì
- forward_max_backward_min: 1–π —à–∞–≥ (forward, max), 2–π —à–∞–≥ (backward, min) ‚úì
- forward_min_forward_max: 1–π —à–∞–≥ (forward, min), 2–π —à–∞–≥ (forward, max) ‚úì
- forward_min_backward_max: 1–π —à–∞–≥ (forward, min), 2–π —à–∞–≥ (backward, max) ‚úì
- backward_max_forward_min: 1–π —à–∞–≥ (backward, max), 2–π —à–∞–≥ (forward, min) ‚úì
- backward_max_backward_min: 1–π —à–∞–≥ (backward, max), 2–π —à–∞–≥ (backward, min) ‚úì
- backward_min_forward_max: 1–π —à–∞–≥ (backward, min), 2–π —à–∞–≥ (forward, max) ‚úì
- backward_min_backward_max: 1–π —à–∞–≥ (backward, min), 2–π —à–∞–≥ (backward, max) ‚úì

–ò—Å–∫–ª—é—á–µ–Ω—ã (–Ω–µ—Ç —á–µ—Ä–µ–¥–æ–≤–∞–Ω–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è):
- forward_max ‚Üí forward_max (max‚Üímax) ‚ùå
- forward_min ‚Üí forward_min (min‚Üímin) ‚ùå
- backward_max ‚Üí backward_max (max‚Üímax) ‚ùå
- backward_min ‚Üí backward_min (min‚Üímin) ‚ùå
"""

from dataclasses import dataclass, field
from typing import Optional, List, Dict
import numpy as np


@dataclass
class ValenceSlot:
    """
    –û–¥–Ω–æ –≤–∞–ª–µ–Ω—Ç–Ω–æ–µ –º–µ—Å—Ç–æ —Å–ø–æ—Ä—ã.

    –ü—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ—Å—Ç–∞ –¥–µ—Ä–µ–≤–∞ –æ—Ç —Å–ø–æ—Ä—ã:
    - –î–ª—è –¥–µ—Ç–µ–π: –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –≤—Ä–µ–º–µ–Ω–µ–º (forward/backward) –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º (max/min)
    - –î–ª—è –≤–Ω—É–∫–æ–≤: –¥–≤–∞ —à–∞–≥–∞, –≤—Ç–æ—Ä–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ - –∏–Ω–≤–µ—Ä—Å–∏—è –ø–µ—Ä–≤–æ–≥–æ

    Attributes:
        slot_type: –¢–∏–ø —Å–ª–æ—Ç–∞ ('child' –∏–ª–∏ 'grandchild')
        time_direction: –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–µ—Ä–≤–æ–≥–æ —à–∞–≥–∞ ('forward' –∏–ª–∏ 'backward')
        control_type: –¢–∏–ø —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ —à–∞–≥–∞ ('max' –∏–ª–∏ 'min')
        second_time_direction: –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤—Ç–æ—Ä–æ–≥–æ —à–∞–≥–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –≤–Ω—É–∫–æ–≤)
        dt_value: –ó–Ω–∞—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–µ—Ä–µ—Ö–æ–¥–∞ (–µ—Å–ª–∏ —Å–ª–æ—Ç –∑–∞–Ω—è—Ç)
        occupied: –ó–∞–Ω—è—Ç –ª–∏ —Å–ª–æ—Ç
        neighbor_id: ID —Å–æ—Å–µ–¥–Ω–µ–π —Å–ø–æ—Ä—ã (–µ—Å–ª–∏ —Å–ª–æ—Ç –∑–∞–Ω—è—Ç)
        is_fixed: –ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω –ª–∏ dt –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–∞
    """
    slot_type: str  # 'child' –∏–ª–∏ 'grandchild'

    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–µ—Ä–≤–æ–≥–æ —à–∞–≥–∞ (–¥–ª—è –¥–µ—Ç–µ–π –∏ –≤–Ω—É–∫–æ–≤)
    time_direction: str  # 'forward' –∏–ª–∏ 'backward'
    control_type: str  # 'max' –∏–ª–∏ 'min'

    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≤—Ç–æ—Ä–æ–≥–æ —à–∞–≥–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –≤–Ω—É–∫–æ–≤)
    second_time_direction: Optional[str] = None  # 'forward' –∏–ª–∏ 'backward'

    # –î–∞–Ω–Ω—ã–µ –æ –∑–∞–Ω—è—Ç–æ—Å—Ç–∏
    dt_value: Optional[float] = None  # –°—É–º–º–∞—Ä–Ω–æ–µ –≤—Ä–µ–º—è –ø–µ—Ä–µ—Ö–æ–¥–∞
    dt_sequence: Optional[List[float]] = None  # –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å dt –ø–æ —à–∞–≥–∞–º
    occupied: bool = False  # –ó–∞–Ω—è—Ç –ª–∏ —Å–ª–æ—Ç
    neighbor_id: Optional[int] = None  # ID —Å–æ—Å–µ–¥–∞

    # –î–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–æ–º
    is_fixed: bool = False  # –ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω –ª–∏ dt

    def get_second_control_type(self) -> Optional[str]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–∏–ø —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Ç–æ—Ä–æ–≥–æ —à–∞–≥–∞ (–∏–Ω–≤–µ—Ä—Å–∏—è –ø–µ—Ä–≤–æ–≥–æ).
        –¢–æ–ª—å–∫–æ –¥–ª—è –≤–Ω—É–∫–æ–≤.
        """
        if self.slot_type != 'grandchild':
            return None
        return 'min' if self.control_type == 'max' else 'max'

    def get_slot_name(self) -> str:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–µ –∏–º—è —Å–ª–æ—Ç–∞.

        –ü—Ä–∏–º–µ—Ä—ã:
        - –î–ª—è –¥–µ—Ç–µ–π: 'forward_max', 'backward_min'
        - –î–ª—è –≤–Ω—É–∫–æ–≤: 'forward_max_backward_min', 'backward_min_forward_max'
        """
        if self.slot_type == 'child':
            return f"{self.time_direction}_{self.control_type}"
        else:  # grandchild
            # –í—Ç–æ—Ä–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ–≥–¥–∞ –∏–Ω–≤–µ—Ä—Å–∏—è –ø–µ—Ä–≤–æ–≥–æ
            second_control = self.get_second_control_type()
            return (f"{self.time_direction}_{self.control_type}_"
                   f"{self.second_time_direction}_{second_control}")

    def __repr__(self) -> str:
        """–ö—Ä–∞—Å–∏–≤–æ–µ —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ—Ç–∞"""
        status = "üîí" if self.occupied else "üîì"
        if self.dt_sequence:
            formatted = ", ".join(f"{dt:+.6f}" for dt in self.dt_sequence)
            dt_str = f"dt=[{formatted}]"
        elif self.dt_value is not None:
            dt_str = f"dt={self.dt_value:+.6f}"
        else:
            dt_str = "dt=None"
        neighbor_str = f"‚Üí{self.neighbor_id}" if self.neighbor_id is not None else ""
        fixed_str = "üîß" if self.is_fixed else ""
        return f"{status}{fixed_str} {self.get_slot_name()}: {dt_str} {neighbor_str}"


@dataclass
class SporeValence:
    """
    –ü–æ–ª–Ω–∞—è –≤–∞–ª–µ–Ω—Ç–Ω–æ—Å—Ç—å –æ–¥–Ω–æ–π —Å–ø–æ—Ä—ã.

    –•—Ä–∞–Ω–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å–µ—Ö –≤–∞–ª–µ–Ω—Ç–Ω—ã—Ö —Å–ª–æ—Ç–∞—Ö (4 –¥–µ—Ç–µ–π + 8 –≤–Ω—É–∫–æ–≤),
    –∏—Ö –∑–∞–Ω—è—Ç–æ—Å—Ç–∏ –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö —Å–≤—è–∑–µ–π.

    –í–ê–ñ–ù–û: –î–ª—è –≤–Ω—É–∫–æ–≤ —É—á–∏—Ç—ã–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Å–ª–æ—Ç—ã —Å —á–µ—Ä–µ–¥–æ–≤–∞–Ω–∏–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è,
    –ø—É—Ç–∏ —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º (max‚Üímax, min‚Üímin) –Ω–µ —è–≤–ª—è—é—Ç—Å—è –≤–∞–ª–µ–Ω—Ç–Ω—ã–º–∏.

    Attributes:
        spore_id: ID —Å–ø–æ—Ä—ã
        total_slots: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ—Ç–æ–≤ (4 –¥–µ—Ç–µ–π + 8 –≤–Ω—É–∫–æ–≤)
        children_slots: –°–ø–∏—Å–æ–∫ –∏–∑ 4 —Å–ª–æ—Ç–æ–≤ –¥–ª—è –¥–µ—Ç–µ–π
        grandchildren_slots: –°–ø–∏—Å–æ–∫ –∏–∑ 8 —Å–ª–æ—Ç–æ–≤ –¥–ª—è –≤–Ω—É–∫–æ–≤ (—Ç–æ–ª—å–∫–æ —Å —á–µ—Ä–µ–¥–æ–≤–∞–Ω–∏–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è)
    """
    spore_id: int
    total_slots: int = 12  # 4 –¥–µ—Ç–µ–π + 8 –≤–Ω—É–∫–æ–≤ (—Ç–æ–ª—å–∫–æ —Å —á–µ—Ä–µ–¥–æ–≤–∞–Ω–∏–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è)

    # –°–ª–æ—Ç—ã –¥–µ—Ç–µ–π (4 —à—Ç—É–∫–∏)
    children_slots: List[ValenceSlot] = field(default_factory=list)

    # –°–ª–æ—Ç—ã –≤–Ω—É–∫–æ–≤ (8 —à—Ç—É–∫)
    grandchildren_slots: List[ValenceSlot] = field(default_factory=list)

    def __post_init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—É—Å—Ç—ã–µ —Å–ª–æ—Ç—ã –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –±—ã–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã"""
        if not self.children_slots:
            self.children_slots = self._create_children_slots()
        if not self.grandchildren_slots:
            self.grandchildren_slots = self._create_grandchildren_slots()
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ—Ç–æ–≤ —Å–æ–≥–ª–∞—Å–Ω–æ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–º—É —á–∏—Å–ª—É
        self.total_slots = len(self.children_slots) + len(self.grandchildren_slots)


    def _create_children_slots(self) -> List[ValenceSlot]:
        """–°–æ–∑–¥–∞–µ—Ç 4 –ø—É—Å—Ç—ã—Ö —Å–ª–æ—Ç–∞ –¥–ª—è –¥–µ—Ç–µ–π"""
        return [
            ValenceSlot('child', 'forward', 'max'),
            ValenceSlot('child', 'forward', 'min'),
            ValenceSlot('child', 'backward', 'max'),
            ValenceSlot('child', 'backward', 'min'),
        ]

    def _create_grandchildren_slots(self) -> List[ValenceSlot]:
        """–°–æ–∑–¥–∞–µ—Ç –ø—É—Å—Ç—ã–µ —Å–ª–æ—Ç—ã –¥–ª—è –≤–Ω—É–∫–æ–≤ —Å —á–µ—Ä–µ–¥–æ–≤–∞–Ω–∏–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        # –¢–æ–ª—å–∫–æ –ø—É—Ç–∏ —Å —á–µ—Ä–µ–¥–æ–≤–∞–Ω–∏–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è (max‚Üímin –∏–ª–∏ min‚Üímax)
        slots: List[ValenceSlot] = []

        combinations = [
            ('forward', 'max', 'forward'),
            ('forward', 'max', 'backward'),
            ('forward', 'min', 'forward'),
            ('forward', 'min', 'backward'),
            ('backward', 'max', 'forward'),
            ('backward', 'max', 'backward'),
            ('backward', 'min', 'forward'),
            ('backward', 'min', 'backward'),
        ]

        for time_direction, control_type, second_time_direction in combinations:
            slots.append(ValenceSlot(
                slot_type='grandchild',
                time_direction=time_direction,
                control_type=control_type,
                second_time_direction=second_time_direction
            ))

        return slots

    def get_free_slots(self) -> List[ValenceSlot]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤"""
        return [slot for slot in self.children_slots + self.grandchildren_slots
                if not slot.occupied]

    def get_occupied_slots(self) -> List[ValenceSlot]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–Ω—è—Ç—ã—Ö —Å–ª–æ—Ç–æ–≤"""
        return [slot for slot in self.children_slots + self.grandchildren_slots
                if slot.occupied]

    def get_fixed_dt_values(self) -> Dict[str, float]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö dt –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä.

        –ö–ª—é—á - –∏–º—è —Å–ª–æ—Ç–∞, –∑–Ω–∞—á–µ–Ω–∏–µ - dt.
        –≠—Ç–æ dt –∫–æ—Ç–æ—Ä—ã–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä –ù–ï –¥–æ–ª–∂–µ–Ω —Ç—Ä–æ–≥–∞—Ç—å.

        Returns:
            –°–ª–æ–≤–∞—Ä—å {–∏–º—è_—Å–ª–æ—Ç–∞: dt_value}
        """
        fixed_dt = {}
        for slot in self.get_occupied_slots():
            if slot.is_fixed and slot.dt_value is not None:
                fixed_dt[slot.get_slot_name()] = slot.dt_value
        return fixed_dt

    def get_free_slot_names(self) -> List[str]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–º–µ–Ω–∞ —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏.

        –≠—Ç–∏ —Å–ª–æ—Ç—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä –î–û–õ–ñ–ï–ù –∑–∞–ø–æ–ª–Ω–∏—Ç—å.

        Returns:
            –°–ø–∏—Å–æ–∫ –∏–º–µ–Ω —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤
        """
        return [slot.get_slot_name() for slot in self.get_free_slots()]

    def count_free_children(self) -> int:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –¥–µ—Ç–µ–π"""
        return sum(1 for slot in self.children_slots if not slot.occupied)

    def count_free_grandchildren(self) -> int:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –≤–Ω—É–∫–æ–≤"""
        return sum(1 for slot in self.grandchildren_slots if not slot.occupied)

    def count_occupied_children(self) -> int:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–Ω—è—Ç—ã—Ö —Å–ª–æ—Ç–æ–≤ –¥–µ—Ç–µ–π"""
        return sum(1 for slot in self.children_slots if slot.occupied)

    def count_occupied_grandchildren(self) -> int:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–Ω—è—Ç—ã—Ö —Å–ª–æ—Ç–æ–≤ –≤–Ω—É–∫–æ–≤"""
        return sum(1 for slot in self.grandchildren_slots if slot.occupied)

    def find_slot_by_name(self, slot_name: str) -> Optional[ValenceSlot]:
        """
        –ù–∞—Ö–æ–¥–∏—Ç —Å–ª–æ—Ç –ø–æ –µ–≥–æ –∏–º–µ–Ω–∏.

        Args:
            slot_name: –ò–º—è —Å–ª–æ—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'forward_max' –∏–ª–∏ 'forward_max_backward_min')

        Returns:
            –ù–∞–π–¥–µ–Ω–Ω—ã–π —Å–ª–æ—Ç –∏–ª–∏ None
        """
        for slot in self.children_slots + self.grandchildren_slots:
            if slot.get_slot_name() == slot_name:
                return slot
        return None

    def find_slot_by_parameters(self,
                                slot_type: str,
                                time_direction: str,
                                control_type: str,
                                second_time_direction: Optional[str] = None) -> Optional[ValenceSlot]:
        """
        –ù–∞—Ö–æ–¥–∏—Ç —Å–ª–æ—Ç –ø–æ –µ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º.

        Args:
            slot_type: 'child' –∏–ª–∏ 'grandchild'
            time_direction: 'forward' –∏–ª–∏ 'backward'
            control_type: 'max' –∏–ª–∏ 'min'
            second_time_direction: 'forward' –∏–ª–∏ 'backward' (—Ç–æ–ª—å–∫–æ –¥–ª—è –≤–Ω—É–∫–æ–≤)

        Returns:
            –ù–∞–π–¥–µ–Ω–Ω—ã–π —Å–ª–æ—Ç –∏–ª–∏ None
        """
        slots = self.children_slots if slot_type == 'child' else self.grandchildren_slots

        for slot in slots:
            if (slot.time_direction == time_direction and
                slot.control_type == control_type):

                # –î–ª—è –¥–µ—Ç–µ–π —ç—Ç–æ–≥–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ
                if slot_type == 'child':
                    return slot

                # –î–ª—è –≤–Ω—É–∫–æ–≤ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ç–æ—Ä–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
                if slot.second_time_direction == second_time_direction:
                    return slot

        return None

    def print_summary(self, spore_visual_id: Optional[str] = None, id_mapper = None) -> None:
        """
        –í—ã–≤–æ–¥–∏—Ç –∫—Ä–∞—Å–∏–≤—ã–π –æ—Ç—á–µ—Ç –æ –≤–∞–ª–µ–Ω—Ç–Ω–æ—Å—Ç–∏ —Å–ø–æ—Ä—ã.

        Args:
            spore_visual_id: –í–∏–∑—É–∞–ª—å–Ω—ã–π ID —Å–ø–æ—Ä—ã (–∫–∞–∫ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ)
            id_mapper: –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö ID –≤ –≤–∏–∑—É–∞–ª—å–Ω—ã–µ (–ø—Ä–∏–Ω–∏–º–∞–µ—Ç str, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç str)
        """
        display_id = spore_visual_id if spore_visual_id else self.spore_id

        print(f"\nüìä –í–ê–õ–ï–ù–¢–ù–û–°–¢–¨ –°–ü–û–†–´ {display_id}:")
        print(f"   –í—Å–µ–≥–æ —Å–ª–æ—Ç–æ–≤: {self.total_slots}")
        print(f"   –ó–∞–Ω—è—Ç–æ: {len(self.get_occupied_slots())}")
        print(f"   –°–≤–æ–±–æ–¥–Ω–æ: {len(self.get_free_slots())}")

        print(f"\n   üë∂ –î–ï–¢–ò ({len(self.children_slots)} —Å–ª–æ—Ç–æ–≤, "
              f"–∑–∞–Ω—è—Ç–æ {self.count_occupied_children()}, "
              f"—Å–≤–æ–±–æ–¥–Ω–æ {self.count_free_children()}):")
        for slot in self.children_slots:
            self._print_slot(slot, id_mapper)

        print(f"\n   üë∂üë∂ –í–ù–£–ö–ò ({len(self.grandchildren_slots)} —Å–ª–æ—Ç–æ–≤, "
              f"–∑–∞–Ω—è—Ç–æ {self.count_occupied_grandchildren()}, "
              f"—Å–≤–æ–±–æ–¥–Ω–æ {self.count_free_grandchildren()}) "
              f"[—Ç–æ–ª—å–∫–æ —Å —á–µ—Ä–µ–¥–æ–≤–∞–Ω–∏–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è]:")
        for slot in self.grandchildren_slots:
            self._print_slot(slot, id_mapper)

    def _print_slot(self, slot: ValenceSlot, id_mapper = None) -> None:
        """
        –í—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ª–æ—Ç–µ —Å –≤–∏–∑—É–∞–ª—å–Ω—ã–º–∏ ID.

        Args:
            slot: –°–ª–æ—Ç –¥–ª—è –≤—ã–≤–æ–¥–∞
            id_mapper: –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ ID
        """
        status = "üîí" if slot.occupied else "üîì"
        dt_str = f"dt={slot.dt_value:+.6f}" if slot.dt_value is not None else "dt=None"

        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º neighbor_id –≤ –≤–∏–∑—É–∞–ª—å–Ω—ã–π –µ—Å–ª–∏ –µ—Å—Ç—å mapper
        if slot.neighbor_id is not None:
            if id_mapper and callable(id_mapper):
                visual_neighbor_id = id_mapper(slot.neighbor_id)
                neighbor_str = f"‚Üí{visual_neighbor_id}"
            else:
                neighbor_str = f"‚Üí{slot.neighbor_id}"
        else:
            neighbor_str = ""

        fixed_str = "üîß" if slot.is_fixed else ""
        print(f"      {status}{fixed_str} {slot.get_slot_name()}: {dt_str} {neighbor_str}")

    def print_optimizer_data(self) -> None:
        """–í—ã–≤–æ–¥–∏—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä"""
        print("\nüîß –î–ê–ù–ù–´–ï –î–õ–Ø –û–ü–¢–ò–ú–ò–ó–ê–¢–û–†–ê:")

        fixed_dt = self.get_fixed_dt_values()
        free_slots = self.get_free_slot_names()

        print(f"   üîí –ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ dt ({len(fixed_dt)}):")
        if fixed_dt:
            for slot_name, dt in fixed_dt.items():
                print(f"      {slot_name}: {dt:+.6f}")
        else:
            print(f"      (–Ω–µ—Ç –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö)")

        print(f"\n   üîì –°–ª–æ—Ç—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ ({len(free_slots)}):")
        if free_slots:
            for slot_name in free_slots:
                print(f"      {slot_name}")
        else:
            print(f"      (–Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤)")