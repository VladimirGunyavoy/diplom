import numpy as np
from typing import List, Dict, Any, Optional

# –ò–º–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ç–æ–º –∂–µ –ø–∞–∫–µ—Ç–µ –∏–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ø—É—Ç—å)
from .spore_tree_config import SporeTreeConfig
from ..pendulum import PendulumSystem

class SporeTree:
    """
    –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–µ—Ä–µ–≤–æ–º —Å–ø–æ—Ä –º–∞—è—Ç–Ω–∏–∫–∞.
    """
    
    
    def __init__(self, pendulum: PendulumSystem, config: SporeTreeConfig, 
                 dt_children: Optional[np.ndarray] = None, 
                 dt_grandchildren: Optional[np.ndarray] = None,
                 auto_create: bool = False,
                 show: bool = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–µ—Ä–µ–≤–∞ —Å–ø–æ—Ä.
        
        Args:
            pendulum: –æ–±—ä–µ–∫—Ç –º–∞—è—Ç–Ω–∏–∫–∞ (PendulumSystem)
            config: –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è SporeTreeConfig
            dt_children: np.array –∏–∑ 4 —ç–ª–µ–º–µ–Ω—Ç–æ–≤ - dt –¥–ª—è –¥–µ—Ç–µ–π (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            dt_grandchildren: np.array –∏–∑ 8 —ç–ª–µ–º–µ–Ω—Ç–æ–≤ - dt –¥–ª—è –≤–Ω—É–∫–æ–≤ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            auto_create: bool - —Å–æ–∑–¥–∞—Ç—å –¥–µ—Ä–µ–≤–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ config.dt_base –∏ config.dt_grandchildren_factor
            show: –≤–∫–ª—é—á–∞—Ç—å –ª–∏ –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é. –ï—Å–ª–∏ None, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç config.show_debug
        """
        if show is None:
            show = config.show_debug
            
        self.pendulum = pendulum
        self.config = config
        
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥
        self.config.validate()
        
        # –ö–æ—Ä–Ω–µ–≤–∞—è —Å–ø–æ—Ä–∞
        self.root = {
            'position': self.config.initial_position.copy(),
            'id': 'root',
            'color': 'red',
            'size': self.config.root_size
        }
        
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –¥–ª—è –ø–æ—Ç–æ–º–∫–æ–≤
        self.children = []
        self.grandchildren = []
        self.sorted_grandchildren = []
        self.pairing_candidate_map: Dict[int, List[int]] = {}
        
        # –§–ª–∞–≥–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        self._children_created = False
        self._grandchildren_created = False
        self._grandchildren_sorted = False
        self._grandchildren_modified = False
        
        # –ö—ç—à –¥–ª—è —Å—Ä–µ–¥–Ω–∏—Ö —Ç–æ—á–µ–∫
        self.mean_points = None
        
        if show:
            print(f"üå± SporeTree —Å–æ–∑–¥–∞–Ω —Å –ø–æ–∑–∏—Ü–∏–µ–π {self.config.initial_position}")
        
        # –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –°–û–ó–î–ê–ù–ò–ï –î–ï–†–ï–í–ê
        if dt_children is not None and dt_grandchildren is not None:
            # –°—Ü–µ–Ω–∞—Ä–∏–π 1: –ó–∞–¥–∞–Ω—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ dt –º–∞—Å—Å–∏–≤—ã
            if show:
                print(f"üìä –°–æ–∑–¥–∞–µ–º –¥–µ—Ä–µ–≤–æ —Å –∑–∞–¥–∞–Ω–Ω—ã–º–∏ dt:")
                print(f"   dt_children: {dt_children}")
                print(f"   dt_grandchildren: {dt_grandchildren}")
            
            self._create_tree_from_dt_arrays(dt_children, dt_grandchildren, show)
            
        elif auto_create:
            # –°—Ü–µ–Ω–∞—Ä–∏–π 2: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ –±–∞–∑–æ–≤—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º config
            if show:
                print(f"ü§ñ –°–æ–∑–¥–∞–µ–º –¥–µ—Ä–µ–≤–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏:")
                print(f"   dt_base: {self.config.dt_base}")
                print(f"   dt_grandchildren_factor: {self.config.dt_grandchildren_factor}")
            
            self._create_tree_auto(show)
            
        elif show:
            print("‚ö†Ô∏è –î–µ—Ä–µ–≤–æ —Å–æ–∑–¥–∞–Ω–æ –ø—É—Å—Ç—ã–º. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ create_children() –∏ create_grandchildren()")
    
    def _create_tree_from_dt_arrays(self, dt_children: np.ndarray, dt_grandchildren: np.ndarray, show: bool):
        """–°–æ–∑–¥–∞–µ—Ç –¥–µ—Ä–µ–≤–æ –∏–∑ –∑–∞–¥–∞–Ω–Ω—ã—Ö dt –º–∞—Å—Å–∏–≤–æ–≤."""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä—ã
        assert len(dt_children) == 4, f"dt_children –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 4 —ç–ª–µ–º–µ–Ω—Ç–∞, –ø–æ–ª—É—á–µ–Ω–æ {len(dt_children)}"
        assert len(dt_grandchildren) == 8, f"dt_grandchildren –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 8 —ç–ª–µ–º–µ–Ω—Ç–æ–≤, –ø–æ–ª—É—á–µ–Ω–æ {len(dt_grandchildren)}"
        
        # –°–æ–∑–¥–∞–µ–º –¥–µ—Ç–µ–π
        self.create_children(dt_children=dt_children, show=show)
        
        # –°–æ–∑–¥–∞–µ–º –≤–Ω—É–∫–æ–≤
        self.create_grandchildren(dt_grandchildren=dt_grandchildren, show=show)
        
        if show:
            print(f"‚úÖ –î–µ—Ä–µ–≤–æ —Å–æ–∑–¥–∞–Ω–æ: {len(self.children)} –¥–µ—Ç–µ–π + {len(self.grandchildren)} –≤–Ω—É–∫–æ–≤")
    
    def _create_tree_auto(self, show: bool):
        """–°–æ–∑–¥–∞–µ—Ç –¥–µ—Ä–µ–≤–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ –±–∞–∑–æ–≤—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º config."""
        # –í—Å–µ –¥–µ—Ç–∏ —Å –±–∞–∑–æ–≤—ã–º dt
        dt_children = np.ones(4) * self.config.dt_base
        
        # –í—Å–µ –≤–Ω—É–∫–∏ —Å —É–º–µ–Ω—å—à–µ–Ω–Ω—ã–º dt
        dt_grandchildren = np.ones(8) * self.config.dt_base * self.config.dt_grandchildren_factor
        
        # –°–æ–∑–¥–∞–µ–º –¥–µ—Ç–µ–π
        self.create_children(dt_children=dt_children, show=show)
        
        # –°–æ–∑–¥–∞–µ–º –≤–Ω—É–∫–æ–≤  
        self.create_grandchildren(dt_grandchildren=dt_grandchildren, show=show)
        
        if show:
            print(f"‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –¥–µ—Ä–µ–≤–æ —Å–æ–∑–¥–∞–Ω–æ: {len(self.children)} –¥–µ—Ç–µ–π + {len(self.grandchildren)} –≤–Ω—É–∫–æ–≤")



    def create_children(self, dt_children: Optional[np.ndarray] = None, show: bool = None) -> List[Dict[str, Any]]:
        """
        –°–æ–∑–¥–∞–µ—Ç 4 –¥–µ—Ç–µ–π —Å —Ä–∞–∑–Ω—ã–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏.
        
        Args:
            dt_children: –º–∞—Å—Å–∏–≤ –∏–∑ 4 –∑–Ω–∞—á–µ–Ω–∏–π dt –¥–ª—è –¥–µ—Ç–µ–π.
                        –ï—Å–ª–∏ None, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç config.dt_base –¥–ª—è –≤—Å–µ—Ö.
            show: –≤–∫–ª—é—á–∞—Ç—å –ª–∏ –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é. –ï—Å–ª–∏ None, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç config.show_debug
        
        Returns:
            List –¥–µ—Ç–µ–π
        """
        if show is None:
            show = self.config.show_debug
            
        if self._children_created:
            if show:
                print("‚ö†Ô∏è –î–µ—Ç–∏ —É–∂–µ —Å–æ–∑–¥–∞–Ω—ã, –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º...")
        
        # –ü–æ–ª—É—á–∞–µ–º –≥—Ä–∞–Ω–∏—Ü—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        u_min, u_max = self.pendulum.get_control_bounds()
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º dt –¥–ª—è –¥–µ—Ç–µ–π
        if dt_children is None:
            dt_children = np.ones(4) * self.config.dt_base
        else:
            assert len(dt_children) == 4, "dt_children –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ä–æ–≤–Ω–æ 4 —ç–ª–µ–º–µ–Ω—Ç–∞"
        
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è: [forw_max, back_max, forw_min, back_min]
        controls = [u_max, u_max, u_min, u_min]
        dt_signs = [1, -1, 1, -1]  # forw: +dt, back: -dt
        colors = ['#FF6B6B', '#9B59B6', '#1ABC9C', '#F39C12']  # –ö–æ—Ä–∞–ª–ª–æ–≤—ã–π, —Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π, –±–∏—Ä—é–∑–æ–≤—ã–π, –æ—Ä–∞–Ω–∂–µ–≤—ã–π
        names = ['forw_max', 'back_max', 'forw_min', 'back_min']
        
        self.children = []
        
        for i in range(4):
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –∑–Ω–∞–∫ –∫ dt –¥–ª—è —á–µ—Ä–µ–¥–æ–≤–∞–Ω–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
            signed_dt = dt_children[i] * dt_signs[i]  # –ü–†–ê–í–ò–õ–¨–ù–û: –ø—Ä–∏–º–µ–Ω—è–µ–º –∑–Ω–∞–∫–∏!
            
            # –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é —á–µ—Ä–µ–∑ step
            new_position = self.pendulum.step(
                state=self.root['position'],
                control=controls[i],
                dt=signed_dt
            )
            
            child = {
                'position': new_position,
                'id': f'child_{i}',
                'name': f'{names[i]}',
                'parent_idx': None,  # –∫–æ—Ä–µ–Ω—å –Ω–µ –∏–º–µ–µ—Ç –∏–Ω–¥–µ–∫—Å–∞
                'control': controls[i],
                'dt': signed_dt,  # —Ö—Ä–∞–Ω–∏–º –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–π dt (+ –¥–ª—è forw, - –¥–ª—è back)
                'color': colors[i],  # –£–ù–ò–ö–ê–õ–¨–ù–´–ô —Ü–≤–µ—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–µ–±–µ–Ω–∫–∞
                'size': self.config.child_size,
                'child_idx': i
            }
            
            self.children.append(child)
        
        self._children_created = True
        
        if show:
            print(f"üë∂ –°–æ–∑–¥–∞–Ω–æ {len(self.children)} –¥–µ—Ç–µ–π:")
            for i, child in enumerate(self.children):
                print(f"  {i}: {child['name']} —Å dt={child['dt']:.4f}, —Ü–≤–µ—Ç={child['color']}")
        
        return self.children
    
    def create_grandchildren(self, dt_grandchildren: Optional[np.ndarray] = None, show: bool = None) -> List[Dict[str, Any]]:
        """
        –°–æ–∑–¥–∞–µ—Ç 8 –≤–Ω—É–∫–æ–≤ (–ø–æ 2 –æ—Ç –∫–∞–∂–¥–æ–≥–æ —Ä–æ–¥–∏—Ç–µ–ª—è) —Å –û–ë–†–ê–¢–ù–´–ú —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º.
        
        –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê:
        - –í–Ω—É–∫ –±–µ—Ä–µ—Ç –û–ë–†–ê–¢–ù–û–ï —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–¥–∏—Ç–µ–ª—è (parent_control ‚Üí -parent_control)
        - –û–¥–∏–Ω –≤–Ω—É–∫ —ç–≤–æ–ª—é—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç –í–ü–ï–†–ï–î (+dt), –¥—Ä—É–≥–æ–π –ù–ê–ó–ê–î (-dt)
        - dt –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ, –Ω–æ –≤—Ç–æ—Ä–æ–π –≤–Ω—É–∫ –µ–≥–æ –∏–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç
        
        Args:
            dt_grandchildren: –º–∞—Å—Å–∏–≤ –∏–∑ 8 –∑–Ω–∞—á–µ–Ω–∏–π dt –¥–ª—è –≤–Ω—É–∫–æ–≤.
                            –ï—Å–ª–∏ None, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç parent_dt * config.dt_grandchildren_factor
            show: –≤–∫–ª—é—á–∞—Ç—å –ª–∏ –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é. –ï—Å–ª–∏ None, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç config.show_debug
        
        Returns:
            List –≤–Ω—É–∫–æ–≤
        """
        if show is None:
            show = self.config.show_debug
            
        if not self._children_created:
            raise RuntimeError("–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –¥–µ—Ç–µ–π —á–µ—Ä–µ–∑ create_children()")
            
        if self._grandchildren_created:
            if show:
                print("‚ö†Ô∏è –í–Ω—É–∫–∏ —É–∂–µ —Å–æ–∑–¥–∞–Ω—ã, –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º...")
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º dt –¥–ª—è –≤–Ω—É–∫–æ–≤
        if dt_grandchildren is None:
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º: dt_–≤–Ω—É–∫–∞ = |dt_—Ä–æ–¥–∏—Ç–µ–ª—è| * factor
            dt_grandchildren = []
            for child in self.children:
                parent_dt_abs = abs(child['dt'])  # –≤—Å–µ–≥–¥–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ!
                grandchild_dt = parent_dt_abs * self.config.dt_grandchildren_factor
                dt_grandchildren.extend([grandchild_dt, grandchild_dt])  # –ø–æ 2 –Ω–∞ —Ä–µ–±–µ–Ω–∫–∞
            dt_grandchildren = np.array(dt_grandchildren)
        else:
            assert len(dt_grandchildren) == 8, "dt_grandchildren –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ä–æ–≤–Ω–æ 8 —ç–ª–µ–º–µ–Ω—Ç–æ–≤"
        
        # –ó–Ω–∞–∫–∏ –¥–ª—è –≤–Ω—É–∫–æ–≤: —á–µ—Ä–µ–¥—É–µ–º + –∏ - –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–æ–¥–∏—Ç–µ–ª—è
        dt_signs_grandchildren = [1, -1, 1, -1, 1, -1, 1, -1]  # –¥–ª—è 8 –≤–Ω—É–∫–æ–≤

        self.grandchildren = []
        grandchild_global_idx = 0

        if show:
            print(f"üë∂ –°–æ–∑–¥–∞–Ω–∏–µ –≤–Ω—É–∫–æ–≤ —Å –û–ë–†–ê–¢–ù–´–ú —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º:")

        for parent_idx, parent in enumerate(self.children):
            # –û–ë–†–ê–¢–ù–û–ï —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–¥–∏—Ç–µ–ª—è
            reversed_control = -parent['control']
            
            if show:
                print(f"\n  –û—Ç —Ä–æ–¥–∏—Ç–µ–ª—è {parent_idx} ({parent['name']}, u={parent['control']:+.1f}):")
                print(f"    ‚îî‚îÄ –í–Ω—É–∫–∏ –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å u={reversed_control:+.1f} (–æ–±—Ä–∞—Ç–Ω–æ–µ)")
            
            # –°–æ–∑–¥–∞–µ–º 2 –≤–Ω—É–∫–æ–≤: –æ–¥–∏–Ω –≤–ø–µ—Ä–µ–¥ (+dt), –¥—Ä—É–≥–æ–π –Ω–∞–∑–∞–¥ (-dt)
            for local_idx in range(2):
                # –ü—Ä–∏–º–µ–Ω—è–µ–º –∑–Ω–∞–∫ –∫ dt –¥–ª—è —á–µ—Ä–µ–¥–æ–≤–∞–Ω–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
                dt_positive = abs(dt_grandchildren[grandchild_global_idx])
                final_dt = dt_positive * dt_signs_grandchildren[grandchild_global_idx]
                direction = "forward" if final_dt > 0 else "backward"
                
                # –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –≤–Ω—É–∫–∞ –æ—Ç –ø–æ–∑–∏—Ü–∏–∏ —Ä–æ–¥–∏—Ç–µ–ª—è
                new_position = self.pendulum.step(
                    state=parent['position'],
                    control=reversed_control,  # –û–ë–†–ê–¢–ù–û–ï —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ!
                    dt=final_dt
                )
                
                grandchild = {
                    'position': new_position,
                    'id': f'grandchild_{parent_idx}_{local_idx}',
                    'name': f'gc_{parent_idx}_{local_idx}_{direction}',
                    'parent_idx': parent_idx,  # –∏–Ω–¥–µ–∫—Å —Ä–æ–¥–∏—Ç–µ–ª—è (0-3)
                    'local_idx': local_idx,    # –ª–æ–∫–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å —É —Ä–æ–¥–∏—Ç–µ–ª—è (0-1)
                    'global_idx': grandchild_global_idx,  # –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å (0-7)
                    'control': reversed_control,  # –û–ë–†–ê–¢–ù–û–ï —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–¥–∏—Ç–µ–ª—è
                    'dt': final_dt,            # —Ñ–∏–Ω–∞–ª—å–Ω—ã–π dt (–º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º)
                    'dt_abs': dt_positive,     # –∞–±—Å–æ–ª—é—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ dt  
                    'color': parent['color'],  # –Ω–∞—Å–ª–µ–¥—É–µ–º —Ü–≤–µ—Ç —Ä–æ–¥–∏—Ç–µ–ª—è
                    'size': self.config.grandchild_size
                }
                
                self.grandchildren.append(grandchild)
                
                if show:
                    print(f"    üå± –í–Ω—É–∫ {local_idx}: u={reversed_control:+.1f}, dt={final_dt:+.6f} ({direction}) ‚Üí {new_position}")
                
                grandchild_global_idx += 1
        
        self._grandchildren_created = True
        
        # –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –≤—Å–µ –≤–Ω—É–∫–∏ —Å–æ–∑–¥–∞–Ω—ã
        self._create_pairing_candidate_map(show=show)
        
        if show:
            print(f"\n‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(self.grandchildren)} –≤–Ω—É–∫–æ–≤ —Å –û–ë–†–ê–¢–ù–´–ú —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º")
            print(f"   –°—Ç—Ä—É–∫—Ç—É—Ä–∞: –æ—Ç –∫–∞–∂–¥–æ–≥–æ —Ä–æ–¥–∏—Ç–µ–ª—è –ø–æ 2 –≤–Ω—É–∫–∞ (forward/backward)")
        
        # –ù–û–í–û–ï: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ - —Ç–æ–ª—å–∫–æ —Ä—É—á–Ω–æ–µ –ø–æ M
        # if not getattr(self.config, 'skip_auto_merge', False):
        #     merge_result = self.merge_close_grandchildren(distance_threshold=1e-3)
        #     if merge_result['total_merged'] > 0:
        #         print(f"üîó –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–æ {merge_result['total_merged']} –ø–∞—Ä –≤–Ω—É–∫–æ–≤")
        
        return self.grandchildren

    def merge_close_grandchildren(self, distance_threshold=1e-4):
        """
        –û–±—ä–µ–¥–∏–Ω—è–µ—Ç –≤–Ω—É–∫–æ–≤, –Ω–∞—Ö–æ–¥—è—â–∏—Ö—Å—è –±–ª–∏–∂–µ —Ç—Ä–µ—à—Ö–æ–ª–¥–∞.
        
        Args:
            distance_threshold: –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è
            
        Returns:
            dict: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è—Ö
        """
        if not self._grandchildren_created:
            return {'merged_pairs': [], 'error': '–í–Ω—É–∫–∏ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã'}
            
        merged_pairs = []
        grandchildren_to_remove = set()
        
        print(f"üîç –î–ï–¢–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –û–ë–™–ï–î–ò–ù–ï–ù–ò–Ø –í–ù–£–ö–û–í")
        print(f"   üìè –¢—Ä–µ—à—Ö–æ–ª–¥: {distance_threshold}")
        print(f"   üìä –í–Ω—É–∫–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {len(self.grandchildren)}")
        print(f"   üìç –ü–æ–∑–∏—Ü–∏–∏ –≤—Å–µ—Ö –≤–Ω—É–∫–æ–≤:")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏ –≤–Ω—É–∫–æ–≤ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        for i, gc in enumerate(self.grandchildren):
            pos = gc['position']
            print(f"      GC{i}: ({pos[0]:.6f}, {pos[1]:.6f}) | dt={gc['dt']:+.6f} | control={gc['control']:+.1f}")
        
        print(f"\nüîç –ü–†–û–í–ï–†–ö–ê –í–°–ï–• –ü–ê–†:")
        
        # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—Å–µ—Ö —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π
        all_distances = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –ø–∞—Ä—ã –≤–Ω—É–∫–æ–≤
        for i in range(len(self.grandchildren)):
            if i in grandchildren_to_remove:
                continue
                
            for j in range(i + 1, len(self.grandchildren)):
                if j in grandchildren_to_remove:
                    continue
                    
                gc_i = self.grandchildren[i]
                gc_j = self.grandchildren[j]
                
                # –í—ã—á–∏—Å–ª—è–µ–º –¥–∏—Å—Ç–∞–Ω—Ü–∏—é
                pos_i = np.array(gc_i['position'])
                pos_j = np.array(gc_j['position'])
                distance = np.linalg.norm(pos_i - pos_j)
                all_distances.append(distance)
                
                # –ü–æ–¥—Ä–æ–±–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∫–∞–∂–¥–æ–π –ø–∞—Ä—ã
                meets_threshold = distance < distance_threshold
                threshold_status = "‚úÖ –ë–õ–ò–ó–ö–û" if meets_threshold else "‚ùå –î–ê–õ–ï–ö–û"
                
                print(f"   GC{i} ‚Üî GC{j}: {distance:.8f} {threshold_status} (–ø–æ—Ä–æ–≥: {distance_threshold:.8f})")
                
                if meets_threshold:
                    # –û–±—ä–µ–¥–∏–Ω—è–µ–º: —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ç–æ—á–∫—É –≤ —Å–µ—Ä–µ–¥–∏–Ω–µ
                    merged_position = (pos_i + pos_j) / 2
                    merged_dt = (abs(gc_i['dt']) + abs(gc_j['dt'])) / 2
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å—Ö–æ–¥–Ω—ã—Ö –≤–Ω—É–∫–∞—Ö –¥–ª—è –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –ª–∏–Ω–∫–æ–≤
                    merged_gc = {
                        'position': merged_position,
                        'dt': merged_dt,
                        'control': gc_i['control'],  # –ë–µ—Ä–µ–º control –æ—Ç –ø–µ—Ä–≤–æ–≥–æ
                        'color': gc_i.get('color', 'default'),  # –ò—Å—Ö–æ–¥–Ω—ã–π —Ü–≤–µ—Ç –ø–µ—Ä–≤–æ–π —Å–ø–æ—Ä—ã
                        'parent_idx': gc_i['parent_idx'],
                        'global_idx': gc_i['global_idx'],
                        'merged_from': [gc_i['global_idx'], gc_j['global_idx']],  # –ù–û–í–û–ï: —Å–ø–∏—Å–æ–∫ –∏—Å—Ö–æ–¥–Ω—ã—Ö –≤–Ω—É–∫–æ–≤
                        'original_positions': [pos_i.copy(), pos_j.copy()],  # –ù–û–í–û–ï: –∏—Å—Ö–æ–¥–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏
                        'original_dts': [gc_i['dt'], gc_j['dt']]  # –ù–û–í–û–ï: –∏—Å—Ö–æ–¥–Ω—ã–µ dt
                    }
                    
                    # –ó–∞–º–µ–Ω—è–µ–º –ø–µ—Ä–≤–æ–≥–æ –≤–Ω—É–∫–∞ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–º
                    self.grandchildren[i] = merged_gc
                    
                    # –ü–æ–º–µ—á–∞–µ–º –≤—Ç–æ—Ä–æ–≥–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
                    grandchildren_to_remove.add(j)
                    
                    merged_pairs.append({
                        'merged_idx': i,
                        'removed_idx': j,
                        'distance': distance,
                        'merged_position': merged_position,
                        'original_indices': [gc_i['global_idx'], gc_j['global_idx']]
                    })
                    
                    print(f"      üîó –û–ë–™–ï–î–ò–ù–Ø–ï–ú! –í–Ω—É–∫–∏ {gc_i['global_idx']} –∏ {gc_j['global_idx']}")
                    print(f"         üìè –î–∏—Å—Ç–∞–Ω—Ü–∏—è: {distance:.8f} < {distance_threshold:.8f}")
                    print(f"         üìç –ù–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è: ({merged_position[0]:.6f}, {merged_position[1]:.6f})")
                    break  # –û–¥–∏–Ω –≤–Ω—É–∫ –º–æ–∂–µ—Ç –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å—Å—è —Ç–æ–ª—å–∫–æ —Å –æ–¥–Ω–∏–º –¥—Ä—É–≥–∏–º
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π
        if all_distances:
            min_dist = min(all_distances)
            max_dist = max(all_distances)
            avg_dist = sum(all_distances) / len(all_distances)
            
            print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –†–ê–°–°–¢–û–Ø–ù–ò–ô:")
            print(f"   üìè –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ: {min_dist:.8f}")
            print(f"   üìè –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ: {max_dist:.8f}")
            print(f"   üìè –°—Ä–µ–¥–Ω–µ–µ: {avg_dist:.8f}")
            print(f"   üìè –¢—Ä–µ—à—Ö–æ–ª–¥: {distance_threshold:.8f}")
            print(f"   üìä –ü–∞—Ä –±–ª–∏–∂–µ —Ç—Ä–µ—à—Ö–æ–ª–¥–∞: {len([d for d in all_distances if d < distance_threshold])}/{len(all_distances)}")
        
        # –£–¥–∞–ª—è–µ–º –ø–æ–º–µ—á–µ–Ω–Ω—ã–µ –≤–Ω—É–∫–∏ (–≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ –∏–Ω–¥–µ–∫—Å–æ–≤)
        for idx in sorted(grandchildren_to_remove, reverse=True):
            print(f"üóëÔ∏è –£–¥–∞–ª—è–µ–º –≤–Ω—É–∫–∞ {idx}")
            self.grandchildren.pop(idx)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–ª–∞–≥, –µ—Å–ª–∏ –±—ã–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        if merged_pairs:
            self._grandchildren_modified = True
            print(f"\n‚úÖ –†–ï–ó–£–õ–¨–¢–ê–¢ –û–ë–™–ï–î–ò–ù–ï–ù–ò–Ø:")
            print(f"   üîó –û–±—ä–µ–¥–∏–Ω–µ–Ω–æ –ø–∞—Ä: {len(merged_pairs)}")
            print(f"   üìä –í–Ω—É–∫–æ–≤ –æ—Å—Ç–∞–ª–æ—Å—å: {len(self.grandchildren)}")
            print(f"   üìä –í–Ω—É–∫–æ–≤ –±—ã–ª–æ: {len(self.grandchildren) + len(grandchildren_to_remove)}")
        else:
            print(f"\n‚ùå –û–ë–™–ï–î–ò–ù–ï–ù–ò–ï –ù–ï –ü–†–û–ò–ó–û–®–õ–û:")
            print(f"   üìä –í—Å–µ {len(all_distances)} —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π –±–æ–ª—å—à–µ —Ç—Ä–µ—à—Ö–æ–ª–¥–∞ {distance_threshold:.8f}")
            if all_distances:
                print(f"   üìè –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {min(all_distances):.8f}")
                print(f"   üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–≤–µ–ª–∏—á–∏—Ç—å —Ç—Ä–µ—à—Ö–æ–ª–¥ –¥–æ {min(all_distances) * 1.1:.8f}")
        
        return {
            'merged_pairs': merged_pairs,
            'total_merged': len(merged_pairs),
            'remaining_grandchildren': len(self.grandchildren),
            'all_distances': all_distances,
            'min_distance': min(all_distances) if all_distances else None,
            'threshold_used': distance_threshold
        }
    
    def _create_pairing_candidate_map(self, show: bool = None):
        """
        –°–æ–∑–¥–∞–µ—Ç –∏ –∫–µ—à–∏—Ä—É–µ—Ç –∫–∞—Ä—Ç—É –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –¥–ª—è —Å–ø–∞—Ä–∏–≤–∞–Ω–∏—è.
        –ö–ª—é—á - global_idx –≤–Ω—É–∫–∞, –∑–Ω–∞—á–µ–Ω–∏–µ - —Å–ø–∏—Å–æ–∫ global_idx –≤—Å–µ—Ö –≤–Ω—É–∫–æ–≤ –æ—Ç –¥—Ä—É–≥–∏—Ö —Ä–æ–¥–∏—Ç–µ–ª–µ–π.
        –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –≤–Ω—É–∫–æ–≤.
        """
        if show is None:
            show = self.config.show_debug
            
        if show:
            print("üó∫Ô∏è  –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –¥–ª—è —Å–ø–∞—Ä–∏–≤–∞–Ω–∏—è...")

        self.pairing_candidate_map = {}
        
        # –î–ª—è –Ω–µ–±–æ–ª—å—à–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–Ω—É–∫–æ–≤ (8) –ø—Ä—è–º—ã–µ —Ü–∏–∫–ª—ã –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã
        for current_grandchild in self.grandchildren:
            current_id = current_grandchild['global_idx']
            current_parent_id = current_grandchild['parent_idx']
            
            candidates = []
            for other_grandchild in self.grandchildren:
                if other_grandchild['parent_idx'] != current_parent_id:
                    candidates.append(other_grandchild['global_idx'])
            
            self.pairing_candidate_map[current_id] = sorted(candidates)

        if show:
            print(f"‚úÖ –ö–∞—Ä—Ç–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ —Å–æ–∑–¥–∞–Ω–∞. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª—é—á–µ–π: {len(self.pairing_candidate_map)}")

    def get_default_dt_vector(self) -> np.ndarray:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –≤–µ–∫—Ç–æ—Ä –≤—Ä–µ–º–µ–Ω –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏.
        
        Returns:
            np.array –∏–∑ 12 —ç–ª–µ–º–µ–Ω—Ç–æ–≤: [4 dt –¥–ª—è –¥–µ—Ç–µ–π] + [8 dt –¥–ª—è –≤–Ω—É–∫–æ–≤]
        """
        return self.config.get_default_dt_vector()
    
    def reset(self):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –¥–µ—Ä–µ–≤–æ –∫ –Ω–∞—á–∞–ª—å–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é."""
        self.children = []
        self.grandchildren = []
        self.sorted_grandchildren = []
        self._children_created = False
        self._grandchildren_created = False
        self._grandchildren_sorted = False
        
        if self.config.show_debug:
            print("üîÑ –î–µ—Ä–µ–≤–æ —Å–±—Ä–æ—à–µ–Ω–æ –∫ –Ω–∞—á–∞–ª—å–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é")

    def sort_and_pair_grandchildren(self, show: bool = None) -> List[Dict[str, Any]]:
        """
        –°–æ—Ä—Ç–∏—Ä—É–µ—Ç 8 –≤–Ω—É–∫–æ–≤ –ø–æ —É–≥–ª—É –æ—Ç –∫–æ—Ä–Ω—è –∏ –≥—Ä—É–ø–ø–∏—Ä—É–µ—Ç –≤ –ø–∞—Ä—ã.
        
        –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –ú–ï–¢–û–î —Å –∂–µ—Å—Ç–∫–∏–º –∞—Å—Å–µ—Ä—Ç–æ–º!
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ –≤ –∫–∞–∂–¥–æ–π –ø–∞—Ä–µ (0,1), (2,3), (4,5), (6,7) –≤–Ω—É–∫–∏ –æ—Ç —Ä–∞–∑–Ω—ã—Ö —Ä–æ–¥–∏—Ç–µ–ª–µ–π.
        –ï—Å–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ –ø—Ä–æ—à–ª–∞ - –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø—Ä–æ–≥—Ä–∞–º–º—É —Å —á–µ—Ç–∫–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ–± –æ—à–∏–±–∫–µ.
        
        Args:
            show: –≤–∫–ª—é—á–∞—Ç—å –ª–∏ –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é. –ï—Å–ª–∏ None, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç config.show_debug
            
        Returns:
            List –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤–Ω—É–∫–æ–≤
            
        Raises:
            RuntimeError: –µ—Å–ª–∏ –≤–Ω—É–∫–∏ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã
            AssertionError: –µ—Å–ª–∏ –ø–∞—Ä—ã —Å–æ–¥–µ—Ä–∂–∞—Ç –≤–Ω—É–∫–æ–≤ –æ—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Ä–æ–¥–∏—Ç–µ–ª–µ–π
        """
        if show is None:
            show = self.config.show_debug
            
        if not self._grandchildren_created:
            raise RuntimeError("–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –≤–Ω—É–∫–æ–≤ —á–µ—Ä–µ–∑ create_grandchildren()")
        
        if show:
            print(f"üîÑ –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ {len(self.grandchildren)} –≤–Ω—É–∫–æ–≤ –ø–æ —É–≥–ª—É –æ—Ç –∫–æ—Ä–Ω—è...")
        
        def get_angle_from_root(gc):
            """–í—ã—á–∏—Å–ª—è–µ—Ç —É–≥–æ–ª –æ—Ç –∫–æ—Ä–Ω—è –¥–æ –≤–Ω—É–∫–∞."""
            dx = gc['position'][0] - self.root['position'][0]
            dy = gc['position'][1] - self.root['position'][1] 
            return np.arctan2(dy, dx)
        
        # 1. –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–≥–ª—É (–ø—Ä–æ—Ç–∏–≤ —á–∞—Å–æ–≤–æ–π —Å—Ç—Ä–µ–ª–∫–∏)
        sorted_gc = sorted(self.grandchildren, key=get_angle_from_root, reverse=True)
        
        if show:
            print("üîç –£–≥–ª—ã –≤–Ω—É–∫–æ–≤ –ø–æ—Å–ª–µ –ø–µ—Ä–≤–∏—á–Ω–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏:")
            for i, gc in enumerate(sorted_gc):
                angle_deg = get_angle_from_root(gc) * 180 / np.pi
                print(f"  {i}: {gc['name']} (—Ä–æ–¥–∏—Ç–µ–ª—å {gc['parent_idx']}) –ø–æ–¥ —É–≥–ª–æ–º {angle_deg:.1f}¬∞")
        
        # 2. –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤–æ–≥–æ –≤–Ω—É–∫–∞ –æ—Ç —Ä–æ–¥–∏—Ç–µ–ª—è 0
        roll_offset = 0
        for i, gc in enumerate(sorted_gc):
            if gc['parent_idx'] == 0:
                roll_offset = i
                if show:
                    print(f"üéØ –ù–∞–π–¥–µ–Ω –≤–Ω—É–∫ —Ä–æ–¥–∏—Ç–µ–ª—è 0 –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ {i}, roll_offset = {roll_offset}")
                break
        
        # 3. –î–µ–ª–∞–µ–º roll —á—Ç–æ–±—ã –≤–Ω—É–∫ —Ä–æ–¥–∏—Ç–µ–ª—è 0 —Å—Ç–∞–ª –ø–µ—Ä–≤—ã–º
        sorted_gc = np.roll(sorted_gc, -roll_offset).tolist()
        if show:
            print(f"üîÑ –ü—Ä–∏–º–µ–Ω–µ–Ω roll –Ω–∞ {-roll_offset}")
        
        # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–µ—Ä–∏–π: 1-–π –≤–Ω—É–∫ –æ—Ç –¥—Ä—É–≥–æ–≥–æ —Ä–æ–¥–∏—Ç–µ–ª—è?
        if len(sorted_gc) >= 2 and sorted_gc[1]['parent_idx'] == 0:
            # –ï—Å–ª–∏ 1-–π —Ç–æ–∂–µ –æ—Ç —Ä–æ–¥–∏—Ç–µ–ª—è 0, —Å–¥–≤–∏–≥–∞–µ–º –Ω–∞ 1
            sorted_gc = np.roll(sorted_gc, 1).tolist()
            if show:
                print("üîÑ –ü—Ä–∏–º–µ–Ω–µ–Ω –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π roll +1")
        
        # 5. ‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê –í–°–ï–• –ü–ê–† - –ñ–ï–°–¢–ö–ò–ô –ê–°–°–ï–†–¢!
        if show:
            print(f"\nüßê –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê –ü–ê–†:")
        
        for pair_idx in range(4):
            idx1 = pair_idx * 2      # 0, 2, 4, 6
            idx2 = pair_idx * 2 + 1  # 1, 3, 5, 7
            
            if idx1 < len(sorted_gc) and idx2 < len(sorted_gc):
                parent1 = sorted_gc[idx1]['parent_idx']
                parent2 = sorted_gc[idx2]['parent_idx']
                
                if show:
                    different = parent1 != parent2
                    status = "‚úÖ" if different else "‚ùå"
                    print(f"  –ü–∞—Ä–∞ {pair_idx} (–≤–Ω—É–∫–∏ {idx1}-{idx2}): —Ä–æ–¥–∏—Ç–µ–ª–∏ {parent1}-{parent2} {status}")
                
                # üö® –ñ–ï–°–¢–ö–ò–ô –ê–°–°–ï–†–¢ - –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã!
                assert parent1 != parent2, (
                    f"\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ê–õ–ì–û–†–ò–¢–ú–ê –°–û–†–¢–ò–†–û–í–ö–ò!\n"
                    f"–ü–∞—Ä–∞ {pair_idx} —Å–æ–¥–µ—Ä–∂–∏—Ç –≤–Ω—É–∫–æ–≤ –æ—Ç –æ–¥–∏–Ω–∞–∫–æ–≤–æ–≥–æ —Ä–æ–¥–∏—Ç–µ–ª—è {parent1}!\n"
                    f"–í–Ω—É–∫ {idx1}: {sorted_gc[idx1]['name']} (—Ä–æ–¥–∏—Ç–µ–ª—å {parent1})\n"
                    f"–í–Ω—É–∫ {idx2}: {sorted_gc[idx2]['name']} (—Ä–æ–¥–∏—Ç–µ–ª—å {parent2})\n"
                    f"–ê–ª–≥–æ—Ä–∏—Ç–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ —Ç—Ä–µ–±—É–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è!"
                )
            else:
                # –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤–Ω—É–∫–æ–≤ - —Ç–æ–∂–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞
                assert False, (
                    f"\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤–Ω—É–∫–æ–≤ –¥–ª—è –ø–∞—Ä—ã {pair_idx}!\n"
                    f"–¢—Ä–µ–±—É—é—Ç—Å—è –∏–Ω–¥–µ–∫—Å—ã {idx1} –∏ {idx2}, –Ω–æ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ {len(sorted_gc)} –≤–Ω—É–∫–æ–≤."
                )
        
        # 6. –ï—Å–ª–∏ –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—à–ª–∏ - —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        self.sorted_grandchildren = sorted_gc
        self._grandchildren_sorted = True
        
        if show:
            print(f"\n‚úÖ –í–°–ï –ü–ê–†–´ –ö–û–†–†–ï–ö–¢–ù–´! –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
            print(f"   üìã –ò—Ç–æ–≥–æ–≤—ã–π –ø–æ—Ä—è–¥–æ–∫ –≤–Ω—É–∫–æ–≤:")
            for i, gc in enumerate(sorted_gc):
                print(f"     {i}: {gc['name']} –æ—Ç —Ä–æ–¥–∏—Ç–µ–ª—è {gc['parent_idx']}")
        
        return sorted_gc
    

    def calculate_mean_points(self, show: bool = None) -> np.ndarray:
        """
        –í—ã—á–∏—Å–ª—è–µ—Ç —Å—Ä–µ–¥–Ω–∏–µ —Ç–æ—á–∫–∏ –¥–ª—è 4 –ø–∞—Ä –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤–Ω—É–∫–æ–≤.
        
        –ü–∞—Ä—ã: (0,1), (2,3), (4,5), (6,7) –ø–æ –∏–Ω–¥–µ–∫—Å–∞–º –≤ sorted_grandchildren.
        –¢—Ä–µ–±—É–µ—Ç –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ sort_and_pair_grandchildren().
        
        Args:
            show: –≤–∫–ª—é—á–∞—Ç—å –ª–∏ –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é. –ï—Å–ª–∏ None, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç config.show_debug
            
        Returns:
            np.array —Ä–∞–∑–º–µ—Ä–∞ (4, 2) —Å–æ —Å—Ä–µ–¥–Ω–∏–º–∏ —Ç–æ—á–∫–∞–º–∏ 4 –ø–∞—Ä
            
        Raises:
            RuntimeError: –µ—Å–ª–∏ –≤–Ω—É–∫–∏ –Ω–µ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã
        """
        if show is None:
            show = self.config.show_debug
            
        if not self._grandchildren_sorted:
            raise RuntimeError("–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–Ω—É–∫–æ–≤ —á–µ—Ä–µ–∑ sort_and_pair_grandchildren()")
        
        if show:
            print(f"üìä –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–∏—Ö —Ç–æ—á–µ–∫ –¥–ª—è {len(self.sorted_grandchildren)} –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤–Ω—É–∫–æ–≤...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —É –Ω–∞—Å —Ä–æ–≤–Ω–æ 8 –≤–Ω—É–∫–æ–≤
        assert len(self.sorted_grandchildren) == 8, (
            f"–û–∂–∏–¥–∞–µ—Ç—Å—è 8 –≤–Ω—É–∫–æ–≤, –ø–æ–ª—É—á–µ–Ω–æ {len(self.sorted_grandchildren)}"
        )
        
        means = np.zeros((4, 2))
        
        for pair_idx in range(4):
            # –ü—Ä—è–º—ã–µ –∏–Ω–¥–µ–∫—Å—ã –ø–∞—Ä—ã: (0,1), (2,3), (4,5), (6,7)
            idx1 = pair_idx * 2
            idx2 = pair_idx * 2 + 1
            
            # –ë–µ—Ä–µ–º –≤–Ω—É–∫–æ–≤ –∏–∑ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
            gc1 = self.sorted_grandchildren[idx1]
            gc2 = self.sorted_grandchildren[idx2]
            
            # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω—é—é —Ç–æ—á–∫—É –ø–∞—Ä—ã
            pos1 = gc1['position']
            pos2 = gc2['position']
            mean_point = (pos1 + pos2) / 2
            means[pair_idx] = mean_point
            
            if show:
                distance = np.linalg.norm(pos1 - pos2)
                print(f"  üìè –ü–∞—Ä–∞ {pair_idx} (–≤–Ω—É–∫–∏ {idx1}-{idx2}):")
                print(f"     {gc1['name']} (—Ä–æ–¥–∏—Ç–µ–ª—å {gc1['parent_idx']}) ‚Üí {pos1}")
                print(f"     {gc2['name']} (—Ä–æ–¥–∏—Ç–µ–ª—å {gc2['parent_idx']}) ‚Üí {pos2}")
                print(f"     –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {distance:.6f}, –°—Ä–µ–¥–Ω—è—è —Ç–æ—á–∫–∞: {mean_point}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –æ–±—ä–µ–∫—Ç–µ
        self.mean_points = means
        
        if show:
            print(f"\n‚úÖ –°—Ä–µ–¥–Ω–∏–µ —Ç–æ—á–∫–∏ –≤—ã—á–∏—Å–ª–µ–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ tree.mean_points")
            print(f"   üéØ –†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å: {means.shape}")
        
        return means




    # ‚îÄ‚îÄ‚îÄ –¥–æ–±–∞–≤—å—Ç–µ –≤ –∫–ª–∞—Å—Å SporeTree ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    # def update_positions(self,
    #                     dt_children: np.ndarray,
    #                     dt_grandchildren: np.ndarray,
    #                     recompute_means: bool = True):
    #     """
    #     –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–µ—Ç–µ–π –∏ –≤–Ω—É–∫–æ–≤, —Å–æ—Ö—Ä–∞–Ω—è—è
    #     –ò–°–•–û–î–ù–´–ô –ø–æ—Ä—è–¥–æ–∫ self.children –∏ self.sorted_grandchildren.
    #     dt_children        ‚Äì 4 –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö —á–∏—Å–ª–∞
    #     dt_grandchildren   ‚Äì 8 –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö —á–∏—Å–µ–ª
    #     """
    #     assert self._grandchildren_sorted, (
    #         "–°–ø–µ—Ä–≤–∞ —Å–æ–∑–¥–∞–π—Ç–µ –¥–µ—Ä–µ–≤–æ (children+grandchildren) –∏ –≤—ã–∑–æ–≤–∏—Ç–µ "
    #         "sort_and_pair_grandchildren(), —á—Ç–æ–±—ã –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Ä—è–¥–æ–∫."
    #     )

    #     # 1. –¥–µ—Ç–∏
    #     for i, child in enumerate(self.children):
    #         signed_dt = np.sign(child['dt']) * dt_children[i]
    #         child['dt'] = signed_dt
    #         child['position'] = self.pendulum.step(
    #             state=self.root['position'],
    #             control=child['control'],
    #             dt=signed_dt
    #         )

    #     # 2. –≤–Ω—É–∫–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ–º global_idx, sign dt –æ—Å—Ç–∞—ë—Ç—Å—è –∫–∞–∫ –±—ã–ª–æ)
    #     for gc in self.grandchildren:
    #         j = gc['global_idx']                 # 0‚Ä•7
    #         signed_dt = np.sign(gc['dt']) * dt_grandchildren[j]
    #         gc['dt'] = signed_dt
    #         gc['dt_abs'] = abs(signed_dt)

    #         parent = self.children[gc['parent_idx']]
    #         gc['position'] = self.pendulum.step(
    #             state=parent['position'],
    #             control=gc['control'],
    #             dt=signed_dt
    #         )

    #     # 3. –ø–µ—Ä–µ—Å—á–∏—Ç–∞–µ–º —Å—Ä–µ–¥–Ω–∏–µ —Ç–æ—á–∫–∏
    #     if recompute_means:
    #         self.calculate_mean_points(show=False)
    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

    def update_positions(self, dt_children: np.ndarray, dt_grandchildren: np.ndarray, 
                                        recompute_means: bool = True, show: bool = False):
        """
        üöÄ –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø JIT –≤–µ—Ä—Å–∏—è update_positions() 
        
        –û—Å–Ω–æ–≤–∞–Ω–∞ –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –±–µ–Ω—á–º–∞—Ä–∫–∞: JIT –æ–¥–∏–Ω–æ—á–Ω—ã–µ –≤—ã–∑–æ–≤—ã –±—ã—Å—Ç—Ä–µ–µ batch –≤ 2x!
        –£–±–∏—Ä–∞–µ–º –≤—Å–µ –ª–∏—à–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏.
        """
        # –ú–ò–ù–ò–ú–ê–õ–¨–ù–´–ï –ø—Ä–æ–≤–µ—Ä–∫–∏ (—Ç–æ–ª—å–∫–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ)
        assert self._grandchildren_sorted, "–î–µ—Ä–µ–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ"

        # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
        # –≠–¢–ê–ü 1: üî• –ë–´–°–¢–†–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï –î–ï–¢–ï–ô (4 JIT –≤—ã–∑–æ–≤–∞)
        # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
        
        root_pos = self.root['position']  # –ö–µ—à–∏—Ä—É–µ–º –æ–±—Ä–∞—â–µ–Ω–∏–µ
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–µ—Ç–µ–π –Ω–∞–ø—Ä—è–º—É—é –±–µ–∑ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö –º–∞—Å—Å–∏–≤–æ–≤
        for i in range(4):  # –†–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π —Ü–∏–∫–ª –±—ã—Å—Ç—Ä–µ–µ enumerate
            child = self.children[i]
            dt_sign = 1 if child['dt'] > 0 else -1  # –ë—ã—Å—Ç—Ä–µ–µ np.sign()
            signed_dt = dt_children[i] * dt_sign
            
            # –ü—Ä—è–º–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–µ–∑ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–π
            child['dt'] = signed_dt
            child['position'] = self.pendulum.step(root_pos, child['control'], signed_dt)

        # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
        # –≠–¢–ê–ü 2: üî• –ë–´–°–¢–†–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï –í–ù–£–ö–û–í (8 JIT –≤—ã–∑–æ–≤–æ–≤)
        # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
        
        # –ü—Ä–µ–¥–≤—ã—á–∏—Å–ª—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ –¥–µ—Ç–µ–π –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
        child_positions = [child['position'] for child in self.children]
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤–Ω—É–∫–æ–≤ –Ω–∞–ø—Ä—è–º—É—é –ø–æ global_idx
        for gc in self.grandchildren:
            j = gc['global_idx']  # 0-7
            parent_pos = child_positions[gc['parent_idx']]  # –ë—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø
            
            dt_sign = 1 if gc['dt'] > 0 else -1  # –ë—ã—Å—Ç—Ä–µ–µ np.sign()
            signed_dt = dt_grandchildren[j] * dt_sign
            
            # –ü—Ä—è–º–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            gc['dt'] = signed_dt
            gc['dt_abs'] = abs(signed_dt)  # Inline abs –±—ã—Å—Ç—Ä–µ–µ np.abs
            gc['position'] = self.pendulum.step(parent_pos, gc['control'], signed_dt)

        # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
        # –≠–¢–ê–ü 3: –ë–´–°–¢–†–´–ô –ü–ï–†–ï–°–ß–ï–¢ –°–†–ï–î–ù–ò–• –¢–û–ß–ï–ö (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
        # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
        
        if recompute_means:
            # Inline –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ –≤—ã–∑–æ–≤–∞ –º–µ—Ç–æ–¥–∞ (—É–±–∏—Ä–∞–µ–º overhead)
            self.mean_points = np.zeros((4, 2))
            
            sorted_gc = self.sorted_grandchildren
            for pair_idx in range(4):
                idx1, idx2 = pair_idx * 2, pair_idx * 2 + 1
                pos1 = sorted_gc[idx1]['position']
                pos2 = sorted_gc[idx2]['position']
                self.mean_points[pair_idx] = (pos1 + pos2) * 0.5  # * 0.5 –±—ã—Å—Ç—Ä–µ–µ / 2
            
        if show:
            print("üîÑ JIT update: 4 –¥–µ—Ç–µ–π + 8 –≤–Ω—É–∫–æ–≤ –∑–∞ 12 –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤")


    def mean_points(self, show: bool = None) -> np.ndarray:
        """
        üöÄ –ë—ã—Å—Ç—Ä–∞—è –≤–µ—Ä—Å–∏—è calculate_mean_points –±–µ–∑ –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫.
        """
        if self.mean_points is None:
            self.mean_points = np.zeros((4, 2))
        
        sorted_gc = self.sorted_grandchildren  # –û–¥–∏–Ω –¥–æ—Å—Ç—É–ø –∫ –∞—Ç—Ä–∏–±—É—Ç—É
        
        # –†–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π —Ü–∏–∫–ª –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏
        self.mean_points[0] = (sorted_gc[0]['position'] + sorted_gc[1]['position']) * 0.5
        self.mean_points[1] = (sorted_gc[2]['position'] + sorted_gc[3]['position']) * 0.5
        self.mean_points[2] = (sorted_gc[4]['position'] + sorted_gc[5]['position']) * 0.5
        self.mean_points[3] = (sorted_gc[6]['position'] + sorted_gc[7]['position']) * 0.5
        
        return self.mean_points


    # –¢–∞–∫–∂–µ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫ –∫–ª–∞—Å—Å—É:
    def debug_plot_tree(self, save_path: Optional[str] = None) -> str:
        """
        –°–æ–∑–¥–∞–µ—Ç –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ –¥–µ—Ä–µ–≤–∞ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ –≤ —Ñ–∞–π–ª.
        
        Args:
            save_path: –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞. –ï—Å–ª–∏ None, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.
            
        Returns:
            str: –ø—É—Ç—å –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
        """
        try:
            from .visualize_spore_tree import visualize_spore_tree
            import matplotlib.pyplot as plt
            import os
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—É—Ç—å –µ—Å–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω - –≤—Å–µ–≥–¥–∞ –æ–¥–Ω–æ –∏–º—è —Ñ–∞–π–ª–∞
            if save_path is None:
                buffer_dir = "buffer"
                if not os.path.exists(buffer_dir):
                    os.makedirs(buffer_dir)
                save_path = os.path.join(buffer_dir, "tree_debug.png")
            
            # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
            fig, ax = plt.subplots(1, 1, figsize=(16, 12))
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
            visualize_spore_tree(self, title=f"–û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ –¥–µ—Ä–µ–≤–∞", ax=ax, show_legend=True)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è—Ö
            if hasattr(self, '_grandchildren_modified') and self._grandchildren_modified:
                ax.text(0.02, 0.98, "üîó –í–Ω—É–∫–∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω—ã", transform=ax.transAxes, 
                       fontsize=12, verticalalignment='top', 
                       bbox=dict(boxstyle="round,pad=0.3", facecolor="lightblue", alpha=0.7))
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º
            plt.tight_layout()
            plt.savefig(save_path, dpi=150, bbox_inches='tight')
            plt.close()
            
            print(f"üìä –ì—Ä–∞—Ñ–∏–∫ –¥–µ—Ä–µ–≤–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {save_path}")
            print(f"   üìç –ö–æ—Ä–µ–Ω—å: {self.root['position']}")
            print(f"   üë∂ –î–µ—Ç–µ–π: {len(self.children)}")
            print(f"   üë∂ –í–Ω—É–∫–æ–≤: {len(self.grandchildren)}")
            if hasattr(self, '_grandchildren_modified') and self._grandchildren_modified:
                print(f"   üîó –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è: –∞–∫—Ç–∏–≤–Ω—ã")
            
            return save_path
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –¥–µ—Ä–µ–≤–∞: {e}")
            import traceback
            traceback.print_exc()
            return ""
    
    def merge_close_grandchildren(self, distance_threshold=1e-4):
        """
        –û–±—ä–µ–¥–∏–Ω—è–µ—Ç –≤–Ω—É–∫–æ–≤, –Ω–∞—Ö–æ–¥—è—â–∏—Ö—Å—è –±–ª–∏–∂–µ —Ç—Ä–µ—à—Ö–æ–ª–¥–∞.
        
        Args:
            distance_threshold: –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è
            
        Returns:
            dict: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è—Ö
        """
        if not self._grandchildren_created:
            return {'merged_pairs': [], 'error': '–í–Ω—É–∫–∏ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã'}
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–∏ –ª–∏ –≤–Ω—É–∫–∏ —É–∂–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω—ã
        if hasattr(self, '_grandchildren_modified') and self._grandchildren_modified:
            return {'merged_pairs': [], 'error': '–í–Ω—É–∫–∏ —É–∂–µ –±—ã–ª–∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω—ã'}
            
        merged_pairs = []
        grandchildren_to_remove = set()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –ø–∞—Ä—ã –≤–Ω—É–∫–æ–≤
        for i in range(len(self.grandchildren)):
            if i in grandchildren_to_remove:
                continue
                
            for j in range(i + 1, len(self.grandchildren)):
                if j in grandchildren_to_remove:
                    continue
                    
                gc_i = self.grandchildren[i]
                gc_j = self.grandchildren[j]
                
                # –í—ã—á–∏—Å–ª—è–µ–º –¥–∏—Å—Ç–∞–Ω—Ü–∏—é
                pos_i = np.array(gc_i['position'])
                pos_j = np.array(gc_j['position'])
                distance = np.linalg.norm(pos_i - pos_j)
                
                if distance < distance_threshold:
                    # –û–±—ä–µ–¥–∏–Ω—è–µ–º: —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ç–æ—á–∫—É –≤ —Å–µ—Ä–µ–¥–∏–Ω–µ
                    merged_position = (pos_i + pos_j) / 2
                    merged_dt = (abs(gc_i['dt']) + abs(gc_j['dt'])) / 2
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å—Ö–æ–¥–Ω—ã—Ö –≤–Ω—É–∫–∞—Ö –¥–ª—è –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –ª–∏–Ω–∫–æ–≤
                    merged_gc = {
                        'position': merged_position,
                        'dt': merged_dt,
                        'control': gc_i['control'],  # –ë–µ—Ä–µ–º control –æ—Ç –ø–µ—Ä–≤–æ–≥–æ
                        'color': gc_i.get('color', 'default'),  # –ò—Å—Ö–æ–¥–Ω—ã–π —Ü–≤–µ—Ç –ø–µ—Ä–≤–æ–π —Å–ø–æ—Ä—ã
                        'parent_idx': gc_i['parent_idx'],
                        'global_idx': gc_i['global_idx'],
                        'merged_from': [gc_i['global_idx'], gc_j['global_idx']],  # –ù–û–í–û–ï: —Å–ø–∏—Å–æ–∫ –∏—Å—Ö–æ–¥–Ω—ã—Ö –≤–Ω—É–∫–æ–≤
                        'original_positions': [pos_i.copy(), pos_j.copy()],  # –ù–û–í–û–ï: –∏—Å—Ö–æ–¥–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏
                        'original_dts': [gc_i['dt'], gc_j['dt']]  # –ù–û–í–û–ï: –∏—Å—Ö–æ–¥–Ω—ã–µ dt
                    }
                    
                    # –ó–∞–º–µ–Ω—è–µ–º –ø–µ—Ä–≤–æ–≥–æ –≤–Ω—É–∫–∞ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–º
                    self.grandchildren[i] = merged_gc
                    
                    # –ü–æ–º–µ—á–∞–µ–º –≤—Ç–æ—Ä–æ–≥–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
                    grandchildren_to_remove.add(j)
                    
                    merged_pairs.append({
                        'merged_idx': i,
                        'removed_idx': j,
                        'distance': distance,
                        'merged_position': merged_position,
                        'original_indices': [gc_i['global_idx'], gc_j['global_idx']]
                    })
                    
                    print(f"üîó –û–±—ä–µ–¥–∏–Ω–µ–Ω—ã –≤–Ω—É–∫–∏ {gc_i['global_idx']} –∏ {gc_j['global_idx']}")
                    print(f"   üìè –î–∏—Å—Ç–∞–Ω—Ü–∏—è: {distance:.6e} < {distance_threshold:.6e}")
                    print(f"   üìç –ù–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è: ({merged_position[0]:.4f}, {merged_position[1]:.4f})")
                    break  # –û–¥–∏–Ω –≤–Ω—É–∫ –º–æ–∂–µ—Ç –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å—Å—è —Ç–æ–ª—å–∫–æ —Å –æ–¥–Ω–∏–º –¥—Ä—É–≥–∏–º
        
        # –£–¥–∞–ª—è–µ–º –ø–æ–º–µ—á–µ–Ω–Ω—ã–µ –≤–Ω—É–∫–∏ (–≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ –∏–Ω–¥–µ–∫—Å–æ–≤)
        for idx in sorted(grandchildren_to_remove, reverse=True):
            self.grandchildren.pop(idx)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–ª–∞–≥, –µ—Å–ª–∏ –±—ã–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        if merged_pairs:
            self._grandchildren_modified = True
            print(f"‚úÖ –û–±—ä–µ–¥–∏–Ω–µ–Ω–æ {len(merged_pairs)} –ø–∞—Ä –≤–Ω—É–∫–æ–≤")
            print(f"üìä –í–Ω—É–∫–æ–≤ –æ—Å—Ç–∞–ª–æ—Å—å: {len(self.grandchildren)} –∏–∑ {len(self.grandchildren) + len(grandchildren_to_remove)}")
        
        return {
            'merged_pairs': merged_pairs,
            'total_merged': len(merged_pairs),
            'remaining_grandchildren': len(self.grandchildren)
        }
    
    def reset_for_optimization(self):
        """–ë—ã—Å—Ç—Ä—ã–π —Å–±—Ä–æ—Å –ø–µ—Ä–µ–¥ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π - —É–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ."""
        # –ù–ï –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤—ã, —Ç–æ–ª—å–∫–æ –æ–±–Ω—É–ª—è–µ–º —Ñ–ª–∞–≥–∏
        self._children_created = False
        self._grandchildren_created = False
        self._grandchildren_sorted = False
        # mean_points –æ—Å—Ç–∞–≤–ª—è–µ–º - –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º –º–∞—Å—Å–∏–≤