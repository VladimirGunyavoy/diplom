import matplotlib.pyplot as plt
from matplotlib.patches import FancyArrowPatch

def visualize_spore_tree(tree_data, title="–î–µ—Ä–µ–≤–æ —Å–ø–æ—Ä", ax=None,
                         figsize=None, show_legend=True):
    """
    –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è: —Ç–æ–ª—å–∫–æ —Ç–æ—á–∫–∏ —Å–ø–æ—Ä + –ª–∏–Ω–∏–∏ —á–µ—Ç—ã—Ä–µ—Ö—É–≥–æ–ª—å–Ω–∏–∫–∞.
    
    Args:
        tree_data: dict —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–µ—Ä–µ–≤–∞ ('root', 'children', 'grandchildren')
                   –∏–ª–∏ –æ–±—ä–µ–∫—Ç SporeTree
        title: –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≥—Ä–∞—Ñ–∏–∫–∞
        ax: –æ–±—ä–µ–∫—Ç –æ—Å–µ–π matplotlib –¥–ª—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è. –ï—Å–ª–∏ None, —Å–æ–∑–¥–∞–µ—Ç—Å—è –Ω–æ–≤—ã–π.
        figsize: —Ä–∞–∑–º–µ—Ä –ø–æ–ª–æ—Ç–Ω–∞ (—à–∏—Ä–∏–Ω–∞, –≤—ã—Å–æ—Ç–∞).
        show_legend: –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–∏ –ª–µ–≥–µ–Ω–¥—É.
    """
    if ax is None:
        if figsize is None:
            figsize = (12, 9)
        fig, ax = plt.subplots(1, 1, figsize=figsize)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —Ä–∞–±–æ—Ç–∞–µ–º –º—ã —Å –æ–±—ä–µ–∫—Ç–æ–º tree –∏–ª–∏ —Å–æ —Å–ª–æ–≤–∞—Ä–µ–º
    if isinstance(tree_data, dict):
        root = tree_data['root']
        children = tree_data['children']
        grandchildren = tree_data['grandchildren']
        _children_created = bool(children)
        _grandchildren_created = bool(grandchildren)
        # –í —Å–ª–æ–≤–∞—Ä–µ –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–µ, –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –æ–Ω–∞ –Ω–µ –Ω—É–∂–Ω–∞
        grandchildren_to_show = grandchildren
    else: # SporeTree object
        root = tree_data.root
        children = tree_data.children
        grandchildren = tree_data.grandchildren
        _children_created = tree_data._children_created
        _grandchildren_created = tree_data._grandchildren_created
        # üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –í—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –í–°–ï –≤–Ω—É–∫–æ–≤ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∞
        grandchildren_to_show = tree_data.grandchildren  # –í—Å–µ–≥–¥–∞ –≤—Å–µ –≤–Ω—É–∫–∏!
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        if (hasattr(tree_data, '_grandchildren_sorted') and
                tree_data._grandchildren_sorted):
            sorted_count = (len(tree_data.sorted_grandchildren)
                           if hasattr(tree_data, 'sorted_grandchildren') else 0)
            total_count = len(tree_data.grandchildren)
            print(f"üîç tree_debug.png: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –í–°–ï {total_count} –≤–Ω—É–∫–æ–≤ "
                  f"(–±—ã–ª–æ –±—ã {sorted_count} –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö)")


    # === –¢–û–ß–ö–ò ===
    
    # –ö–æ—Ä–µ–Ω—å
    ax.scatter(root['position'][0], root['position'][1], 
               c='#2C3E50', s=300, alpha=0.9, zorder=5) # –£–≤–µ–ª–∏—á–µ–Ω —Ä–∞–∑–º–µ—Ä
    
    # –î–µ—Ç–∏ + —Å—Ç—Ä–µ–ª–∫–∏
    if _children_created:
        child_colors = ['#5DADE2', '#A569BD', '#58D68D', '#F4D03F']
        for i, child in enumerate(children):
            ax.scatter(child['position'][0], child['position'][1],
                      c=child_colors[i], s=300, alpha=1, zorder=4, label=f'{i}') # –£–≤–µ–ª–∏—á–µ–Ω —Ä–∞–∑–º–µ—Ä
            
            # –ù–ê–ü–†–ê–í–õ–ï–ù–ò–ï —Å—Ç—Ä–µ–ª–∫–∏ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∑–Ω–∞–∫–∞ dt
            if child['dt'] > 0:  # forward: –æ—Ç –∫–æ—Ä–Ω—è –∫ —Ä–µ–±–µ–Ω–∫—É
                arrow_start = root['position']
                arrow_end = child['position']
            else:  # backward: –æ—Ç —Ä–µ–±–µ–Ω–∫–∞ –∫ –∫–æ—Ä–Ω—é
                arrow_start = child['position']
                arrow_end = root['position']
            
            # –¶–í–ï–¢ —Å—Ç—Ä–µ–ª–∫–∏ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∑–Ω–∞–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            if child['control'] > 0:  # u_max 
                arrow_color = '#FF6B6B'
            else:  # u_min
                arrow_color = '#1ABC9C'
            
            arrow = FancyArrowPatch(
                arrow_start, arrow_end, arrowstyle='->', 
                mutation_scale=20, color=arrow_color, alpha=0.7, linewidth=3
            )
            ax.add_patch(arrow)
    
    # –í–Ω—É–∫–∏ + —Å—Ç—Ä–µ–ª–∫–∏
    if _grandchildren_created:
        grandchild_colors = [
            '#FF1744', '#9C27B0', '#2196F3', '#4CAF50',
            '#FF9800', '#795548', '#E91E63', '#607D8B'
        ]
        
        # üîß –£–õ–£–ß–®–ï–ù–ò–ï: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –ª–∏–Ω–∫–∏ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–µ–π
        grandchild_info = {}  # –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –ø–æ–∑–∏—Ü–∏–π

        for i, gc in enumerate(grandchildren_to_show):
            gc_color = grandchild_colors[gc['global_idx'] % len(grandchild_colors)]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –ø–æ–∑–∏—Ü–∏–∏
            pos_key = f"{gc['position'][0]:.6f}_{gc['position'][1]:.6f}"
            if pos_key in grandchild_info:
                # –°–º–µ—â–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –≤–∏–¥–∏–º–æ—Å—Ç–∏
                offset = len(grandchild_info[pos_key]) * 0.001
                display_pos = (gc['position'][0] + offset,
                              gc['position'][1] + offset)
                grandchild_info[pos_key].append(gc['global_idx'])
                print(f"‚ö†Ô∏è –î—É–±–ª–∏–∫–∞—Ç –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞–π–¥–µ–Ω –¥–ª—è –≤–Ω—É–∫–∞ "
                      f"{gc['global_idx']}, —Å–º–µ—â–µ–Ω–∏–µ –Ω–∞ {offset}")
            else:
                display_pos = gc['position']
                grandchild_info[pos_key] = [gc['global_idx']]
            
            ax.scatter(display_pos[0], display_pos[1],
                      c=gc_color, s=400, alpha=1, zorder=3)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º ID –≤–Ω—É–∫–∞ –Ω–∞ —Ç–æ—á–∫–µ
            ax.text(display_pos[0], display_pos[1], str(gc['global_idx']),
                    color='white', ha='center', va='center',
                    fontweight='bold', fontsize=10)

            # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–µ–ª–∫—É –∫ —Ä–æ–¥–∏—Ç–µ–ª—é
            parent = children[gc['parent_idx']]
            
            if gc['dt'] > 0:
                arrow_start, arrow_end = parent['position'], display_pos
            else:
                arrow_start, arrow_end = display_pos, parent['position']
            
            # –¶–≤–µ—Ç —Å—Ç—Ä–µ–ª–∫–∏ –ø–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é + —É–≤–µ–ª–∏—á–µ–Ω–Ω–∞—è —Ç–æ–ª—â–∏–Ω–∞
            arrow_color = '#FF6B6B' if gc['control'] > 0 else '#1ABC9C'
            
            arrow = FancyArrowPatch(
                arrow_start, arrow_end, arrowstyle='->', 
                mutation_scale=25, color=arrow_color,
                linewidth=4, alpha=0.8  # –£–≤–µ–ª–∏—á–µ–Ω–Ω–∞—è —Ç–æ–ª—â–∏–Ω–∞ –∏ –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å
            )
            ax.add_patch(arrow)
    
    # === –ù–ê–°–¢–†–û–ô–ö–ò –ì–†–ê–§–ò–ö–ê ===
    
    ax.set_xlabel('Œ∏ (—É–≥–æ–ª, —Ä–∞–¥)')
    ax.set_ylabel('Œ∏Ãá (—Å–∫–æ—Ä–æ—Å—Ç—å, —Ä–∞–¥/—Å)')
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –∑–∞–≥–æ–ª–æ–≤–æ–∫
    total_links = len(children) + len(grandchildren_to_show)
    ax.set_title(f"{title} - –í—Å–µ–≥–æ –ª–∏–Ω–∫–æ–≤: {total_links} "
                 f"(–¥–µ—Ç–∏: {len(children)}, –≤–Ω—É–∫–∏: {len(grandchildren_to_show)})")
    
    ax.grid(True, alpha=0.3)
    
    # –õ–µ–≥–µ–Ω–¥–∞ –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–∞
    # if show_legend and _grandchildren_created:
    #     handles, labels = ax.get_legend_handles_labels()
    #     grandchild_handles = [h for h, l in zip(handles, labels) if l and l.startswith('–í–Ω—É–∫')]
    #     grandchild_labels = [l for l in labels if l and l.startswith('–í–Ω—É–∫')]
        
    #     if grandchild_handles:
    #         legend = ax.legend(grandchild_handles, grandchild_labels, 
    #                          bbox_to_anchor=(1.05, 1), loc='upper left',
    #                          title='–í–Ω—É–∫–∏ (–∏–Ω–¥–µ–∫—Å—ã)', title_fontsize=20,
    #                          fontsize=16)
    #         legend.get_title().set_fontweight('bold')
    
    all_x = [root['position'][0]]
    all_y = [root['position'][1]]
    if _children_created:
        for child in children:
            all_x.append(child['position'][0])
            all_y.append(child['position'][1])
    if _grandchildren_created:
        for gc in grandchildren_to_show:
            all_x.append(gc['position'][0])
            all_y.append(gc['position'][1])
            
    x_min, x_max = min(all_x), max(all_x)
    y_min, y_max = min(all_y), max(all_y)
    x_range = x_max - x_min
    y_range = y_max - y_min
    
    x_margin = max(x_range * 0.05, 1e-6)
    y_margin = max(y_range * 0.1, 0.001)
    ax.set_xlim(x_min - x_margin, x_max + x_margin)
    ax.set_ylim(y_min - y_margin, y_max + y_margin)
    
    # if ax is None:
    #     plt.tight_layout(rect=[0, 0, 0.85, 1])
    #     plt.show()