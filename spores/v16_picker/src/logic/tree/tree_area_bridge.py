# v15_5_tree_opt/src/logic/tree/tree_area_bridge.py
from __future__ import annotations
import importlib
import json
import os
from typing import Any, Dict

def _load_optimization_config() -> Dict[str, Any]:
    """–ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∏–∑ JSON —Ñ–∞–π–ª–∞"""
    config_path = os.path.join(os.path.dirname(__file__), '..', '..', '..', 'config', 'json', 'config.json')
    try:
        with open(config_path, 'r') as f:
            config = json.load(f)
        return config.get('tree', {}).get('area_optimization', {})
    except Exception as e:
        print(f"[tree_area_bridge] ‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥: {e}, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
        return {}

def _load_pairing_config() -> Dict[str, Any]:
    """–ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å–ø–∞—Ä–∏–≤–∞–Ω–∏—è –∏–∑ JSON —Ñ–∞–π–ª–∞"""
    config_path = os.path.join(os.path.dirname(__file__), '..', '..', '..', 'config', 'json', 'config.json')
    try:
        with open(config_path, 'r') as f:
            config = json.load(f)
        return config.get('tree', {}).get('pairing', {})
    except Exception as e:
        print(f"[tree_area_bridge] ‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥ —Å–ø–∞—Ä–∏–≤–∞–Ω–∏—è: {e}, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
        return {}

def _get_current_dt_from_manager(dt_manager: Any) -> float:
    """–ê–∫–∫—É—Ä–∞—Ç–Ω–æ –¥–æ—Å—Ç–∞—ë–º —Ç–µ–∫—É—â–∏–π dt –∏–∑ dt-manager —Å —Ä–∞–∑–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω—ã–º–∏ API."""
    # –ü–æ–ø—ã—Ç–∫–∏ –≤ –ø–æ—Ä—è–¥–∫–µ –æ–∂–∏–¥–∞–µ–º–æ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
    for attr in ("current_dt", "dt", "value"):
        if hasattr(dt_manager, attr):
            return float(getattr(dt_manager, attr))
    # –ú–µ—Ç–æ–¥—ã
    for meth in ("get_current_dt", "get_dt"):
        if hasattr(dt_manager, meth) and callable(getattr(dt_manager, meth)):
            return float(getattr(dt_manager, meth)())
    raise AttributeError("[tree_area_bridge] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ dt –∏–∑ dt-manager")

def _find_optimizer():
    """
    –ò—â–µ–º —Ä–µ–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –≤ –ø–∞–ø–∫–µ v15_5_tree_opt/src/logic/tree.
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∏–º—ë–Ω –º–æ–¥—É–ª–µ–π –∏ —Ñ—É–Ω–∫—Ü–∏–π.
    """
    module_candidates = [
        ".area_opt.optimize_tree_area",  # –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å!
        ".optimizer",
        ".area_optimizer",
        ".tree_area",
        ".optimize",
        ".",  # —Ç–µ–∫—É—â–∏–π –º–æ–¥—É–ª—å
    ]
    func_candidates = [
        "optimize_tree_area",
        "optimize_area",
        "maximize_area_with_constraints",
    ]

    for mod_name in module_candidates:
        try:
            mod = importlib.import_module(mod_name, package="src.logic.tree")
        except Exception:
            continue
        for fn in func_candidates:
            if hasattr(mod, fn):
                return getattr(mod, fn)
    raise RuntimeError("[tree_area_bridge] –ù–µ –Ω–∞–π–¥–µ–Ω –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä –≤ v15_5_tree_opt/src/logic/tree. "
                       "–î–æ–±–∞–≤—å —Ñ—É–Ω–∫—Ü–∏—é maximize_area_with_constraints / optimize_area(...) –∏–ª–∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–π –µ—ë.")

def run_area_optimization(*,
                          tree: Any,
                          pairs: Any,
                          pendulum: Any,
                          dt_manager: Any,
                          dt_bounds=(0.001, 0.2),
                          optimization_method="SLSQP",
                          max_iterations=1500,
                          show=False) -> Dict[str, Any] | None:
    """
    –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤—ã–∑–æ–≤ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø–ª–æ—â–∞–¥–∏.
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ config/json/config.json
    """
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = _load_optimization_config()
    pairing_config = _load_pairing_config()
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞ (—Å fallback –Ω–∞ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã)
    constraint_distance = config.get('constraint_distance', 1e-3)
    dt_bounds = tuple(config.get('dt_bounds', dt_bounds))
    optimization_method = config.get('method', optimization_method)
    max_iterations = config.get('max_iterations', max_iterations)
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–ø–∞—Ä–∏–≤–∞–Ω–∏—è
    show_pairing_debug = pairing_config.get('show_debug', True)
    dt_grandchildren_factor = pairing_config.get('dt_grandchildren_factor', 0.2)
    max_pairs = pairing_config.get('max_pairs', 4)
    
    # –ü–æ–ª—É—á–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π dt –∏–∑ dt-manager –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –≥—Ä–∞–Ω–∏—Ü
    max_dt_from_manager = _get_current_dt_from_manager(dt_manager)
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≥—Ä–∞–Ω–∏—Ü—ã dt –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º –∏–∑ dt-manager
    dt_lo = max(dt_bounds[0], 0.001)  # –º–∏–Ω–∏–º—É–º 0.001
    dt_hi = min(dt_bounds[1], max_dt_from_manager)  # –º–∞–∫—Å–∏–º—É–º –∏–∑ dt-manager
    adjusted_dt_bounds = (dt_lo, dt_hi)
    
    optimizer = _find_optimizer()

    # –°–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–π –¥–µ–±–∞–≥ - —Ç–æ–ª—å–∫–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    if show:
        print(f"[AreaOpt] üîß –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–ª–æ—â–∞–¥–∏ –¥–µ—Ä–µ–≤–∞...")
        print(f"   –ú–µ—Ç–æ–¥: {optimization_method}, –ò—Ç–µ—Ä–∞—Ü–∏–π: {max_iterations}")
        print(f"   –ü–∞—Ä –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {len(pairs)}")

    # –ü—Ä–æ–±—É–µ–º –≥–∏–±–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å ‚Äî –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —Ç–≤–æ–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π –ø—Ä–∏–Ω–∏–º–∞–ª–∏ –∏–º–µ–Ω–Ω–æ —Ç–∞–∫–∏–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    kwargs = dict(
        tree=tree,
        pairs=pairs,
        optimization_method=optimization_method,
        pendulum=pendulum,
        dt_bounds=adjusted_dt_bounds,  # —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã
        max_iterations=max_iterations,
        show=show,
        constraint_distance=constraint_distance,  # –ø–µ—Ä–µ–¥–∞–µ–º constraint_distance –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
    )

    result = optimizer(**kwargs)  # –ø—É—Å—Ç—å —Ä–µ–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤–µ—Ä–Ω—ë—Ç dict / –æ–±—ä–µ–∫—Ç ‚Äî –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ None
    if result is None:
        print(f"[AreaOpt] ‚ùå –û–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä –≤–µ—Ä–Ω—É–ª None - –≤–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        return None
    
    # ==== –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–û–í ====
    print(f"\n[AreaOpt] üìä –î–ï–¢–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò:")
    print(f"   {'='*50}")
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    try:
        success = result.get("success", False)
        print(f"   ‚úÖ –£—Å–ø–µ—Ö –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {success}")
        
        # –ü–ª–æ—â–∞–¥–∏
        original_area = result.get("original_area", result.get("start_area", result.get("initial_area", None)))
        optimized_area = result.get("optimized_area", result.get("best_area", None))
        
        if original_area is not None and optimized_area is not None:
            delta = optimized_area - original_area
            rel = (delta / max(abs(original_area), 1e-12)) * 100.0
            print(f"   üìà –ü–ª–æ—â–∞–¥—å: {original_area:.6e} ‚Üí {optimized_area:.6e}")
            print(f"   üìä –ò–∑–º–µ–Ω–µ–Ω–∏–µ: Œî={delta:+.3e} ({rel:+.2f}%)")
        
        # –£–ª—É—á—à–µ–Ω–∏–µ
        improvement = result.get("improvement", None)
        improvement_percent = result.get("improvement_percent", None)
        if improvement is not None:
            print(f"   üéØ –ê–±—Å–æ–ª—é—Ç–Ω–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ: {improvement:.6e}")
        if improvement_percent is not None:
            print(f"   üìä –ü—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ: {improvement_percent:+.2f}%")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞—Ä –∏ –∫–æ–Ω—Å—Ç—Ä–µ–π–Ω—Ç–æ–≤
        pairs_count = result.get("pairs_count", None)
        constraints_count = result.get("constraints_count", None)
        if pairs_count is not None:
            print(f"   üîó –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä: {pairs_count}")
        if constraints_count is not None:
            print(f"   ‚ö° –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Å—Ç—Ä–µ–π–Ω—Ç–æ–≤: {constraints_count}")
        
        # –ù–∞—Ä—É—à–µ–Ω–∏—è –∫–æ–Ω—Å—Ç—Ä–µ–π–Ω—Ç–æ–≤
        constraint_violations = result.get("constraint_violations", {})
        if constraint_violations:
            violations = constraint_violations.get("violations", [])
            if violations:
                print(f"   ‚ö†Ô∏è  –ù–∞—Ä—É—à–µ–Ω–∏—è –∫–æ–Ω—Å—Ç—Ä–µ–π–Ω—Ç–æ–≤:")
                for i, violation in enumerate(violations):
                    print(f"      –ö–æ–Ω—Å—Ç—Ä–µ–π–Ω—Ç {i+1}: {violation:.6e}")
                max_violation = max(violations)
                print(f"   üö® –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û–ï –ù–ê–†–£–®–ï–ù–ò–ï: {max_violation:.6e}")
                print(f"   üìè –û–∂–∏–¥–∞–µ–º—ã–π constraint_distance: 1e-3")
                if max_violation > 1e-3:
                    print(f"   ‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–∞—Ä—É—à–µ–Ω–∏–µ –±–æ–ª—å—à–µ –æ–∂–∏–¥–∞–µ–º–æ–≥–æ constraint_distance!")
            else:
                print(f"   ‚úÖ –ù–∞—Ä—É—à–µ–Ω–∏–π –∫–æ–Ω—Å—Ç—Ä–µ–π–Ω—Ç–æ–≤ –Ω–µ—Ç")
        else:
            print(f"   ‚úÖ –ù–∞—Ä—É—à–µ–Ω–∏–π –∫–æ–Ω—Å—Ç—Ä–µ–π–Ω—Ç–æ–≤ –Ω–µ—Ç")
        
        # –î–∏—Å—Ç–∞–Ω—Ü–∏–∏ –ø–æ –ø–∞—Ä–∞–º (–∏–∑ constraint_violations)
        if constraint_violations:
            print(f"   üìè –î–∏—Å—Ç–∞–Ω—Ü–∏–∏ –ø–æ –ø–∞—Ä–∞–º:")
            pair_distances = []
            for i in range(len(constraint_violations)):
                if isinstance(constraint_violations.get(i), dict):
                    distance = constraint_violations[i].get('distance', None)
                    if distance is not None:
                        pair_distances.append(distance)
                        print(f"      –ü–∞—Ä–∞ {i+1}: {distance:.6e}")
            
            if pair_distances:
                min_distance = min(pair_distances)
                max_distance = max(pair_distances)
                print(f"   üìä –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è: {min_distance:.6e}")
                print(f"   üìä –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è: {max_distance:.6e}")
                print(f"   üìä –°—Ä–µ–¥–Ω—è—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è: {sum(pair_distances)/len(pair_distances):.6e}")
            else:
                print(f"   üìè –î–∏—Å—Ç–∞–Ω—Ü–∏–∏ –ø–æ –ø–∞—Ä–∞–º: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ constraint_violations")
        else:
            print(f"   üìè –î–∏—Å—Ç–∞–Ω—Ü–∏–∏ –ø–æ –ø–∞—Ä–∞–º: constraint_violations –ø—É—Å—Ç")
        
        # –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ dt
        optimized_dt_vector = result.get("optimized_dt_vector", None)
        if optimized_dt_vector is not None:
            print(f"   ‚è±Ô∏è  –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ dt:")
            print(f"      –î–µ—Ç–∏ (0:4): {optimized_dt_vector[:4]}")
            print(f"      –í–Ω—É–∫–∏ (4:12): {optimized_dt_vector[4:12]}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ dt –Ω–µ –ø—Ä–µ–≤—ã—à–∞—é—Ç max_dt –∏–∑ dt-manager
            dt_children = optimized_dt_vector[:4]
            dt_grandchildren = optimized_dt_vector[4:12]
            
            max_dt_children = max(abs(dt) for dt in dt_children)
            max_dt_grandchildren = max(abs(dt) for dt in dt_grandchildren)
            
            print(f"   üîç –ê–Ω–∞–ª–∏–∑ dt –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ max_dt –∏–∑ dt-manager:")
            print(f"      –ú–∞–∫—Å. dt –¥–µ—Ç–µ–π: {max_dt_children:.6e} (max_dt: {max_dt_from_manager:.6e})")
            print(f"      –ú–∞–∫—Å. dt –≤–Ω—É–∫–æ–≤: {max_dt_grandchildren:.6e} (max_dt: {max_dt_from_manager:.6e})")
            
            if max_dt_children > max_dt_from_manager:
                print(f"      ‚ö†Ô∏è  dt –¥–µ—Ç–µ–π –ø—Ä–µ–≤—ã—à–∞—é—Ç max_dt –∏–∑ dt-manager!")
            if max_dt_grandchildren > max_dt_from_manager:
                print(f"      ‚ö†Ô∏è  dt –≤–Ω—É–∫–æ–≤ –ø—Ä–µ–≤—ã—à–∞—é—Ç max_dt –∏–∑ dt-manager!")
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–µ—Ç–æ–¥–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        optimization_result = result.get("optimization_result", None)
        if optimization_result is not None:
            print(f"   üîß –ú–µ—Ç–æ–¥ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {optimization_method}")
            print(f"   üîÑ –ò—Ç–µ—Ä–∞—Ü–∏–π –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {getattr(optimization_result, 'nit', 'N/A')}")
            print(f"   üéØ –°—Ç–∞—Ç—É—Å: {getattr(optimization_result, 'success', 'N/A')}")
            if hasattr(optimization_result, 'message'):
                print(f"   üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: {optimization_result.message}")
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")
        import traceback
        print(f"   üîç –ü–æ–¥—Ä–æ–±–Ω—ã–π —Ç—Ä–µ–π—Å–±—ç–∫:")
        traceback.print_exc()
    
    print(f"   {'='*50}\n")
    
    # –í–ê–ñ–ù–û: –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ
    if result is not None and result.get("success", False):
        print(f"[AreaOpt] ‚úÖ –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
        return result
    else:
        print(f"[AreaOpt] ‚ùå –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None")
        return None
