#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø–æ –ø–ª–æ—â–∞–¥–∏ –≤ –ø–∞–π–ø–ª–∞–π–Ω —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ—Ä–µ–≤–∞ –∏–∑ –ø–∞—Ä.
"""

import json
import numpy as np
from src.logic.tree.pairs.create_tree_from_pairs import create_tree_from_pairs
from src.logic.tree.spore_tree import SporeTree
from src.logic.tree.spore_tree_config import SporeTreeConfig
from src.logic.pendulum import PendulumSystem

def test_area_optimization_integration():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø–æ –ø–ª–æ—â–∞–¥–∏ –≤ –ø–∞–π–ø–ª–∞–π–Ω."""
    print("üß™ –¢–ï–°–¢ –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò –ü–û –ü–õ–û–©–ê–î–ò")
    print("=" * 60)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    with open('config/json/config.json', 'r') as f:
        config = json.load(f)
    
    print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
    print(f"   area_optimization.enabled: {config.get('tree', {}).get('area_optimization', {}).get('enabled', False)}")
    
    # –°–æ–∑–¥–∞–µ–º –º–∞—è—Ç–Ω–∏–∫
    pendulum = PendulumSystem(config)
    print("‚úÖ PendulumSystem —Å–æ–∑–¥–∞–Ω")
    
    # –°–æ–∑–¥–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ –¥–µ—Ä–µ–≤–æ
    tree_config = SporeTreeConfig(
        dt_base=config.get('pendulum', {}).get('dt', 0.05),
        dt_grandchildren_factor=config.get('tree', {}).get('dt_grandchildren_factor', 0.1),
        show_debug=False
    )
    
    original_tree = SporeTree(
        pendulum=pendulum,
        config=tree_config,
        auto_create=True,
        show=False
    )
    print("‚úÖ –ò—Å—Ö–æ–¥–Ω–æ–µ –¥–µ—Ä–µ–≤–æ —Å–æ–∑–¥–∞–Ω–æ")
    print(f"   –î–µ—Ç–µ–π: {len(original_tree.children)}")
    print(f"   –í–Ω—É–∫–æ–≤: {len(original_tree.grandchildren)}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π –ø–æ –ø–ª–æ—â–∞–¥–∏
    print("\nüöÄ –ó–∞–ø—É—Å–∫ –ø–∞–π–ø–ª–∞–π–Ω–∞ '–ø–æ–∏—Å–∫ –ø–∞—Ä ‚Üí —Å–±–æ—Ä –¥–µ—Ä–µ–≤–∞ ‚Üí –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–ª–æ—â–∞–¥–∏'...")
    
    result = create_tree_from_pairs(
        tree=original_tree,
        pendulum=pendulum,
        config=config,
        show=True
    )
    
    if result and result['success']:
        print("\n‚úÖ –ü–∞–π–ø–ª–∞–π–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        stats = result['stats']
        area_opt = result.get('area_optimization')
        
        print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–ê–ô–ü–õ–ê–ô–ù–ê:")
        print(f"   –ù–∞–π–¥–µ–Ω–æ –ø–∞—Ä: {stats['pairs_found']}")
        print(f"   –°–ø–∞—Ä–µ–Ω–æ –≤–Ω—É–∫–æ–≤: {stats['paired_grandchildren']}/{stats['total_grandchildren']}")
        print(f"   –ò–∑–º–µ–Ω–µ–Ω–æ –≤—Ä–µ–º–µ–Ω: {stats['times_changed']}")
        
        if area_opt:
            if area_opt.get('success'):
                print(f"\nüî∑ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò –ü–û –ü–õ–û–©–ê–î–ò:")
                print(f"   –ò—Å—Ö–æ–¥–Ω–∞—è –ø–ª–æ—â–∞–¥—å: {area_opt['original_area']:.6f}")
                print(f"   –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø–ª–æ—â–∞–¥—å: {area_opt['optimized_area']:.6f}")
                print(f"   –£–ª—É—á—à–µ–Ω–∏–µ: {area_opt['area_improvement']:.6f}")
                print(f"   –£–ª—É—á—à–µ–Ω–∏–µ (%): {area_opt['area_improvement_percent']:.2f}%")
                print(f"   –ö–æ–Ω—Å—Ç—Ä–µ–π–Ω—Ç—ã —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω—ã: {area_opt['constraints_satisfied']}")
                print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Å—Ç—Ä–µ–π–Ω—Ç–æ–≤: {area_opt['constraints_count']}")
                print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä: {area_opt['pairs_count']}")
            else:
                print(f"\n‚ö†Ô∏è –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–æ –ø–ª–æ—â–∞–¥–∏ –Ω–µ —É–¥–∞–ª–∞—Å—å")
        else:
            print(f"\n‚ÑπÔ∏è –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–æ –ø–ª–æ—â–∞–¥–∏ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–ª–∞—Å—å (enabled=false)")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–µ—Ä–µ–≤–æ —Å–æ–∑–¥–∞–Ω–æ
        optimized_tree = result['optimized_tree']
        if optimized_tree:
            print(f"\nüå≥ –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–û–ï –î–ï–†–ï–í–û:")
            print(f"   –î–µ—Ç–µ–π: {len(optimized_tree.children)}")
            print(f"   –í–Ω—É–∫–æ–≤: {len(optimized_tree.grandchildren)}")
            print(f"   –¢–∏–ø: {type(optimized_tree).__name__}")
        
    else:
        print(f"\n‚ùå –ü–∞–π–ø–ª–∞–π–Ω –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω:")
        if result:
            print(f"   –û—à–∏–±–∫–∞: {result.get('error', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
        else:
            print(f"   –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞")
    
    print(f"\nüéâ –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù!")

if __name__ == "__main__":
    test_area_optimization_integration()
