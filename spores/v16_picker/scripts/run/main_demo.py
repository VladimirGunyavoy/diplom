"""
–î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø UI_SETUP
====================

–≠—Ç–æ—Ç —Ñ–∞–π–ª –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞ UI_setup –¥–ª—è —É–¥–æ–±–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ UI:
- –í—Å—è –ª–æ–≥–∏–∫–∞ UI –∏–Ω–∫–∞–ø—Å—É–ª–∏—Ä–æ–≤–∞–Ω–∞ –≤ –æ–¥–Ω–æ–º –∫–ª–∞—Å—Å–µ
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
- –ì–æ—Ç–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥
- –ü—Ä–æ—Å—Ç–æ–π –∏–º–ø–æ—Ä—Ç –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–¥–Ω–æ–π –∫–æ–º–∞–Ω–¥–æ–π
- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å UI Manager –∏ Color Manager

–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:
‚úÖ –ú–∏–Ω–∏–º—É–º –∫–æ–¥–∞ –≤ –¥–µ–º–æ —Å–∫—Ä–∏–ø—Ç–∞—Ö
‚úÖ –ì–æ—Ç–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ç–∏–ø–∏—á–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ–º–∏ UI —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
‚úÖ –õ–µ–≥–∫–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏
‚úÖ –ö–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤–æ –≤—Å–µ—Ö –¥–µ–º–æ
"""

import sys
import os
from ursina import *
import numpy as np
import time
from colorsys import hsv_to_rgb
from matplotlib.colors import LinearSegmentedColormap
import matplotlib.pyplot as plt
import json
import collections.abc

# --- –ü–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –≥–ª—É–±–æ–∫–æ–≥–æ —Å–ª–∏—è–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–æ–≤ ---
def deep_merge(d, u):
    """–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç —Å–ª–æ–≤–∞—Ä–∏."""
    for k, v in u.items():
        if isinstance(v, collections.abc.Mapping):
            d[k] = deep_merge(d.get(k, {}), v)
        else:
            d[k] = v
    return d

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—É—Ç–µ–π –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ ---
# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞ 'spores/9', —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –¥–µ–ª–∞—Ç—å –∏–º–ø–æ—Ä—Ç—ã –æ—Ç 'src'
script_dir = os.path.dirname(os.path.abspath(__file__))
# –ü–æ–¥–Ω–∏–º–∞–µ–º—Å—è –æ—Ç spores/9/scripts/run –¥–æ spores/9
project_root = os.path.abspath(os.path.join(script_dir, '..', '..'))
if project_root not in sys.path:
    sys.path.append(project_root)

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ---
# –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥
with open(os.path.join(project_root, 'config', 'json', 'config.json'), 'r') as f:
    config = json.load(f)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥ —Å —Ä–∞–∑–º–µ—Ä–∞–º–∏ –∏ –æ–±—ä–µ–¥–∏–Ω—è–µ–º
with open(os.path.join(project_root, 'config', 'json', 'sizes.json'), 'r') as f:
    sizes_config = json.load(f)
    config = deep_merge(config, sizes_config)

# ColorManager –∑–∞–≥—Ä—É–∂–∞–µ—Ç —Å–≤–æ–π –∫–æ–Ω—Ñ–∏–≥ 'colors.json' —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ

# --- –û—Å–Ω–æ–≤–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã –∏–∑ –Ω–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ ---
from src.visual.spawn_area_visualizer import SpawnAreaVisualizer
from src.logic.spawn_area import SpawnArea as SpawnAreaLogic
from src.logic.cost_function import CostFunction
from src.visual.cost_visualizer import CostVisualizer
from src.managers.color_manager import ColorManager
from src.visual.scene_setup import SceneSetup
from src.visual.frame import Frame
from src.managers.zoom_manager import ZoomManager
from src.utils.scalable import Scalable, ScalableFrame, ScalableFloor
from src.logic.pendulum import PendulumSystem
from src.managers.window_manager import WindowManager
from src.core.spore import Spore
from src.managers.spore_manager import SporeManager
from src.managers.param_manager import ParamManager
from src.visual.ui_setup import UI_setup
from src.managers.angel_manager import AngelManager
from src.managers.input_manager import InputManager
from src.managers.update_manager import UpdateManager
from src.managers.spawn_area_manager import SpawnAreaManager
from src.managers.manual_spore_manager import ManualSporeManager  # v13_manual: –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è —Å–ø–æ—Ä
from src.utils.debug_output import init_debug_output
from src.managers.dt_manager import DTManager

print("=== –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø UI_SETUP ===")
print("üé® –ì–æ—Ç–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ UI –¥–ª—è –¥–µ–º–æ —Å–∫—Ä–∏–ø—Ç–æ–≤")
print("üì¶ –ò–Ω–∫–∞–ø—Å—É–ª—è—Ü–∏—è –≤—Å–µ–π –ª–æ–≥–∏–∫–∏ –≤ –æ–¥–Ω–æ–º –∫–ª–∞—Å—Å–µ")
print("üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏")
print("=" * 40)

# ===== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –û–¢–õ–ê–î–û–ß–ù–û–ì–û –í–´–í–û–î–ê =====
init_debug_output(config)
print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

# ===== –ù–ê–°–¢–†–û–ô–ö–ò v13_manual =====
USE_SPAWN_AREA = False  # v13_manual: –æ—Ç–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π spawn area –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è —Å–ø–æ—Ä

# ===== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø =====
app = Ursina()

# ===== –°–û–ó–î–ê–ù–ò–ï –ú–ï–ù–ï–î–ñ–ï–†–û–í =====
color_manager = ColorManager()

# ===== –°–û–ó–î–ê–ù–ò–ï –°–¶–ï–ù–´ –ò –î–†–£–ì–ò–• –°–ò–°–¢–ï–ú =====
scene_config = config['scene_setup']
scene_setup = SceneSetup(
    init_position=scene_config['init_position'], 
    init_rotation_x=scene_config['init_rotation_x'], 
    init_rotation_y=scene_config['init_rotation_y'], 
    color_manager=color_manager
)
frame = Frame(
    color_manager=color_manager,
    origin_scale=config.get('frame', {}).get('origin_scale', 0.05)
)
scene_setup.frame = frame
window_manager = WindowManager(monitor='left')

# ===== –ù–ê–°–¢–†–û–ô–ö–ê UI –ü–û–ó–ò–¶–ò–ô –î–õ–Ø –¢–ï–ö–£–©–ï–ì–û –ú–û–ù–ò–¢–û–†–ê =====
from src.visual.ui_constants import UI_POSITIONS
UI_POSITIONS.set_monitor(window_manager.get_current_monitor())
print(f"   ‚úì UI –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∞: {window_manager.get_current_monitor()}")

print("\nüåç 2. –°—Ü–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∞")

# ===== –°–û–ó–î–ê–ù–ò–ï ZOOM MANAGER =====
zoom_manager = ZoomManager(scene_setup, color_manager=color_manager)

# ===== –£–°–õ–û–í–ù–û–ï –°–û–ó–î–ê–ù–ò–ï ANGEL MANAGER =====
# –°–æ–∑–¥–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ cost_surface –∏–ª–∏ angels –≤–∫–ª—é—á–µ–Ω—ã –≤ –∫–æ–Ω—Ñ–∏–≥–µ
cost_enabled = config.get('cost_surface', {}).get('enabled', False)
angels_enabled = config.get('angel', {}).get('show_angels', False)

if cost_enabled or angels_enabled:
    angel_manager = AngelManager(color_manager=color_manager, zoom_manager=zoom_manager, config=config)
    print("   ‚úì Angel Manager —Å–æ–∑–¥–∞–Ω")
else:
    angel_manager = None
    print("   ‚è≠Ô∏è Angel Manager –ø—Ä–æ–ø—É—â–µ–Ω (cost_surface –∏ angels –æ—Ç–∫–ª—é—á–µ–Ω—ã)")

print("   ‚úì Zoom Manager —Å–æ–∑–¥–∞–Ω")

# –†–ï–ì–ò–°–¢–†–ò–†–£–ï–ú FRAME –í ZOOM MANAGER - –£–ë–ò–†–ê–ï–ú –≠–¢–û
# zoom_manager.register_object(frame, name='frame')

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –¥–æ—á–µ—Ä–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã Frame –≤ ZoomManager
for i, entity in enumerate(frame.entities):
    zoom_manager.register_object(entity, name=f'frame_child_{i}')


# --- –°–û–ó–î–ê–ù–ò–ï –ú–ê–°–®–¢–ê–ë–ò–†–£–ï–ú–û–ì–û –ü–û–õ–ê ---
floor = ScalableFloor(
    model='quad',
    scale=config['scene']['floor_scale'],
    rotation_x=90,
    color=color_manager.get_color('scene', 'floor'),
    texture='white_cube',
    texture_scale=(40, 40)
)
zoom_manager.register_object(floor, name='floor')
# ------------------------------------

# ===== –°–û–ó–î–ê–ù–ò–ï PARAM MANAGER =====
settings_param = ParamManager(0, show=False, color_manager=color_manager)

print("   ‚úì Param Manager —Å–æ–∑–¥–∞–Ω")

# ===== –°–û–ó–î–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´ –ú–ê–Ø–¢–ù–ò–ö–ê =====
pendulum_config = config['pendulum']
pendulum = PendulumSystem(
    damping=pendulum_config['damping'],
    max_control=pendulum_config['max_control']
)

# ===== –°–û–ó–î–ê–ù–ò–ï –¢–ï–°–¢–û–í–´–• –°–ü–û–† =====
print("\nüåü 4. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–ø–æ—Ä...")

goal_position = config['spore']['goal_position']
goal = Spore(
    pendulum=pendulum,
    dt=pendulum_config['dt'],
    scale=config['spore']['scale'],
    position=(goal_position[0], 0, goal_position[1]),
    goal_position=goal_position,
    is_goal=True,
    color_manager=color_manager
)

spore_config = config['spore']
initial_position_3d = (
    spore_config['initial_position'][0], 
    0, 
    spore_config['initial_position'][2] if len(spore_config['initial_position']) > 2 else spore_config['initial_position'][1]
)
# spore = Spore(
#     pendulum=pendulum,
#     dt=pendulum_config['dt'],
#     goal_position=goal_position,
#     scale=config['spore']['scale'],
#     link_thickness=spore_config.get('link_thickness', 1),
#     position=initial_position_3d,
#     color_manager=color_manager,
#     config=spore_config
# )

# ===== –°–û–ó–î–ê–ù–ò–ï –û–ö–†–£–ñ–ï–ù–ò–Ø (SPAWN AREA –ò COST SURFACE) =====
spawn_area_config = config['spawn_area']

# v13_manual: —É—Å–ª–æ–≤–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ spawn area
if USE_SPAWN_AREA:
    # –°–æ–∑–¥–∞–µ–º –ª–æ–≥–∏–∫—É –æ–±–ª–∞—Å—Ç–∏ —Å–ø–∞–≤–Ω–∞
    spawn_area_logic = SpawnAreaLogic(
        focus1=spore.logic.position_2d,
        focus2=goal.logic.position_2d,
        eccentricity=spawn_area_config['eccentricity']
    )

    # –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é –æ–±–ª–∞—Å—Ç–∏ —Å–ø–∞–≤–Ω–∞
    spawn_area_visualizer = SpawnAreaVisualizer(
        spawn_area=spawn_area_logic,
        resolution=spawn_area_config['resolution'],
        color=color_manager.get_color('spawn_area', 'default')
    )
    print("   ‚úì Spawn Area —Å–æ–∑–¥–∞–Ω–∞")
else:
    spawn_area_logic = None
    spawn_area_visualizer = None  
    print("   ‚è≠Ô∏è Spawn Area –æ—Ç–∫–ª—é—á–µ–Ω–∞ (v13_manual: —Ä—É—á–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–ø–æ—Ä)")

# ===== –°–û–ó–î–ê–ù–ò–ï –ú–ï–ù–ï–î–ñ–ï–†–ê –°–ü–û–† =====
spore_manager = SporeManager(
    pendulum=pendulum, 
    zoom_manager=zoom_manager, 
    settings_param=settings_param, 
    color_manager=color_manager,
    angel_manager=angel_manager,
    config=config,
    spawn_area=spawn_area_logic  # –ú–æ–∂–µ—Ç –±—ã—Ç—å None
)

# --- –£–°–õ–û–í–ù–û–ï –°–û–ó–î–ê–ù–ò–ï –ü–û–í–ï–†–•–ù–û–°–¢–ò –°–¢–û–ò–ú–û–°–¢–ò (Cost) ---
if cost_enabled:
    # –°–æ–∑–¥–∞–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π Entity –¥–ª—è –≤—Å–µ–π –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
    cost_surface_parent = Scalable()
    
    # –°–æ–∑–¥–∞–µ–º –ª–æ–≥–∏–∫—É - –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –º–∞—Å—Å–∏–≤–∞
    goal_pos_2d = np.empty(2, dtype=float)
    goal_pos_2d[0] = goal.position[0]
    goal_pos_2d[1] = goal.position[2]
    cost_logic = CostFunction(
        goal_position_2d=goal_pos_2d,
    )
    # –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é
    cost_surface = CostVisualizer(
        cost_function=cost_logic,
        spawn_area=spawn_area_logic, # <-- –ü–µ—Ä–µ–¥–∞–µ–º –ª–æ–≥–∏—á–µ—Å–∫–∏–π –æ–±—ä–µ–∫—Ç
        parent_entity=cost_surface_parent, # <--- –£–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤–æ–≥–æ —Ä–æ–¥–∏—Ç–µ–ª—è
        color_manager=color_manager,
        config=config['cost_surface']
    )
    
    # –ü–µ—Ä–µ–¥–∞–µ–º –ª–æ–≥–∏—á–µ—Å–∫–∏–π –æ–±—ä–µ–∫—Ç –≤ angel_manager –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if angel_manager:
        angel_manager.cost_function = cost_logic
    
    print("   ‚úì Cost Surface —Å–æ–∑–¥–∞–Ω–∞")
else:
    cost_surface = None
    cost_logic = None
    cost_surface_parent = None
    print("   ‚è≠Ô∏è Cost Surface –ø—Ä–æ–ø—É—â–µ–Ω–∞ (cost_surface.enabled = false)")

# ===== –ù–ê–°–¢–†–û–ô–ö–ê UI –ß–ï–†–ï–ó UI_SETUP –° –ö–û–õ–ë–≠–ö–ê–ú–ò =====
print("\nüìä 3. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª–Ω–æ–≥–æ UI —á–µ—Ä–µ–∑ UI_setup —Å –∫–æ–ª–±—ç–∫–∞–º–∏...")

# --- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø UI_SETUP ---
ui_setup = UI_setup(color_manager=color_manager)

# ===== –°–û–ó–î–ê–ù–ò–ï SPAWN AREA MANAGER =====
# v13_manual: —É—Å–ª–æ–≤–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ spawn area manager
if USE_SPAWN_AREA:
    spawn_area_manager = SpawnAreaManager(
        spawn_area_logic=spawn_area_logic,
        spawn_area_visualizer=spawn_area_visualizer,
        cost_visualizer=cost_surface  # –ú–æ–∂–µ—Ç –±—ã—Ç—å None
    )
    print("   ‚úì Spawn Area Manager —Å–æ–∑–¥–∞–Ω")
else:
    spawn_area_manager = None
    print("   ‚è≠Ô∏è Spawn Area Manager –æ—Ç–∫–ª—é—á–µ–Ω (v13_manual: —Ä—É—á–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–ø–æ—Ä)")

# ===== –°–û–ó–î–ê–ù–ò–ï MANUAL SPORE MANAGER =====
# v13_manual: –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è —Å–ø–æ—Ä —Å –ø—Ä–µ–≤—å—é
manual_spore_manager = ManualSporeManager(
    spore_manager=spore_manager,
    zoom_manager=zoom_manager, 
    pendulum=pendulum,
    color_manager=color_manager,
    config=config
)

spore_manager._manual_spore_manager_ref = manual_spore_manager

dt_manager = DTManager(config, pendulum)
dt_manager.spore_manager = spore_manager  # üÜï –°–≤—è–∑—ã–≤–∞–µ–º —Å SporeManager

# ===== –°–û–ó–î–ê–ù–ò–ï INPUT MANAGER =====
input_manager = InputManager(
    scene_setup=scene_setup,
    zoom_manager=zoom_manager,
    spore_manager=spore_manager,
    spawn_area_manager=spawn_area_manager,  # –ú–æ–∂–µ—Ç –±—ã—Ç—å None
    param_manager=settings_param,
    ui_setup=ui_setup,
    angel_manager=angel_manager,
    cost_visualizer=cost_surface,
    manual_spore_manager=manual_spore_manager,  # v13_manual: –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –õ–ö–ú
    dt_manager=dt_manager
)

# –í–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º InputManager –¥–ª—è —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞
scene_setup.enable_input_manager_mode(True)

# –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—É—Ä—Å–æ—Ä –≤ –∑–∞—Ö–≤–∞—á–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
scene_setup._update_cursor_state()

# –î—É–±–ª–∏—Ä—É—é—â–∞—è —è–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ ‚Äî —á—Ç–æ–±—ã –∏—Å–∫–ª—é—á–∏—Ç—å —Ä–∞—Å—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
dt_manager.subscribe_on_change(input_manager._on_dt_changed)
print(f"[MAIN] subscribed InputManager._on_dt_changed to DTManager id={id(dt_manager)}")

# (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –º–æ–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å –∏ PredictionManager –Ω–∞–ø—Ä—è–º—É—é –Ω–∞ —Å–æ–±—ã—Ç–∏–µ, —á—Ç–æ–±—ã –æ–Ω —Ç–æ–ª—å–∫–æ —É–∫–æ—Ä–∞—á–∏–≤–∞–ª —Å–≤–æ–∏ –ª–∏–Ω–∫–∏
if hasattr(manual_spore_manager, 'prediction_manager') and manual_spore_manager.prediction_manager:
    prediction_manager = manual_spore_manager.prediction_manager
    dt_manager.subscribe_on_change(lambda: prediction_manager.update_links_max_length(dt_manager.get_max_link_length()))
    print(f"[MAIN] subscribed PredictionManager.max_len to DTManager id={id(dt_manager)}")

# –û—Ç–ª–∞–¥–∫–∞: –ø–æ–∫–∞–∂–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∏ ID
dt_manager.debug_subscribers()
print(f"[MAIN] dt_manager id={id(dt_manager)}, input_manager.dt_manager id={id(input_manager.dt_manager)}")

# ===== –°–û–ó–î–ê–ù–ò–ï UPDATE MANAGER =====
update_manager = UpdateManager(
    scene_setup=scene_setup,
    zoom_manager=zoom_manager,
    param_manager=settings_param,
    ui_setup=ui_setup,
    input_manager=input_manager,
    manual_spore_manager=manual_spore_manager  # v13_manual: –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—É—Ä—Å–æ—Ä–∞ –ø—Ä–µ–≤—å—é
)

# –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Å –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö

# ===== –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ì–û LOOK POINT =====
def get_corrected_look_point():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π look point —Å —É—á–µ—Ç–æ–º –∑—É–º–∞ –ø–æ —Ñ–æ—Ä–º—É–ª–µ (look_point - frame_origin) / scale"""
    # –ü–æ–ª—É—á–∞–µ–º —Å—ã—Ä—É—é —Ç–æ—á–∫—É –≤–∑–≥–ª—è–¥–∞
    raw_x, raw_z = zoom_manager.identify_invariant_point()
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏—é origin_cube —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è
    try:
        origin_x = zoom_manager.scene_setup.frame.origin_cube.position.x
        origin_z = zoom_manager.scene_setup.frame.origin_cube.position.z
    except:
        origin_x, origin_z = 0.0, 0.0
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–æ—Ä–º—É–ª—É –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏
    scale = zoom_manager.a_transformation
    corrected_x = (raw_x - origin_x) / scale
    corrected_z = (raw_z - origin_z) / scale
    
    return corrected_x, corrected_z

data_providers = {
    'get_spore_count': lambda: len(spore_manager.objects),
    'get_camera_info': lambda: (
        scene_setup.player.position.x,
        scene_setup.player.position.y,
        scene_setup.player.position.z,
        scene_setup.player.camera_pivot.rotation_x,
        scene_setup.player.rotation_y,
        0  # rot_z
    ),
    'get_cursor_status': lambda: scene_setup.cursor_locked,
    'get_look_point_info': lambda: (
        *get_corrected_look_point(),  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
        float(getattr(zoom_manager.scene_setup.frame.x_axis, 'scale_x', getattr(zoom_manager.scene_setup.frame.x_axis, 'scale', 1.0))),
        getattr(zoom_manager, 'spores_scale', 1)
    ),
    'get_param_info': lambda: (settings_param.param, settings_param.show),
    'get_candidate_info': lambda: (spore_manager.min_radius, spore_manager.candidate_count),
    'get_dt_info': lambda: dt_manager.get_stats()
}

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤–µ—Å—å UI –æ–¥–Ω–æ–π –∫–æ–º–∞–Ω–¥–æ–π, –ø–µ—Ä–µ–¥–∞–≤–∞—è –∫–æ–ª–±—ç–∫–∏
ui_elements = ui_setup.setup_demo_ui(data_providers, spawn_area=spawn_area_logic)  # –ú–æ–∂–µ—Ç –±—ã—Ç—å None

# ===== –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –û–ë–™–ï–ö–¢–û–í –í –ú–ï–ù–ï–î–ñ–ï–†–ê–• =====
spore_manager.add_spore(goal)
# spore_manager.add_spore(spore)

zoom_manager.register_object(goal)
# zoom_manager.register_object(spore)
# v13_manual: —É—Å–ª–æ–≤–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è spawn area
if spawn_area_visualizer:
    zoom_manager.register_object(spawn_area_visualizer)
# cost_surface –±–æ–ª—å—à–µ –Ω–µ Scalable, —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –µ–≥–æ –æ–±—â–∏–π —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π Entity (–µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
if cost_surface_parent:
    zoom_manager.register_object(cost_surface_parent)

zoom_manager.update_transform()

# ===== –ì–ï–ù–ï–†–ê–¶–ò–Ø –ö–ê–ù–î–ò–î–ê–¢–°–ö–ò–• –°–ü–û–† =====
print("\nüéØ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤...")
spore_manager.generate_candidate_spores()

print(f"   ‚úì –°–æ–∑–¥–∞–Ω–æ —Å–ø–æ—Ä: {len(spore_manager.objects)}")
print(f"   üëª –°–æ–∑–¥–∞–Ω–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤: {spore_manager.candidate_count}")
# print(f"   üìç –°—Ç–∞—Ä—Ç–æ–≤–∞—è —Å–ø–æ—Ä–∞ –≤ –ø–æ–∑–∏—Ü–∏–∏: {spore.position}")
print(f"   üéØ –¶–µ–ª–µ–≤–∞—è —Å–ø–æ—Ä–∞ –≤ –ø–æ–∑–∏—Ü–∏–∏: {goal.position}")
print(f"   üì∑ –ö–∞–º–µ—Ä–∞ –≤ –ø–æ–∑–∏—Ü–∏–∏: {scene_setup.player.position}")

# ===== –§–£–ù–ö–¶–ò–ò –û–ë–ù–û–í–õ–ï–ù–ò–Ø –î–ï–õ–ï–ì–ò–†–û–í–ê–ù–´ UI_SETUP =====
# –í—Å—è –ª–æ–≥–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI —Ç–µ–ø–µ—Ä—å –≤–Ω—É—Ç—Ä–∏ UI_setup!

# ===== –ö–û–ú–ê–ù–î–´ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–ò =====
print("\nüéÆ 5. –ö–æ–º–∞–Ω–¥—ã –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ UI:")
# ui_setup.show_demo_commands_help()
# ui_setup.show_game_commands_help()

# ===== –û–ë–†–ê–ë–û–¢–ö–ê –ö–û–ú–ê–ù–î –î–ï–õ–ï–ì–ò–†–û–í–ê–ù–ê UI_SETUP =====
# –í—Å—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥ UI —Ç–µ–ø–µ—Ä—å –≤–Ω—É—Ç—Ä–∏ UI_setup!

# ===== –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò =====
def update():
    """–ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π."""
    update_manager.update_all()

def input(key):
    """–ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞."""
    # === –û–¢–õ–ê–î–ö–ê ===
    if 'scroll' in key.lower():
        print(f"üåê [DEBUG] –ì–ª–æ–±–∞–ª—å–Ω—ã–π input() –ø–æ–ª—É—á–∏–ª: '{key}'")
    # === –ö–û–ù–ï–¶ –û–¢–õ–ê–î–ö–ò ===
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã—Ö–æ–¥–∞ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞ —Å–∞–º–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É—Ä–æ–≤–Ω–µ,
    # —á—Ç–æ–±—ã –æ–Ω–∞ —Ä–∞–±–æ—Ç–∞–ª–∞ –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è "–∑–∞–º–æ—Ä–æ–∑–∫–∏" –≤–≤–æ–¥–∞.
    if key == 'q' or key == 'escape':
        application.quit()
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ Alt –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∫—É—Ä—Å–æ—Ä–∞ (—Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ñ–æ–∫—É—Å–∞ –æ–∫–Ω–∞)
    if key == 'alt':
        scene_setup.toggle_freeze()
        return

    # –ü–µ—Ä–µ–¥–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π InputManager
    input_manager.handle_input(key)

# ===== –§–ò–ù–ê–õ–¨–ù–ê–Ø –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø =====
print("\nüéâ 6. UI_setup –≥–æ—Ç–æ–≤ –∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏!")
print("\nüìã –î–û–°–¢–£–ü–ù–´–ï –ö–û–ú–ê–ù–î–´:")
print("   –û–ë–´–ß–ù–´–ï: WASD, Space/Shift, –º—ã—à—å, Alt, Q")
print("   –°–ü–û–†–´: F (—ç–≤–æ–ª—é—Ü–∏—è), G (–∫–∞–Ω–¥–∏–¥–∞—Ç), V (—Ä–∞–∑–≤–∏—Ç—å –≤—Å–µ—Ö)")
print("   –£–î–ê–õ–ï–ù–ò–ï: Ctrl+Z (–ø–æ—Å–ª–µ–¥–Ω—è—è –≥—Ä—É–ø–ø–∞), Ctrl+C (–≤—Å–µ)")
print("   ZOOM: E/T (–∫–∞–º–µ—Ä–∞), R (—Å–±—Ä–æ—Å), 1/2 (—Å–ø–æ—Ä—ã)")  
print("   –ö–ê–ù–î–ò–î–ê–¢–´: 5/6 (—Ä–∞–¥–∏—É—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏)")
print("   –í–ò–ó–£–ê–õ–ò–ó–ê–¶–ò–Ø: Y (–∞–Ω–≥–µ–ª—ã), U (–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã)")
print("   –ü–†–ò–ó–†–ê–ö–ò: : (–≤–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –ø—Ä–∏–∑—Ä–∞—á–Ω—É—é —Å–∏—Å—Ç–µ–º—É)")
print("   –í–†–ï–ú–Ø: M (—Å–±—Ä–æ—Å dt), J (—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ dt)")
print("   –î–ï–†–ï–í–¨–Ø: K (—Ä–µ–∂–∏–º), 7/8 (–≥–ª—É–±–∏–Ω–∞), P (–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è)")
print("   –û–¢–õ–ê–î–ö–ê: H (debug toggle), O (–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–µ—Ä–µ–≤–∞)")
print("   –°–ü–†–ê–í–ö–ê: N (–ø–æ–ª–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞), B (—Å–≤–æ–±–æ–¥–Ω—ã–µ –∫–ª–∞–≤–∏—à–∏)")
print("\n" + "="*40)
print("üöÄ –°–ò–ú–£–õ–Ø–¶–ò–Ø –ó–ê–ü–£–©–ï–ù–ê üöÄ")
print("="*40)

# ===== –ó–ê–ü–£–°–ö =====
if __name__ == '__main__':
    app.run() 