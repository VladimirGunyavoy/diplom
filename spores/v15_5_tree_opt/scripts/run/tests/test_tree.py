"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è ControlTreeBuilder —Å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–µ–π —á–µ—Ä–µ–∑ matplotlib.
–§–∞–π–ª: spores/v14_back/scripts/tests/test_control_tree.py

–î–ª—è –∑–∞–ø—É—Å–∫–∞ –∏–∑ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞:
    python scripts/tests/test_control_tree.py
    
–î–ª—è Jupyter notebook - —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤ —è—á–µ–π–∫–∏.
"""

import sys
import os
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.patches as patches
from matplotlib.patches import FancyArrowPatch
# import networkx as nx  # –ù–µ –Ω—É–∂–µ–Ω –¥–ª—è –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤

script_dir = os.path.dirname(os.path.abspath(__file__))
# –ü–æ–¥–Ω–∏–º–∞–µ–º—Å—è –æ—Ç spores/9/scripts/run –¥–æ spores/9
project_root = os.path.abspath(os.path.join(script_dir, '..', '..', '..'))
if project_root not in sys.path:
    sys.path.append(project_root)

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏
from src.logic.pendulum import PendulumSystem
from src.logic.control_tree import ControlTreeBuilder


def visualize_tree(tree_data, title="Control Tree Visualization"):
    """
    –í–∏–∑—É–∞–ª–∏–∑–∏—Ä—É–µ—Ç 8 —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–π —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é matplotlib.
    
    Args:
        tree_data: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –æ—Ç ControlTreeBuilder.build_tree()
        title: –ó–∞–≥–æ–ª–æ–≤–æ–∫ –≥—Ä–∞—Ñ–∏–∫–∞
    """
    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(16, 8))
    
    trajectories = tree_data['trajectories']
    convergence_info = tree_data['convergence_info']
    
    # === –õ–µ–≤—ã–π –≥—Ä–∞—Ñ–∏–∫: –§–∞–∑–æ–≤–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ ===
    ax1.set_title(f"{title}\nPhase Space - 8 Trajectories", fontsize=14, fontweight='bold')
    ax1.set_xlabel('Œ∏ (angle)', fontsize=12)
    ax1.set_ylabel('Œ∏Ãá (angular velocity)', fontsize=12)
    ax1.grid(True, alpha=0.3)
    ax1.axhline(y=0, color='k', linewidth=0.5)
    ax1.axvline(x=0, color='k', linewidth=0.5)
    
    # –¶–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞ –¥–ª—è –≥—Ä—É–ø–ø —Å—Ö–æ–∂–¥–µ–Ω–∏—è
    group_colors = ['red', 'blue', 'green', 'purple']
    
    # –†–∏—Å—É–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é —Ç–æ—á–∫—É
    initial_point = trajectories[0].points[0]
    ax1.scatter(initial_point[0], initial_point[1], 
               c='black', s=200, marker='o',
               edgecolors='white', linewidth=2,
               label='Start', zorder=5)
    
    # –†–∏—Å—É–µ–º –∫–∞–∂–¥—É—é —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—é
    for traj in trajectories:
        color = group_colors[traj.convergence_group]
        
        # –†–∏—Å—É–µ–º –ø–µ—Ä–≤—ã–π —Å–µ–≥–º–µ–Ω—Ç (–Ω–∞—á–∞–ª–æ ‚Üí –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–∞—è)
        p0, p1 = traj.points[0], traj.points[1]
        u1, dt1 = traj.sequence[0]
        
        # –°—Ç–∏–ª—å –ª–∏–Ω–∏–∏: —Å–ø–ª–æ—à–Ω–∞—è –¥–ª—è dt>0, –ø—É–Ω–∫—Ç–∏—Ä –¥–ª—è dt<0
        linestyle = '-' if dt1 > 0 else '--'
        # –¢–æ–ª—â–∏–Ω–∞: —Ç–æ–ª—â–µ –¥–ª—è u>0
        linewidth = 2 if u1 > 0 else 1
        
        ax1.annotate('', xy=p1, xytext=p0,
                    arrowprops=dict(arrowstyle='->', 
                                  color=color, alpha=0.5,
                                  lw=linewidth, ls=linestyle))
        
        # –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–∞—è —Ç–æ—á–∫–∞
        ax1.scatter(p1[0], p1[1], c=color, s=50, alpha=0.6, marker='o')
        
        # –†–∏—Å—É–µ–º –≤—Ç–æ—Ä–æ–π —Å–µ–≥–º–µ–Ω—Ç (–ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–∞—è ‚Üí –∫–æ–Ω–µ—á–Ω–∞—è)
        p2 = traj.points[2]
        u2, dt2 = traj.sequence[1]
        
        linestyle = '-' if dt2 > 0 else '--'
        linewidth = 2 if u2 > 0 else 1
        
        ax1.annotate('', xy=p2, xytext=p1,
                    arrowprops=dict(arrowstyle='->', 
                                  color=color, alpha=0.7,
                                  lw=linewidth, ls=linestyle))
    
    # –û—Ç–º–µ—á–∞–µ–º —Ç–æ—á–∫–∏ —Å—Ö–æ–∂–¥–µ–Ω–∏—è
    for group in convergence_info['groups']:
        mean_point = group['mean_point']
        converged = group['converged']
        
        # –ö–æ–Ω–µ—á–Ω–∞—è —Ç–æ—á–∫–∞ –≥—Ä—É–ø–ø—ã
        marker = '*' if converged else 's'
        size = 150 if converged else 100
        
        ax1.scatter(mean_point[0], mean_point[1], 
                   c=group_colors[group['group_id']], s=size,
                   marker=marker, edgecolors='black', linewidth=1.5,
                   label=f"Group {group['group_id']}", zorder=4)
        
        # –ö—Ä—É–≥ –≤–æ–∫—Ä—É–≥ —Ç–æ—á–∫–∏ —Å—Ö–æ–∂–¥–µ–Ω–∏—è
        if converged:
            circle = plt.Circle(mean_point, 0.02, fill=False,
                              edgecolor=group_colors[group['group_id']], 
                              linewidth=2, linestyle=':', alpha=0.8)
            ax1.add_patch(circle)
    
    ax1.legend(loc='best', fontsize=9)
    
    # === –ü—Ä–∞–≤—ã–π –≥—Ä–∞—Ñ–∏–∫: –î–∏–∞–≥—Ä–∞–º–º–∞ —Å—Ö–æ–∂–¥–µ–Ω–∏—è ===
    ax2.set_title("Convergence Analysis", fontsize=14, fontweight='bold')
    ax2.set_xlabel('Convergence Group', fontsize=12)
    ax2.set_ylabel('Max Deviation', fontsize=12)
    ax2.grid(True, alpha=0.3)
    
    # –ì—Ä–∞—Ñ–∏–∫ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π –¥–ª—è –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã
    group_ids = []
    deviations = []
    colors = []
    
    for group in convergence_info['groups']:
        group_ids.append(group['group_id'])
        deviations.append(group['max_deviation'])
        colors.append(group_colors[group['group_id']])
    
    bars = ax2.bar(group_ids, deviations, color=colors, alpha=0.7, edgecolor='black')
    
    # –õ–∏–Ω–∏—è –ø–æ—Ä–æ–≥–∞ —Å—Ö–æ–∂–¥–µ–Ω–∏—è
    ax2.axhline(y=1e-4, color='red', linestyle='--', alpha=0.5, label='Convergence threshold')
    
    # –ü–æ–¥–ø–∏—Å–∏ –Ω–∞ –±–∞—Ä–∞—Ö
    for i, (bar, group) in enumerate(zip(bars, convergence_info['groups'])):
        height = bar.get_height()
        status = '‚úì' if group['converged'] else '‚úó'
        ax2.text(bar.get_x() + bar.get_width()/2., height,
                f'{status}\n{height:.2e}',
                ha='center', va='bottom', fontsize=9)
    
    ax2.set_xticks(group_ids)
    ax2.set_xticklabels([f'Group {i}' for i in group_ids])
    ax2.set_yscale('log')
    ax2.legend()
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    info_text = f"Converged: {convergence_info['num_converged']}/{convergence_info['total_groups']}"
    ax2.text(0.02, 0.98, info_text, transform=ax2.transAxes,
            fontsize=11, verticalalignment='top',
            bbox=dict(boxstyle='round', facecolor='wheat', alpha=0.5))
    
    plt.tight_layout()
    return fig


def test_basic_tree():
    """–ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–π —Å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–µ–π."""
    
    print("=" * 60)
    print("üå≥ –¢–ï–°–¢ –ü–û–°–¢–†–û–ï–ù–ò–Ø 8 –¢–†–ê–ï–ö–¢–û–†–ò–ô –£–ü–†–ê–í–õ–ï–ù–ò–Ø")
    print("=" * 60)
    
    # 1. –°–æ–∑–¥–∞–µ–º —Å–∏—Å—Ç–µ–º—É –º–∞—è—Ç–Ω–∏–∫–∞
    pendulum_params = {
        'g': 9.81,
        'l': 2.0,
        'm': 1.0,
        'damping': 0.1,
        'max_control': 2.0
    }
    pendulum = PendulumSystem(**pendulum_params)
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –º–∞—è—Ç–Ω–∏–∫–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:")
    print(f"   max_control = ¬±{pendulum.max_control}")
    
    # 2. –°–æ–∑–¥–∞–µ–º –ø–æ—Å—Ç—Ä–æ–∏—Ç–µ–ª—å –¥–µ—Ä–µ–≤–∞ —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ dt
    builder = ControlTreeBuilder(pendulum)
    print(f"\n‚úÖ –°–æ–∑–¥–∞–Ω ControlTreeBuilder")
    print(f"   dt_vector = {builder.dt_vector}")
    
    # 3. –°—Ç—Ä–æ–∏–º —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ –∏–∑ –Ω–∞—á–∞–ª—å–Ω–æ–π —Ç–æ—á–∫–∏
    initial_position = np.array([0.5, 0.0])  # –ù–∞—á–∞–ª—å–Ω—ã–π —É–≥–æ–ª 0.5 —Ä–∞–¥, –Ω—É–ª–µ–≤–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å
    print(f"\nüöÄ –°—Ç—Ä–æ–∏–º 8 —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–π –∏–∑ —Ç–æ—á–∫–∏: ({initial_position[0]:.2f}, {initial_position[1]:.2f})")
    print("-" * 40)
    
    tree_data = builder.build_tree(initial_position)
    
    # 4. –í–∏–∑—É–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print("\nüìä –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–π...")
    fig = visualize_tree(tree_data, title="8 Control Trajectories (Default dt = 0.1)")
    plt.show()
    
    # 5. –í—ã–≤–æ–¥–∏–º —Å–≤–æ–¥–∫—É
    builder.print_summary()
    
    return builder, tree_data


def test_optimized_dt():
    """–¢–µ—Å—Ç —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —à–∞–≥–∞–º–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ —Å—Ö–æ–∂–¥–µ–Ω–∏—è."""
    
    print("\n" + "=" * 60)
    print("üîß –¢–ï–°–¢ –° –ù–ê–°–¢–†–û–ï–ù–ù–´–ú–ò –í–†–ï–ú–ï–ù–ù–´–ú–ò –®–ê–ì–ê–ú–ò")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–µ–º —Å–∏—Å—Ç–µ–º—É
    pendulum = PendulumSystem(damping=0.1, max_control=2.0)
    
    # –°–æ–∑–¥–∞–µ–º –ø–æ—Å—Ç—Ä–æ–∏—Ç–µ–ª—å —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º–∏ dt –¥–ª—è –ª—É—á—à–µ–≥–æ —Å—Ö–æ–∂–¥–µ–Ω–∏—è
    # –ò–¥–µ—è: –º–∞–ª—ã–µ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ dt –¥–æ–ª–∂–Ω—ã –¥–∞—Ç—å —Ö–æ—Ä–æ—à–µ–µ —Å—Ö–æ–∂–¥–µ–Ω–∏–µ
    custom_dt = np.array([
        0.05, 0.05,  # –ì—Ä—É–ø–ø–∞ 0: forward-forward
        0.05, 0.05,  # –ì—Ä—É–ø–ø–∞ 1: forward-backward
        0.05, 0.05,  # –ì—Ä—É–ø–ø–∞ 2: backward-backward  
        0.05, 0.05   # –ì—Ä—É–ø–ø–∞ 3: mixed
    ])
    
    builder = ControlTreeBuilder(pendulum, dt_vector=custom_dt)
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω ControlTreeBuilder —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º–∏ dt:")
    print(f"   dt_vector = {builder.dt_vector}")
    
    # –°—Ç—Ä–æ–∏–º –¥–µ—Ä–µ–≤–æ
    initial_position = np.array([0.3, -0.2])
    print(f"\nüöÄ –°—Ç—Ä–æ–∏–º 8 —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–π –∏–∑ —Ç–æ—á–∫–∏: ({initial_position[0]:.2f}, {initial_position[1]:.2f})")
    print("-" * 40)
    
    tree_data = builder.build_tree(initial_position)
    
    # –í–∏–∑—É–∞–ª–∏–∑–∏—Ä—É–µ–º
    print("\nüìä –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–π —Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º–∏ dt...")
    fig = visualize_tree(tree_data, title="Trajectories with Optimized dt (all = 0.05)")
    plt.show()
    
    return builder, tree_data


def analyze_convergence_quality(builder, tree_data):
    """–ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ —Å—Ö–æ–∂–¥–µ–Ω–∏—è —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–π."""
    
    print("\n" + "=" * 60)
    print("üîç –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –°–•–û–ñ–î–ï–ù–ò–Ø")
    print("=" * 60)
    
    convergence_groups = tree_data['convergence_info']['groups']
    
    if not convergence_groups:
        print("‚ö†Ô∏è –ù–µ—Ç –≥—Ä—É–ø–ø —Å—Ö–æ–∂–¥–µ–Ω–∏—è")
        return
    
    # –î–ª—è –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—á–µ—Å—Ç–≤–æ
    for group in convergence_groups:
        print(f"\nüìç –ì—Ä—É–ø–ø–∞ —Å—Ö–æ–∂–¥–µ–Ω–∏—è {group['group_id']}:")
        print(f"   –¢—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏: {group['trajectories']}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–π –¥–ª—è —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–π –≤ –≥—Ä—É–ø–ø–µ
        for traj_id in group['trajectories']:
            traj = builder.get_trajectory_by_id(traj_id)
            if traj:
                seq_str = " ‚Üí ".join([f"({u:+.1f}, {dt:+.3f})" for u, dt in traj.sequence])
                print(f"   –¢—Ä–∞–µ–∫—Ç–æ—Ä–∏—è {traj_id}: {seq_str}")
        
        # –ê–Ω–∞–ª–∏–∑ —Ç–æ—á–Ω–æ—Å—Ç–∏ —Å—Ö–æ–∂–¥–µ–Ω–∏—è
        print(f"   –°—Ä–µ–¥–Ω—è—è —Ç–æ—á–∫–∞: ({group['mean_point'][0]:.6f}, {group['mean_point'][1]:.6f})")
        print(f"   –ú–∞–∫—Å. –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {group['max_deviation']:.2e}")
        
        # –í–∏–∑—É–∞–ª—å–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∫–∞—á–µ—Å—Ç–≤–∞
        if group['max_deviation'] < 1e-6:
            quality = "üü¢ –û—Ç–ª–∏—á–Ω–æ–µ"
        elif group['max_deviation'] < 1e-4:
            quality = "üü° –•–æ—Ä–æ—à–µ–µ"
        elif group['max_deviation'] < 1e-2:
            quality = "üü† –°—Ä–µ–¥–Ω–µ–µ"
        else:
            quality = "üî¥ –ü–ª–æ—Ö–æ–µ"
        
        print(f"   –ö–∞—á–µ—Å—Ç–≤–æ —Å—Ö–æ–∂–¥–µ–Ω–∏—è: {quality}")
    
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_deviation = sum(g['max_deviation'] for g in convergence_groups)
    avg_deviation = total_deviation / len(convergence_groups)
    
    print(f"\nüìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"   –ì—Ä—É–ø–ø —Å–æ—à–ª–æ—Å—å: {tree_data['convergence_info']['num_converged']}/{tree_data['convergence_info']['total_groups']}")
    print(f"   –°—Ä–µ–¥–Ω–µ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {avg_deviation:.2e}")
    print(f"   dt_vector: {tree_data['dt_vector']}")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤."""
    
    # –¢–µ—Å—Ç 1: –ë–∞–∑–æ–≤–æ–µ –¥–µ—Ä–µ–≤–æ
    builder1, tree1 = test_basic_tree()
    
    # –¢–µ—Å—Ç 2: –î–µ—Ä–µ–≤–æ —Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º–∏ dt
    builder2, tree2 = test_optimized_dt()
    
    # –ê–Ω–∞–ª–∏–∑ —Å—Ö–æ–∂–¥–µ–Ω–∏—è
    analyze_convergence_quality(builder1, tree1)
    analyze_convergence_quality(builder2, tree2)
    
    # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º –¥–ª—è —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤
    print("\n" + "=" * 60)
    print("üí° –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–´–ô –†–ï–ñ–ò–ú")
    print("=" * 60)
    print("–û–±—ä–µ–∫—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤:")
    print("  - builder1, tree1: —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ dt")
    print("  - builder2, tree2: —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏ –º–∞–ª—ã–º–∏ dt")
    print("\n–ü—Ä–∏–º–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è dt:")
    print("  new_dt = np.array([0.1, 0.05, 0.15, 0.1, 0.08, 0.12, 0.1, 0.09])")
    print("  builder1.update_dt_vector(new_dt)")
    print("  tree_new = builder1.build_tree(np.array([0.5, 0.0]))")
    print("  fig = visualize_tree(tree_new)")
    print("\n–î–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏:")
    print("  traj = builder1.get_trajectory_by_id(0)")
    print("  print(traj)")
    
    return builder1, tree1, builder2, tree2


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    builder1, tree1, builder2, tree2 = main()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –≥—Ä–∞—Ñ–∏–∫–∏
    plt.show()