# üîß –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô DTManager —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º reset

class DTManager:
    """
    –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã–º —à–∞–≥–æ–º (dt).
    """
    
    def __init__(self, config: dict, pendulum_system: 'PendulumSystem'):
        self.config = config
        self.pendulum = pendulum_system
        
        # –°–≤—è–∑—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º —Å–ø–æ—Ä –±—É–¥–µ—Ç –ø—Ä–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ —Å–Ω–∞—Ä—É–∂–∏ (—Å–º. main_demo.py)
        self.spore_manager = None  # type: ignore

        # –ü–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ–ø—É—Å—Ç–∏–º–æ–π –¥–ª–∏–Ω—ã –ª–∏–Ω–∫–∞ –æ—Ç dt:
        # config['link']['distance_per_dt'] ‚Äî –æ–ø—Ü–∏–æ–Ω–∞–ª–µ–Ω; –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1.0
        link_cfg = config.get('link', {}) if isinstance(config, dict) else {}
        self.link_length_per_dt = float(link_cfg.get('distance_per_dt', 1.0))
        
        # üÜï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ dt –ü–†–ò –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò
        self.original_dt = float(config.get('pendulum', {}).get('dt', 0.1))
        self.current_dt = self.original_dt  # –ù–∞—á–∏–Ω–∞–µ–º —Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è dt
        self.dt_multiplier = 1.1  # –ù–∞ —Å–∫–æ–ª—å–∫–æ –∏–∑–º–µ–Ω—è–µ–º dt –∑–∞ –æ–¥–∏–Ω —à–∞–≥ –∫–æ–ª–µ—Å–∏–∫–∞
        self.min_dt = 0.001       # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ dt
        self.max_dt = 1.0         # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ dt
        
        # –°–∏—Å—Ç–µ–º–∞ –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è dt
        self._subscribers = []
        
        print(f"   ‚úì DTManager —Å–æ–∑–¥–∞–Ω (–Ω–∞—á–∞–ª—å–Ω—ã–π dt: {self.current_dt})")
        print(f"   üìã –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π dt —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {self.original_dt}")

    def increase_dt(self) -> float:
        """–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç dt –º—É–ª—å—Ç–∏–ø–ª–∏–∫–∞—Ç–∏–≤–Ω–æ."""
        old = float(self.current_dt)
        self.current_dt = min(self.current_dt * self.dt_multiplier, self.max_dt)
        
        if self.current_dt != old:
            self._update_config()
            print(f"   üîº dt —É–≤–µ–ª–∏—á–µ–Ω: {old:.4f} ‚Üí {self.current_dt:.4f} (√ó1.1)")
            self._notify_dt_changed()  # ‚Üê –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û
        else:
            print(f"   ‚ö†Ô∏è dt —É–∂–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π: {self.current_dt:.4f}")
            
        return self.current_dt

    def decrease_dt(self) -> float:
        """–£–º–µ–Ω—å—à–∞–µ—Ç dt –º—É–ª—å—Ç–∏–ø–ª–∏–∫–∞—Ç–∏–≤–Ω–æ."""
        old = float(self.current_dt)
        self.current_dt = max(self.current_dt / self.dt_multiplier, self.min_dt)
        
        if self.current_dt != old:
            self._update_config()
            print(f"   üîΩ dt —É–º–µ–Ω—å—à–µ–Ω: {old:.4f} ‚Üí {self.current_dt:.4f} (√∑1.1)")
            self._notify_dt_changed()  # ‚Üê –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û
        else:
            print(f"   ‚ö†Ô∏è dt —É–∂–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π: {self.current_dt:.4f}")
            
        return self.current_dt

    def reset_dt(self) -> float:
        """
        üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç dt –∫ –°–û–•–†–ê–ù–ï–ù–ù–û–ú–£ –∏—Å—Ö–æ–¥–Ω–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é.
        
        Returns:
            –°–±—Ä–æ—à–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ dt
        """
        old_dt = self.current_dt
        self.current_dt = self.original_dt  # üÜï –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ!
        
        self._update_config()
        print(f"   üîÑ dt —Å–±—Ä–æ—à–µ–Ω: {old_dt:.4f} ‚Üí {self.current_dt:.4f} (–æ—Ä–∏–≥–∏–Ω–∞–ª: {self.original_dt})")
        self._notify_dt_changed()
        
        return self.current_dt

    def get_dt(self) -> float:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ dt."""
        return self.current_dt

    def set_dt(self, new_dt: float) -> float:
        """
        –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ dt —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –≥—Ä–∞–Ω–∏—Ü.
        
        Args:
            new_dt: –ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ dt
            
        Returns:
            –§–∞–∫—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ dt
        """
        old_dt = self.current_dt
        self.current_dt = max(self.min_dt, min(new_dt, self.max_dt))
        
        if self.current_dt != old_dt:
            self._update_config()
            print(f"   ‚öôÔ∏è dt —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {old_dt:.4f} ‚Üí {self.current_dt:.4f}")
            self._notify_dt_changed()
            
        return self.current_dt

    def _update_config(self) -> None:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ dt –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."""
        if 'pendulum' not in self.config:
            self.config['pendulum'] = {}
        self.config['pendulum']['dt'] = self.current_dt

    def get_max_link_length(self) -> float:
        """–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º–∞—è –¥–ª–∏–Ω–∞ –ª–∏–Ω–∫–∞ –≤ —Ç–µ–∫—É—â–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö —Å—Ü–µ–Ω—ã."""
        return float(self.current_dt * self.link_length_per_dt)

    def _notify_dt_changed(self) -> None:
        """–ö–æ–ª–±—ç–∫ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ dt ‚Äî –æ–±–Ω–æ–≤–ª—è–µ–º –¥–ª–∏–Ω—ã –≤—Å–µ—Ö –ª–∏–Ω–∫–æ–≤ –∏ —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤."""
        try:
            if getattr(self, 'spore_manager', None):
                print(f"[DT] applying max_length to SporeManager.links (max_len={self.get_max_link_length():.6f})")
                self.spore_manager.update_links_max_length(self.get_max_link_length())
        except Exception as e:
            print(f"[DTManager] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–ª–∏–Ω –ª–∏–Ω–∫–æ–≤: {e}")
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
        self._notify_subscribers()

    def subscribe_on_change(self, callback) -> None:
        """–ü–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç –∫–æ–ª–±—ç–∫ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è dt."""
        if callback not in self._subscribers:
            self._subscribers.append(callback)
            print(f"   üìß –ü–æ–¥–ø–∏—Å—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω –≤ DTManager (–≤—Å–µ–≥–æ: {len(self._subscribers)})")

    def unsubscribe_on_change(self, callback) -> None:
        """–û—Ç–ø–∏—Å—ã–≤–∞–µ—Ç –∫–æ–ª–±—ç–∫ –æ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π dt."""
        if callback in self._subscribers:
            self._subscribers.remove(callback)
            print(f"   üìß –ü–æ–¥–ø–∏—Å—á–∏–∫ —É–¥–∞–ª–µ–Ω –∏–∑ DTManager (–æ—Å—Ç–∞–ª–æ—Å—å: {len(self._subscribers)})")

    def _notify_subscribers(self) -> None:
        """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ dt."""
        n = len(getattr(self, "_subscribers", []))
        print(f"[DT] notifying {n} subscriber(s)  [DT id={id(self)}]")
        for i, cb in enumerate(self._subscribers):
            print(f"[DT] -> subscriber[{i}] {getattr(cb, '__name__', str(cb))}")
            cb()

    def debug_subscribers(self) -> None:
        """–í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏."""
        print(f"[DT] subscribers dump (id={id(self)}):")
        for i, cb in enumerate(self._subscribers):
            print(f"   [{i}] {getattr(cb, '__name__', str(cb))}")

    def get_stats(self) -> dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É dt –º–µ–Ω–µ–¥–∂–µ—Ä–∞."""
        # üÜï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π original_dt
        multiplier_from_original = self.current_dt / self.original_dt if self.original_dt != 0 else 1.0
        
        return {
            'current_dt': self.current_dt,
            'original_dt': self.original_dt,  # üÜï –ò–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
            'multiplier_from_original': multiplier_from_original,
            'min_dt': self.min_dt,
            'max_dt': self.max_dt,
            'dt_multiplier': self.dt_multiplier,
            'at_min': self.current_dt <= self.min_dt,
            'at_max': self.current_dt >= self.max_dt
        }

    def print_stats(self) -> None:
        """–í—ã–≤–æ–¥–∏—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É dt."""
        stats = self.get_stats()
        
        print(f"\n‚è±Ô∏è –°–¢–ê–¢–ò–°–¢–ò–ö–ê DT:")
        print(f"   üìä –¢–µ–∫—É—â–∏–π dt: {stats['current_dt']:.4f}")
        print(f"   üìã –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π dt: {stats['original_dt']:.4f}")
        print(f"   üìà –ò–∑–º–µ–Ω–µ–Ω–∏–µ: √ó{stats['multiplier_from_original']:.2f}")
        print(f"   ‚¨áÔ∏è –ú–∏–Ω–∏–º—É–º: {stats['min_dt']:.4f} {'(–¥–æ—Å—Ç–∏–≥–Ω—É—Ç)' if stats['at_min'] else ''}")
        print(f"   ‚¨ÜÔ∏è –ú–∞–∫—Å–∏–º—É–º: {stats['max_dt']:.4f} {'(–¥–æ—Å—Ç–∏–≥–Ω—É—Ç)' if stats['at_max'] else ''}")
        print(f"   üîß –ú–Ω–æ–∂–∏—Ç–µ–ª—å: √ó√∑{stats['dt_multiplier']}")
        print("========================")

    # üÜï –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ô –ú–ï–¢–û–î –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    def debug_values(self) -> None:
        """–í—ã–≤–æ–¥–∏—Ç –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏."""
        print(f"\nüêõ –û–¢–õ–ê–î–ö–ê DTManager:")
        print(f"   original_dt (—Å–æ—Ö—Ä–∞–Ω–µ–Ω –ø—Ä–∏ __init__): {self.original_dt}")
        print(f"   current_dt: {self.current_dt}")
        print(f"   config['pendulum']['dt']: {self.config.get('pendulum', {}).get('dt', '–ù–ï–¢')}")
        print(f"   –û–¥–∏–Ω–∞–∫–æ–≤—ã –ª–∏ current –∏ config: {self.current_dt == self.config.get('pendulum', {}).get('dt', -1)}")
        print("========================")