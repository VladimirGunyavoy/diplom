#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è dt-–≤–µ–∫—Ç–æ—Ä–∞ —Å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π.
"""

import json
import numpy as np

def test_improved_dt_scaling():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —É–ª—É—á—à–µ–Ω–Ω–æ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ dt-–≤–µ–∫—Ç–æ—Ä–∞ —Å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π."""
    print("üß™ –¢–ï–°–¢ –£–õ–£–ß–®–ï–ù–ù–û–ì–û –ú–ê–°–®–¢–ê–ë–ò–†–û–í–ê–ù–ò–Ø DT-–í–ï–ö–¢–û–†–ê")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–ø–æ—Ä—Ç—ã
    try:
        from src.managers.dt_manager import DTManager
        from src.managers.input_manager import InputManager
        from src.logic.pendulum import PendulumSystem
        print("‚úÖ –í—Å–µ –∏–º–ø–æ—Ä—Ç—ã —É—Å–ø–µ—à–Ω—ã")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        return
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    try:
        with open('config/json/config.json', 'r') as f:
            config = json.load(f)
        print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return
    
    # –°–æ–∑–¥–∞–µ–º –º–∞—è—Ç–Ω–∏–∫
    pendulum = PendulumSystem(config)
    print("‚úÖ PendulumSystem —Å–æ–∑–¥–∞–Ω")
    
    # –°–æ–∑–¥–∞–µ–º DTManager
    dt_manager = DTManager(config, pendulum)
    print("‚úÖ DTManager —Å–æ–∑–¥–∞–Ω")
    
    # –°–æ–∑–¥–∞–µ–º InputManager
    input_manager = InputManager(dt_manager=dt_manager)
    print("‚úÖ InputManager —Å–æ–∑–¥–∞–Ω")
    
    # –°–æ–∑–¥–∞–µ–º –º–æ–∫ ManualSporeManager –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    class MockManualSporeManager:
        def __init__(self):
            self.ghost_tree_dt_vector = None
            self.ghost_dt_baseline = None
            self.prediction_manager = None
    
    mock_manual_spore_manager = MockManualSporeManager()
    input_manager.manual_spore_manager = mock_manual_spore_manager
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —É–ª—É—á—à–µ–Ω–Ω–æ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ dt-–≤–µ–∫—Ç–æ—Ä–∞
    print(f"\nüîß –¢–ï–°–¢–ò–†–£–ï–ú –£–õ–£–ß–®–ï–ù–ù–û–ï –ú–ê–°–®–¢–ê–ë–ò–†–û–í–ê–ù–ò–ï:")
    
    # –ò–º–∏—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∞—Ä–µ–Ω–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞ —Å dt-–≤–µ–∫—Ç–æ—Ä–æ–º
    initial_dt = dt_manager.get_dt()
    print(f"   –ù–∞—á–∞–ª—å–Ω—ã–π dt: {initial_dt}")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π dt-–≤–µ–∫—Ç–æ—Ä (4 –¥–µ—Ç–µ–π + 8 –≤–Ω—É–∫–æ–≤)
    test_dt_vector = np.array([
        0.1, -0.15, 0.2, -0.25,  # –¥–µ—Ç–∏
        0.05, -0.08, 0.12, -0.18, 0.22, -0.28, 0.32, -0.35  # –≤–Ω—É–∫–∏
    ])
    
    # –ò–º–∏—Ç–∏—Ä—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ baseline
    mock_manual_spore_manager.ghost_tree_dt_vector = test_dt_vector.copy()
    mock_manual_spore_manager.ghost_dt_baseline = initial_dt
    
    print(f"   –¢–µ—Å—Ç–æ–≤—ã–π dt-–≤–µ–∫—Ç–æ—Ä: {test_dt_vector}")
    print(f"   Baseline dt: {mock_manual_spore_manager.ghost_dt_baseline}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —É–≤–µ–ª–∏—á–µ–Ω–∏–µ dt —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π
    print(f"\nüìù –¢–µ—Å—Ç–∏—Ä—É–µ–º —É–≤–µ–ª–∏—á–µ–Ω–∏–µ dt —Å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π:")
    dt_manager.increase_dt()
    new_dt = dt_manager.get_dt()
    print(f"   –ù–æ–≤—ã–π dt: {new_dt}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ
    if mock_manual_spore_manager.ghost_tree_dt_vector is not None:
        scaled_vector = mock_manual_spore_manager.ghost_tree_dt_vector
        print(f"   –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤–µ–∫—Ç–æ—Ä: {scaled_vector}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∑–Ω–∞–∫–∏ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å
        original_signs = np.sign(test_dt_vector)
        scaled_signs = np.sign(scaled_vector)
        signs_preserved = np.array_equal(original_signs, scaled_signs)
        print(f"   –ó–Ω–∞–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {signs_preserved}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ
        expected_scale = new_dt / initial_dt
        actual_scale = np.abs(scaled_vector[0]) / np.abs(test_dt_vector[0]) if test_dt_vector[0] != 0 else 1
        scale_correct = abs(expected_scale - actual_scale) < 0.01
        print(f"   –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ: {scale_correct} (–æ–∂–∏–¥–∞–ª–æ—Å—å: {expected_scale:.3f}, –ø–æ–ª—É—á–∏–ª–æ—Å—å: {actual_scale:.3f})")
        
        if signs_preserved and scale_correct:
            print("‚úÖ –£–ª—É—á—à–µ–Ω–Ω–æ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –≤ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–∏")
    else:
        print("‚ùå –í–µ–∫—Ç–æ—Ä –Ω–µ –±—ã–ª –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —É–º–µ–Ω—å—à–µ–Ω–∏–µ dt
    print(f"\nüìù –¢–µ—Å—Ç–∏—Ä—É–µ–º —É–º–µ–Ω—å—à–µ–Ω–∏–µ dt:")
    dt_manager.decrease_dt()
    new_dt = dt_manager.get_dt()
    print(f"   –ù–æ–≤—ã–π dt: {new_dt}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ
    if mock_manual_spore_manager.ghost_tree_dt_vector is not None:
        scaled_vector = mock_manual_spore_manager.ghost_tree_dt_vector
        print(f"   –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤–µ–∫—Ç–æ—Ä: {scaled_vector}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∑–Ω–∞–∫–∏ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å
        original_signs = np.sign(test_dt_vector)
        scaled_signs = np.sign(scaled_vector)
        signs_preserved = np.array_equal(original_signs, scaled_signs)
        print(f"   –ó–Ω–∞–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {signs_preserved}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ
        expected_scale = new_dt / initial_dt
        actual_scale = np.abs(scaled_vector[0]) / np.abs(test_dt_vector[0]) if test_dt_vector[0] != 0 else 1
        scale_correct = abs(expected_scale - actual_scale) < 0.01
        print(f"   –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ: {scale_correct} (–æ–∂–∏–¥–∞–ª–æ—Å—å: {expected_scale:.3f}, –ø–æ–ª—É—á–∏–ª–æ—Å—å: {actual_scale:.3f})")
        
        if signs_preserved and scale_correct:
            print("‚úÖ –£–ª—É—á—à–µ–Ω–Ω–æ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –≤ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–∏")
    else:
        print("‚ùå –í–µ–∫—Ç–æ—Ä –Ω–µ –±—ã–ª –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω")
    
    print(f"\nüéâ –¢–ï–°–¢ –£–õ–£–ß–®–ï–ù–ù–û–ì–û –ú–ê–°–®–¢–ê–ë–ò–†–û–í–ê–ù–ò–Ø –ó–ê–í–ï–†–®–ï–ù!")
    print("üìã –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ:")
    print("   [InputManager._on_dt_changed] scale ghost dt-vector: baseline ...")
    print("   [InputManager._on_dt_changed] k=...")
    print("   [InputManager._on_dt_changed] dt_vec before: [...]")
    print("   [InputManager._on_dt_changed] dt_vec after : [...]")

if __name__ == "__main__":
    test_improved_dt_scaling()
