#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø–æ –ø–ª–æ—â–∞–¥–∏ - –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∏–º–ø–æ—Ä—Ç—ã –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é.
"""

import json
import numpy as np

def test_area_optimization_imports():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–º–ø–æ—Ä—Ç—ã –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø–æ –ø–ª–æ—â–∞–¥–∏."""
    print("üß™ –¢–ï–°–¢ –ò–ú–ü–û–†–¢–û–í –ò –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò –ü–û –ü–õ–û–©–ê–î–ò")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–ø–æ—Ä—Ç—ã
    try:
        from src.logic.tree.pairs.create_tree_from_pairs import create_tree_from_pairs
        print("‚úÖ create_tree_from_pairs –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ create_tree_from_pairs: {e}")
        return
    
    try:
        from src.logic.tree.area_opt.optimize_tree_area import optimize_tree_area
        print("‚úÖ optimize_tree_area –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ optimize_tree_area: {e}")
        return
    
    try:
        from src.logic.tree.spore_tree_config import SporeTreeConfig
        print("‚úÖ SporeTreeConfig –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ SporeTreeConfig: {e}")
        return
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    try:
        with open('config/json/config.json', 'r') as f:
            config = json.load(f)
        print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø–æ –ø–ª–æ—â–∞–¥–∏
    area_cfg = config.get('tree', {}).get('area_optimization', {})
    print(f"\nüìã –ù–ê–°–¢–†–û–ô–ö–ò –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò –ü–û –ü–õ–û–©–ê–î–ò:")
    print(f"   enabled: {area_cfg.get('enabled', False)}")
    print(f"   constraint_distance: {area_cfg.get('constraint_distance', 1e-4)}")
    print(f"   dt_bounds: {area_cfg.get('dt_bounds', [0.001, 0.2])}")
    print(f"   max_iterations: {area_cfg.get('max_iterations', 1500)}")
    print(f"   method: {area_cfg.get('method', 'SLSQP')}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ SporeTreeConfig
    try:
        tree_config = SporeTreeConfig(
            dt_base=config.get('pendulum', {}).get('dt', 0.05),
            dt_grandchildren_factor=config.get('tree', {}).get('dt_grandchildren_factor', 0.1),
            show_debug=False
        )
        print("‚úÖ SporeTreeConfig —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        print(f"   dt_base: {tree_config.dt_base}")
        print(f"   dt_grandchildren_factor: {tree_config.dt_grandchildren_factor}")
        print(f"   initial_position: {tree_config.initial_position}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è SporeTreeConfig: {e}")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–≥–Ω–∞—Ç—É—Ä—É —Ñ—É–Ω–∫—Ü–∏–∏ optimize_tree_area
    import inspect
    sig = inspect.signature(optimize_tree_area)
    print(f"\nüîç –°–ò–ì–ù–ê–¢–£–†–ê optimize_tree_area:")
    print(f"   {sig}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –µ—Å—Ç—å
    required_params = ['tree', 'pairs', 'pendulum']
    missing_params = [param for param in required_params if param not in sig.parameters]
    
    if missing_params:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: {missing_params}")
    else:
        print("‚úÖ –í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
    
    print(f"\nüéâ –¢–ï–°–¢ –ò–ú–ü–û–†–¢–û–í –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û!")

if __name__ == "__main__":
    test_area_optimization_imports()
