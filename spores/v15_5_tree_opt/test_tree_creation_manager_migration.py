#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ TreeCreationManager –Ω–∞ SharedDependencies
"""

import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__), 'src'))

def test_tree_creation_manager_migration():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –º–∏–≥—Ä–∞—Ü–∏—é TreeCreationManager –Ω–∞ SharedDependencies"""
    try:
        from src.managers.manual_creation import TreeCreationManager, SharedDependencies
        
        # –°–æ–∑–¥–∞–µ–º –º–æ–∫-–æ–±—ä–µ–∫—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        class MockZoomManager:
            def get_unique_spore_id(self):
                return "test_spore_1"
            def get_unique_link_id(self):
                return "test_link_1"
            def register_object(self, obj, obj_id):
                pass
            def unregister_object(self, obj_id):
                pass
            def update_transform(self):
                pass
            spores_scale = 1.0
                
        class MockColorManager:
            def get_color(self, category, name):
                return (0.6, 0.4, 0.9, 1.0)
                
        class MockPendulum:
            def get_control_bounds(self):
                return (-1.0, 1.0)
            def step(self, position, control, dt):
                return position + np.array([control * dt, 0.0])
                
        class MockSporeManager:
            def add_spore_manual(self, spore):
                pass
            class MockIdManager:
                def get_next_link_id(self):
                    return 1
                def get_next_spore_id(self):
                    return 1
            id_manager = MockIdManager()
                
        # –°–æ–∑–¥–∞–µ–º SharedDependencies
        deps = SharedDependencies(
            zoom_manager=MockZoomManager(),
            color_manager=MockColorManager(),
            pendulum=MockPendulum(),
            config={'spore': {'goal_position': [0, 0], 'scale': 0.1}, 'pendulum': {'dt': 0.05}}
        )
        
        print("‚úÖ SharedDependencies —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
        
        # –°–æ–∑–¥–∞–µ–º TreeCreationManager —Å SharedDependencies
        tree_creation_manager = TreeCreationManager(
            deps=deps,
            spore_manager=MockSporeManager()
        )
        
        print("‚úÖ TreeCreationManager —Å–æ–∑–¥–∞–Ω —Å SharedDependencies!")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –º–µ—Ç–æ–¥—ã —Ä–∞–±–æ—Ç–∞—é—Ç
        has_deps = hasattr(tree_creation_manager, 'deps')
        print(f"‚úÖ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç deps: {has_deps}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º—ã —Å–æ–∑–¥–∞–Ω–∏—è
        print(f"‚úÖ creation_mode = {tree_creation_manager.creation_mode}")
        print(f"‚úÖ tree_depth = {tree_creation_manager.tree_depth}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–æ–≤
        tree_creation_manager.toggle_creation_mode()
        print(f"‚úÖ toggle_creation_mode —Ä–∞–±–æ—Ç–∞–µ—Ç: {tree_creation_manager.creation_mode}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É –≥–ª—É–±–∏–Ω—ã
        tree_creation_manager.set_tree_depth(2)
        print(f"‚úÖ set_tree_depth —Ä–∞–±–æ—Ç–∞–µ—Ç: {tree_creation_manager.tree_depth}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_manual_spore_manager_integration():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å ManualSporeManager"""
    try:
        from src.managers.manual_spore_manager import ManualSporeManager
        
        # –°–æ–∑–¥–∞–µ–º –º–æ–∫-–æ–±—ä–µ–∫—Ç—ã
        class MockSporeManager:
            class MockIdManager:
                def get_next_link_id(self):
                    return 1
                def get_next_spore_id(self):
                    return 1
            id_manager = MockIdManager()
            
        class MockZoomManager:
            def identify_invariant_point(self):
                return (0.0, 0.0)
            scene_setup = None
            a_transformation = 1.0
            b_translation = [0.0, 0.0, 0.0]
            spores_scale = 1.0
            def register_object(self, obj, name):
                pass
            def unregister_object(self, name):
                pass
            def get_unique_spore_id(self):
                return "test_spore_1"
            def get_unique_link_id(self):
                return "test_link_1"
            def update_transform(self):
                pass
                
        class MockColorManager:
            def get_color(self, category, name):
                return (0.6, 0.4, 0.9, 1.0)
                
        class MockPendulum:
            def get_control_bounds(self):
                return (-1.0, 1.0)
            def step(self, position, control, dt):
                return position + np.array([control * dt, 0.0])
                
        # –°–æ–∑–¥–∞–µ–º ManualSporeManager
        msm = ManualSporeManager(
            spore_manager=MockSporeManager(),
            zoom_manager=MockZoomManager(),
            pendulum=MockPendulum(),
            color_manager=MockColorManager(),
            config={'spore': {'goal_position': [0, 0], 'scale': 0.1}, 'pendulum': {'dt': 0.05}}
        )
        
        print("‚úÖ ManualSporeManager —Å–æ–∑–¥–∞–Ω —Å –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º TreeCreationManager!")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ shared_deps —Å–æ–∑–¥–∞–Ω
        has_shared_deps = hasattr(msm, 'shared_deps')
        print(f"‚úÖ shared_deps —Å–æ–∑–¥–∞–Ω: {has_shared_deps}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ tree_creation_manager –∏—Å–ø–æ–ª—å–∑—É–µ—Ç deps
        has_deps = hasattr(msm.tree_creation_manager, 'deps')
        print(f"‚úÖ tree_creation_manager –∏—Å–ø–æ–ª—å–∑—É–µ—Ç deps: {has_deps}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º—ã —Å–æ–∑–¥–∞–Ω–∏—è
        print(f"‚úÖ tree_creation_manager.creation_mode = {msm.tree_creation_manager.creation_mode}")
        print(f"‚úÖ tree_creation_manager.tree_depth = {msm.tree_creation_manager.tree_depth}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏ TreeCreationManager –Ω–∞ SharedDependencies...")
    print()
    
    success1 = test_tree_creation_manager_migration()
    print()
    
    if success1:
        success2 = test_manual_spore_manager_integration()
        print()
        
        if success2:
            print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –º–∏–≥—Ä–∞—Ü–∏–∏ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        else:
            print("üí• –¢–µ—Å—Ç—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –Ω–µ –ø—Ä–æ—à–ª–∏!")
    else:
        print("üí• –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏!")
