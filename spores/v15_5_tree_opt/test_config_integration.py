#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
"""

import json
import os

def test_config_loading():
    print("üîß –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò")
    print("=" * 60)
    
    # –ü—É—Ç—å –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
    config_path = "v15_5_tree_opt/config/json/config.json"
    
    print(f"\nüìã –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª: {config_path}")
    
    if os.path.exists(config_path):
        print("‚úÖ –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–∞–π–¥–µ–Ω")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        with open(config_path, 'r') as f:
            config = json.load(f)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ–∫—Ü–∏—é tree.area_optimization
        tree_config = config.get('tree', {})
        area_config = tree_config.get('area_optimization', {})
        
        print(f"\nüìä –¢–µ–∫—É—â–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:")
        print(f"   constraint_distance: {area_config.get('constraint_distance', '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù')}")
        print(f"   dt_bounds: {area_config.get('dt_bounds', '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù')}")
        print(f"   max_iterations: {area_config.get('max_iterations', '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù')}")
        print(f"   method: {area_config.get('method', '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù')}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã
        required_params = ['constraint_distance', 'dt_bounds', 'max_iterations', 'method']
        missing_params = [param for param in required_params if param not in area_config]
        
        if missing_params:
            print(f"\n‚ö†Ô∏è  –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: {missing_params}")
            print("   –î–æ–±–∞–≤—å—Ç–µ –∏—Ö –≤ —Å–µ–∫—Ü–∏—é tree.area_optimization –≤ config.json")
        else:
            print(f"\n‚úÖ –í—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–æ–Ω—Ñ–∏–≥–∞
        print(f"\nüìã –ü–æ–ª–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:")
        print(json.dumps(config, indent=2, ensure_ascii=False))
        
    else:
        print("‚ùå –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        print("   –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª config.json –≤ –ø–∞–ø–∫–µ v15_5_tree_opt/config/json/")

def test_bridge_config_integration():
    print(f"\nüîß –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –° –ú–û–°–¢–û–ú")
    print("=" * 60)
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ—Å—Ç
        import sys
        sys.path.append('v15_5_tree_opt/src')
        
        from logic.tree.tree_area_bridge import _load_optimization_config
        
        print("‚úÖ –ú–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        config = _load_optimization_config()
        
        print(f"\nüìä –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –º–æ—Å—Ç–æ–º:")
        for key, value in config.items():
            print(f"   {key}: {value}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ constraint_distance –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ
        constraint_distance = config.get('constraint_distance', None)
        if constraint_distance is not None:
            print(f"\n‚úÖ constraint_distance –∑–∞–≥—Ä—É–∂–µ–Ω: {constraint_distance}")
        else:
            print(f"\n‚ö†Ô∏è  constraint_distance –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥–µ")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –º–æ—Å—Ç–∞: {e}")

if __name__ == "__main__":
    test_config_loading()
    test_bridge_config_integration()
    
    print(f"\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢:")
    print("   - –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –∏–∑ config/json/config.json")
    print("   - –ú–æ—Å—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–º–µ–Ω—è–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞")
    print("   - –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ 'O' –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞")
    print("   - –ú–æ–∂–Ω–æ –ª–µ–≥–∫–æ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–¥–∞")
