"""
UI Setup - –ì–æ—Ç–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –¥–ª—è –¥–µ–º–æ
================================================

–ö–ª–∞—Å—Å UI_setup –∏–Ω–∫–∞–ø—Å—É–ª–∏—Ä—É–µ—Ç –≤—Å—é –ª–æ–≥–∏–∫—É —Å–æ–∑–¥–∞–Ω–∏—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è UI
–¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤. –ò–∑–±–∞–≤–ª—è–µ—Ç –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–¥–∞
–∏ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤–æ –≤—Å–µ—Ö –¥–µ–º–æ.

–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
‚úÖ –ì–æ—Ç–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ UI –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å UI Manager –∏ Color Manager
‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ –∫–æ–ª–±—ç–∫–∏
‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –º–µ—Ç—Ä–∏–∫–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
"""

import time
import numpy as np
from ursina import Entity, camera, color, Text
from .ui_manager import UIManager
from ..managers.color_manager import ColorManager
from textwrap import dedent
from .ui_constants import UI_POSITIONS
from ..logic.cost_function import CostFunction
from typing import Dict, Optional, Callable, Any
from ..logic.spawn_area import SpawnArea as SpawnAreaLogic


class UI_setup:
    """–ì–æ—Ç–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ UI –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤"""
    
    def __init__(self, 
                 color_manager: Optional[ColorManager] = None, 
                 ui_manager: Optional[UIManager] = None):
        # –ú–µ–Ω–µ–¥–∂–µ—Ä—ã
        self.color_manager: ColorManager = color_manager if color_manager is not None else ColorManager()
        self.ui_manager: UIManager = ui_manager if ui_manager is not None else UIManager(self.color_manager)

        self.cost_function: CostFunction = CostFunction(goal_position_2d=np.array([np.pi, 0]))
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ
        self.start_time: float = time.time()
        self.ui_elements: Dict[str, Entity] = {}
        self.ui_toggle_timer: float = 0  # –î–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª–∞–≤–∏—à–∏ H
        
        # –•—Ä–∞–Ω–∏–ª–∏—â–µ —Ñ—É–Ω–∫—Ü–∏–π-–ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö
        self.data_providers: Dict[str, Callable[[], Any]] = {}
    
    def setup_spawn_area_ui(self, spawn_area: SpawnAreaLogic) -> None:
        """–°–æ–∑–¥–∞–µ—Ç UI –¥–ª—è SpawnArea –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∫–æ–ª–±—ç–∫–∏."""
        print("   ‚úì UI –¥–ª—è SpawnArea")

        # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è —ç–∫—Å—Ü–µ–Ω—Ç—Ä–∏—Å–∏—Ç–µ—Ç–∞
        self.ui_elements['eccentricity_info'] = self.ui_manager.create_element(
            'dynamic', 'eccentricity_info',
            text=f'ECCENTRICITY: {spawn_area.eccentricity:.3f}',
            position=UI_POSITIONS.SPAWN_AREA_INFO,
            style='header' 
        )

        # –°–æ–∑–¥–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
        instructions_text = dedent('''
            <white>SPAWN AREA:
            3 - increase eccentricity
            4 - decrease eccentricity
        ''').strip()
        self.ui_elements['spawn_area_instructions'] = self.ui_manager.create_instructions(
            'spawn_area',
            instructions_text,
            position=UI_POSITIONS.SPAWN_AREA_INSTRUCTIONS,
        )

        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
        def update_eccentricity_text(new_eccentricity: float) -> None:
            self.ui_manager.update_text('eccentricity_info', f'ECCENTRICITY: {new_eccentricity:.3f}')

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–ª–±—ç–∫
        if hasattr(spawn_area, 'on_eccentricity_change_callbacks'):
            spawn_area.on_eccentricity_change_callbacks.append(update_eccentricity_text)

    def setup_demo_ui(self, 
                      data_providers: Optional[Dict[str, Callable[[], Any]]] = None, 
                      spawn_area: Optional[SpawnAreaLogic] = None) -> Dict[str, Entity]:
        """
        –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø–æ–ª–Ω—ã–π UI –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–ª–±—ç–∫–∏.
        
        Args:
            data_providers (dict): –°–ª–æ–≤–∞—Ä—å —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.
                                   –ü—Ä–∏–º–µ—Ä: {'get_spore_count': lambda: ...}
        """
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö
        self.data_providers = data_providers if data_providers else {}
        
        print("\nüé® UI_setup: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...")
        
        # 1. –û—Å–Ω–æ–≤–Ω–æ–π UI —Å—Ü–µ–Ω—ã (–ø–æ–∑–∏—Ü–∏—è –∫–∞–º–µ—Ä—ã –∏ —Å—Ç–∞—Ç—É—Å –∫—É—Ä—Å–æ—Ä–∞)
        if 'get_camera_info' in self.data_providers and 'get_cursor_status' in self.data_providers:
            self._create_scene_ui()
            print("   ‚úì –û—Å–Ω–æ–≤–Ω–æ–π UI —Å—Ü–µ–Ω—ã")
        
        # 2. Zoom UI (–µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–≤–∞–π–¥–µ—Ä) 
        if 'get_look_point_info' in self.data_providers:
            self._create_zoom_ui()
            print("   ‚úì Zoom UI")
        
        # 3. Param Manager UI (–µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–≤–∞–π–¥–µ—Ä)
        if 'get_param_info' in self.data_providers:
            self._create_param_ui()
            print("   ‚úì Param Manager UI")
        
        # 4. –°—á–µ—Ç—á–∏–∫ —Å–ø–æ—Ä –∏ –∫–æ–º–∞–Ω–¥–∞ —Å–æ–∑–¥–∞–Ω–∏—è
        if 'get_spore_count' in self.data_providers:
            self.ui_elements['spore_counter'] = self.ui_manager.create_counter(
                'spore_count', 0,
                position=UI_POSITIONS.SPORE_COUNTER,
                prefix="Spores: "
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é "F - new spore" —á–µ—Ä–µ–∑ UI Manager
            self.ui_elements['spore_instruction'] = self.ui_manager.create_instructions(
                'spore_control',
                'F - new spore',
                position=UI_POSITIONS.SPORE_INSTRUCTION
            )
            print("   ‚úì –°—á–µ—Ç—á–∏–∫ —Å–ø–æ—Ä –∏ –∫–æ–º–∞–Ω–¥–∞ F")
        
        # 4.5. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞—Ö
        if 'get_candidate_info' in self.data_providers:
            min_radius, candidate_count = self.data_providers['get_candidate_info']()
            self.ui_elements['candidate_info'] = self.ui_manager.create_element(
                'dynamic', 'candidate_info',
                text=f'Candidates: {candidate_count}\nMin radius: {min_radius:.2f}',
                position=UI_POSITIONS.CANDIDATE_INFO,
                style='normal'
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é
            self.ui_elements['candidate_controls'] = self.ui_manager.create_instructions(
                'candidate_controls',
                'G - activate candidate\n5/6 - adjust radius',
                position=UI_POSITIONS.CANDIDATE_CONTROLS
            )
            print("   ‚úì –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞—Ö")
        
        # X. UI –¥–ª—è SpawnArea
        if spawn_area:
            self.setup_spawn_area_ui(spawn_area)
        
        # 5. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ UI —É–±—Ä–∞–Ω–∞
        print("   ‚úì –ë–ª–æ–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —É–±—Ä–∞–Ω")
        
        # 6. –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —É–±—Ä–∞–Ω–∞
        print("   ‚úì –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞")
        
        # 7. –ò–≥—Ä–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã
        self._create_game_commands()
        print("   ‚úì –ò–≥—Ä–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã")
        
        # 8. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã —É–±—Ä–∞–Ω—ã
        print("   ‚úì –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã —É–±—Ä–∞–Ω—ã")
        
        # 9. –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        self._register_update_functions()
        print("   ‚úì –§—É–Ω–∫—Ü–∏–∏ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
        
        print(f"   üìä –í—Å–µ–≥–æ UI —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {self.ui_manager.get_stats()['total']}")
        return self.ui_elements
    
    def _create_game_commands(self) -> None:
        """–°–æ–∑–¥–∞–µ—Ç –±–ª–æ–∫ —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –∏–≥—Ä–æ–≤—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏"""
        game_text = """CONTROLS:
WASD - move camera
Space/Shift - up/down
E/T - zoom in/out
R - reset zoom
1 - larger spores
2 - smaller spores
H - hide/show all UI"""
        
        self.ui_elements['game_commands'] = self.ui_manager.create_instructions(
            'game_controls',
            game_text,
            position=UI_POSITIONS.GAME_CONTROLS
        )
    
    def _create_scene_ui(self) -> None:
        """–°–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ UI —ç–ª–µ–º–µ–Ω—Ç—ã —Å—Ü–µ–Ω—ã"""
        # –ü–æ–∑–∏—Ü–∏–æ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        self.ui_elements['position_info'] = self.ui_manager.create_position_info()
        
        # –°—Ç–∞—Ç—É—Å –∫—É—Ä—Å–æ—Ä–∞  
        self.ui_elements['cursor_status'] = self.ui_manager.create_status_indicator(
            'cursor', "Cursor locked [Alt to unlock]"
        )
    
    def _create_zoom_ui(self) -> None:
        """–°–æ–∑–¥–∞–µ—Ç UI —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è zoom manager"""
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ—á–∫–µ –≤–∑–≥–ª—è–¥–∞
        self.ui_elements['look_point'] = self.ui_manager.create_debug_info(
            'look_point', position=UI_POSITIONS.LOOK_POINT_DEBUG
        )
    
    def _create_param_ui(self) -> None:
        """–°–æ–∑–¥–∞–µ—Ç UI —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è param manager"""
        param_value, show_param = self.data_providers['get_param_info']()
        
        self.ui_elements['param_value'] = self.ui_manager.create_element(
            'dynamic', 'param_value',  # –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
            text=f'param value: {round(param_value, 3)}',
            position=UI_POSITIONS.PARAM_VALUE,
            style='header'
        )
        
        # –°–∫—Ä—ã–≤–∞–µ–º –µ—Å–ª–∏ show=False
        if not show_param:
            self.ui_manager.hide_element('param_value')
    
    # –ú–µ—Ç–æ–¥ _create_demo_commands() —É–¥–∞–ª–µ–Ω - –ø–ª–∞—à–∫–∞ UI CONTROL –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–∞
    
    def _register_update_functions(self) -> None:
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ —Å–ø–æ—Ä
        def update_counters() -> None:
            # –°—á–µ—Ç—á–∏–∫ —Å–ø–æ—Ä
            if 'get_spore_count' in self.data_providers:
                spore_count = self.data_providers['get_spore_count']()
                self.ui_manager.update_counter('spore_count', spore_count, prefix="Spores: ")
            
        self.ui_manager.register_update_function('counters', update_counters)
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –∫–∞–º–µ—Ä—ã
        def update_position() -> None:
            if 'get_camera_info' in self.data_providers:
                try:
                    pos_x, pos_y, pos_z, rot_x, rot_y, rot_z = self.data_providers['get_camera_info']()
                    text = f"Position: {pos_x:>7.3f}, {pos_y:>7.3f}, {pos_z:>7.3f}"
                    text += f"\nRotation: {rot_x:>7.3f}, {rot_y:>7.3f}, {rot_z:>7.3f}"
                    self.ui_manager.update_text('main', text)
                except Exception:
                    pass
        
        self.ui_manager.register_update_function('position_info', update_position)
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∫—É—Ä—Å–æ—Ä–∞
        def update_cursor_status() -> None:
            if 'get_cursor_status' in self.data_providers:
                is_locked = self.data_providers['get_cursor_status']()
                if is_locked:
                    self.ui_manager.update_text('cursor', "Cursor locked [Alt to unlock]")
                else:
                    self.ui_manager.update_text('cursor', "Cursor unlocked [Alt to lock]")
        
        self.ui_manager.register_update_function('cursor_status', update_cursor_status)
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ—á–∫–∏ –≤–∑–≥–ª—è–¥–∞ (–¥–ª—è zoom manager)
        def update_look_point() -> None:
            if 'get_look_point_info' in self.data_providers:
                try:
                    x_0, z_0, current_scale, spores_scale = self.data_providers['get_look_point_info']()
                    text = f'LOOK POINT:\n({x_0:6.3f}, {z_0:6.3f})\n'
                    text += f'cost: {np.round(self.cost_function.get_cost(np.array([x_0, z_0])), 3)}\n'
                    text += f'common scale: {current_scale:6.3f}\n'
                    text += f'spores scale: {spores_scale:6.3f}'
                    self.ui_manager.update_text('look_point', text)
                except Exception:
                    pass
        
        self.ui_manager.register_update_function('look_point', update_look_point)

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ (–¥–ª—è param manager)
        def update_param_value() -> None:
            if 'get_param_info' in self.data_providers:
                try:
                    param_value, show_param = self.data_providers['get_param_info']()
                    # –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å –∏ —Ç–µ–∫—Å—Ç
                    element = self.ui_manager.get_element('param_value')
                    if element:
                        element.enabled = show_param
                        if show_param:
                            self.ui_manager.update_text('param_value', f'param value: {round(param_value, 3)}')
                except Exception:
                    pass # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤—ã
        
        self.ui_manager.register_update_function('param_value', update_param_value)
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞—Ö
        def update_candidate_info() -> None:
            if 'get_candidate_info' in self.data_providers:
                try:
                    min_radius, candidate_count = self.data_providers['get_candidate_info']()
                    text = f'Candidates: {candidate_count}\nMin radius: {min_radius:.2f}'
                    self.ui_manager.update_text('candidate_info', text)
                except Exception:
                    pass
        
        self.ui_manager.register_update_function('candidate_info', update_candidate_info)


    # ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–û–ú–ê–ù–î =====
    def handle_demo_commands(self, key: str) -> bool:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã, —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è —ç—Ç–æ–≥–æ UI."""
        if key == 'h' and time.time() - self.ui_toggle_timer > 0.2:
            self.ui_manager.toggle_category('static')
            self.ui_manager.toggle_category('dynamic')
            self.ui_toggle_timer = time.time()
            return True
        return False
        
    def update(self) -> None:
        """–í—ã–∑—ã–≤–∞–µ—Ç –≤—Å–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI."""
        self.ui_manager.update_dynamic_elements()

    def setup_architecture_demo(self) -> None:
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç UI –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã."""
        self.ui_manager.create_element('static', 'sim_panel', style='header', position=UI_POSITIONS.SIMULATION_PANEL, text="SIMULATION")
        self.ui_manager.create_element('static', 'opt_panel', style='header', position=UI_POSITIONS.OPTIMIZATION_PANEL, text="OPTIMIZATION")
        
        # –°—á–µ—Ç—á–∏–∫ –æ–ø–µ—Ä–∞—Ü–∏–π
        self.ui_manager.create_counter('op_counter', 0, position=UI_POSITIONS.OPERATION_COUNTER, prefix="Operations: ")

    def update_simulation_stats(self, spore_count: int, steps_per_sec: float) -> None:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏–º—É–ª—è—Ü–∏–∏."""
        self.ui_manager.update_counter('spore_count', spore_count, prefix="Spores: ")
        # –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ —Å—á–µ—Ç—á–∏–∫–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ...

    def update_optimization_stats(self, iterations: int, nfev: int, cost: float) -> None:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏."""
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–ª—è—Ç—å UI —ç–ª–µ–º–µ–Ω—Ç—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π.
        pass

    def update_operation_counter(self, count: int) -> None:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—á–µ—Ç—á–∏–∫ –æ–ø–µ—Ä–∞—Ü–∏–π."""
        self.ui_manager.update_counter('op_counter', count, prefix="Operations: ")

    def create_info_panel(self, title: str, content: str, position: tuple = (-0.95, 0.5)) -> Entity:
        """–°–æ–∑–¥–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—É—é –ø–∞–Ω–µ–ª—å."""
        return self.ui_manager.create_info_block('info_panel', title, content, position)

    def create_status_panel(self, name: str, text: str, position: tuple = (0, -0.3)) -> Entity:
        """–°–æ–∑–¥–∞–µ—Ç —Å—Ç–∞—Ç—É—Å–Ω—É—é –ø–∞–Ω–µ–ª—å."""
        return self.ui_manager.create_status_indicator(name, text, position)
    
    def show_demo_commands_help(self) -> None:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –¥–µ–º–æ."""
        help_text = dedent('''
            <white>UI CONTROL:
            H - toggle all UI
            L - show layout map
        ''').strip()

        self.ui_manager.create_instructions(
            'demo_help',
            help_text,
            position=UI_POSITIONS.DEMO_COMMANDS,
        )

    def show_ui_layout_map(self) -> None:
        """–í–∏–∑—É–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏–∑ UI_POSITIONS –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏."""
        # –û—Ç–∫–ª—é—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π UI, —á—Ç–æ–±—ã –Ω–µ –º–µ—à–∞–ª
        self.ui_manager.hide_category('static')
        self.ui_manager.hide_category('dynamic')

        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
        for name, pos in UI_POSITIONS.__dict__.items():
            if not name.startswith('__') and isinstance(pos, tuple):
                Text(text=name, position=pos, scale=0.6, color=color.orange, origin=(0,0))

        # –°–æ–∑–¥–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –≤–æ–∑–≤—Ä–∞—Ç—É
        Text(text="Press 'L' again to hide layout map", 
             position=(-0.1, -0.45), 
             color=color.white,
             scale=0.8)

        def input_handler(key):
            if key == 'l':
                # –£–Ω–∏—á—Ç–æ–∂–∞–µ–º –≤—Å–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π UI
                for entity in camera.ui.children:
                    if isinstance(entity, Text) and entity.color == color.orange:
                        destroy(entity)
                destroy(self.input_handler) # –£–¥–∞–ª—è–µ–º —Å–∞–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
                self.ui_manager.show_category('static')
                self.ui_manager.show_category('dynamic')

        self.input_handler = input_handler
        
    def get_stats(self) -> Dict[str, int]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ UI —ç–ª–µ–º–µ–Ω—Ç–∞–º."""
        return self.ui_manager.get_stats()

# –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏, –µ—Å–ª–∏ –≥–¥–µ-—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—Ç–∞—Ä—ã–π –≤—ã–∑–æ–≤
def create_demo_ui(
    color_manager: Optional[ColorManager] = None, 
    ui_manager: Optional[UIManager] = None
) -> UI_setup:
    return UI_setup(color_manager, ui_manager)