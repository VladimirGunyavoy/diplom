"""
–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –≠–í–û–õ–Æ–¶–ò–ò –°–ü–û–†
=========================

–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–ø–æ—Ä –∏ –≤—ã—è–≤–ª–µ–Ω–∏—è –ø—Ä–∏—á–∏–Ω –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —ç–≤–æ–ª—é—Ü–∏–∏.
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–π —Å–ø–æ—Ä–µ.
"""

import sys
import os
import json
import collections.abc

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—É—Ç–µ–π
script_dir = os.path.dirname(os.path.abspath(__file__))
project_root = os.path.abspath(os.path.join(script_dir, '..', '..'))
if project_root not in sys.path:
    sys.path.append(project_root)

from ursina import *
import numpy as np

# –ò–º–ø–æ—Ä—Ç—ã
from src.logic.pendulum import PendulumSystem
from src.managers.color_manager import ColorManager
from src.managers.zoom_manager import ZoomManager
from src.managers.spore_manager import SporeManager
from src.visual.scene_setup import SceneSetup
from src.core.spore import Spore
from src.managers.window_manager import WindowManager

def deep_merge(d, u):
    """–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç —Å–ª–æ–≤–∞—Ä–∏."""
    for k, v in u.items():
        if isinstance(v, collections.abc.Mapping):
            d[k] = deep_merge(d.get(k, {}), v)
        else:
            d[k] = v
    return d

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥–∏
with open(os.path.join(project_root, 'config', 'json', 'config.json'), 'r') as f:
    config = json.load(f)

with open(os.path.join(project_root, 'config', 'json', 'sizes.json'), 'r') as f:
    sizes_config = json.load(f)
    config = deep_merge(config, sizes_config)

print("="*70)
print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –≠–í–û–õ–Æ–¶–ò–ò –°–ü–û–†")
print("="*70)
print(f"üìä –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è trajectory_optimization:")
traj_config = config.get('trajectory_optimization', {})
for key, value in traj_config.items():
    print(f"   {key}: {value}")
print("="*70)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
app = Ursina()
color_manager = ColorManager()
scene_setup = SceneSetup(
    init_position=config['scene_setup']['init_position'], 
    init_rotation_x=config['scene_setup']['init_rotation_x'], 
    init_rotation_y=config['scene_setup']['init_rotation_y'], 
    color_manager=color_manager
)
zoom_manager = ZoomManager(scene_setup, color_manager=color_manager)
window_manager = WindowManager()

# –°–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
pendulum = PendulumSystem(damping=config['pendulum']['damping'])

# –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å–ø–æ—Ä
spore_manager = SporeManager(
    pendulum=pendulum,
    zoom_manager=zoom_manager,
    settings_param=None,
    color_manager=color_manager,
    config=config
)

# –°–æ–∑–¥–∞–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–π —Å–ø–æ—Ä—ã
goal_position = config['spore']['goal_position']
goal = Spore(
    pendulum=pendulum,
    dt=config['pendulum']['dt'],
    scale=config['spore']['scale'],
    position=(goal_position[0], 0, goal_position[1]),
    goal_position=goal_position,
    is_goal=True,
    color_manager=color_manager
)

# –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞—Ä—Ç–æ–≤–æ–π —Å–ø–æ—Ä—ã
spore_start = Spore(
    pendulum=pendulum,
    dt=config['pendulum']['dt'],
    goal_position=goal_position,
    scale=config['spore']['scale'],
    position=(0, 0, 2),
    color_manager=color_manager,
    config=config.get('spore', {})
)

# –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–æ—Ä—ã –≤ –º–µ–Ω–µ–¥–∂–µ—Ä
spore_manager.add_spore(goal)
spore_manager.add_spore(spore_start)

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤ zoom_manager
zoom_manager.register_object(goal)
zoom_manager.register_object(spore_start)

def analyze_spore(spore):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–ø–æ—Ä—ã –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é."""
    info = {
        'id': spore.id,
        'position_2d': spore.calc_2d_pos(),
        'cost': spore.logic.cost,
        'is_alive': spore.is_alive(),
        'can_evolve': spore.can_evolve() if hasattr(spore, 'can_evolve') else 'N/A',
        'evolution_completed': getattr(spore, 'evolution_completed', False),
        'optimal_control': spore.logic.optimal_control,
        'optimal_dt': spore.logic.optimal_dt,
        'is_goal': getattr(spore, 'is_goal', False)
    }
    
    # –ê–Ω–∞–ª–∏–∑ –ø—Ä–∏—á–∏–Ω –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —ç–≤–æ–ª—é—Ü–∏–∏
    if not info['can_evolve']:
        if not info['is_alive']:
            info['evolution_status'] = "–ú–ï–†–¢–í–ê (optimal_dt=0)"
        elif info['evolution_completed']:
            info['evolution_status'] = "–ó–ê–í–ï–†–®–ï–ù–ê (–æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ)"
        else:
            info['evolution_status'] = "–ù–ï–ò–ó–í–ï–°–¢–ù–ê–Ø –ü–†–ò–ß–ò–ù–ê"
    else:
        info['evolution_status'] = "–ú–û–ñ–ï–¢ –≠–í–û–õ–Æ–¶–ò–û–ù–ò–†–û–í–ê–¢–¨"
    
    return info

def print_spore_info(info):
    """–í—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ø–æ—Ä–µ –≤ —á–∏—Ç–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ."""
    status_emoji = {
        "–ú–û–ñ–ï–¢ –≠–í–û–õ–Æ–¶–ò–û–ù–ò–†–û–í–ê–¢–¨": "‚úÖ",
        "–ú–ï–†–¢–í–ê (optimal_dt=0)": "üíÄ", 
        "–ó–ê–í–ï–†–®–ï–ù–ê (–æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ)": "üèÅ",
        "–ù–ï–ò–ó–í–ï–°–¢–ù–ê–Ø –ü–†–ò–ß–ò–ù–ê": "‚ùì"
    }
    
    emoji = status_emoji.get(info['evolution_status'], "‚ùì")
    print(f"   {emoji} –°–ø–æ—Ä–∞ {info['id']}:")
    print(f"      –ü–æ–∑–∏—Ü–∏—è: {info['position_2d']}")
    print(f"      –°—Ç–æ–∏–º–æ—Å—Ç—å: {info['cost']:.4f}")
    print(f"      –°—Ç–∞—Ç—É—Å: {info['evolution_status']}")
    if info['optimal_control'] is not None:
        print(f"      –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {info['optimal_control']}")
    if info['optimal_dt'] is not None:
        print(f"      dt: {info['optimal_dt']}")
    print()

def diagnose_evolution():
    """–ü—Ä–æ–≤–æ–¥–∏—Ç –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è —ç–≤–æ–ª—é—Ü–∏–∏."""
    print(f"\nüìä –ê–ù–ê–õ–ò–ó –°–û–°–¢–û–Ø–ù–ò–Ø –°–ü–û–†:")
    print(f"   –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {len(spore_manager.objects)}")
    
    can_evolve_count = 0
    dead_count = 0 
    completed_count = 0
    
    for spore in spore_manager.objects:
        info = analyze_spore(spore)
        print_spore_info(info)
        
        if info['evolution_status'] == "–ú–û–ñ–ï–¢ –≠–í–û–õ–Æ–¶–ò–û–ù–ò–†–û–í–ê–¢–¨":
            can_evolve_count += 1
        elif info['evolution_status'] == "–ú–ï–†–¢–í–ê (optimal_dt=0)":
            dead_count += 1
        elif info['evolution_status'] == "–ó–ê–í–ï–†–®–ï–ù–ê (–æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ)":
            completed_count += 1
    
    print(f"üìà –°–í–û–î–ö–ê:")
    print(f"   ‚úÖ –ú–æ–≥—É—Ç —ç–≤–æ–ª—é—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞—Ç—å: {can_evolve_count}")
    print(f"   üíÄ –ú–µ—Ä—Ç–≤—ã–µ —Å–ø–æ—Ä—ã: {dead_count}")
    print(f"   üèÅ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Å–ø–æ—Ä—ã: {completed_count}")
    print(f"   ‚ùì –î—Ä—É–≥–∏–µ: {len(spore_manager.objects) - can_evolve_count - dead_count - completed_count}")
    
    if can_evolve_count == 0:
        print(f"\n‚ö†Ô∏è  –ü–†–û–ë–õ–ï–ú–ê: –ù–µ—Ç —Å–ø–æ—Ä, —Å–ø–æ—Å–æ–±–Ω—ã—Ö –∫ —ç–≤–æ–ª—é—Ü–∏–∏!")
        print(f"   üí° –í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:")
        print(f"      - –£–≤–µ–ª–∏—á–∏—Ç—å trajectory_merge_tolerance")
        print(f"      - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —ç–≤–æ–ª—é—Ü–∏–∏")
        print(f"      - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Å–ø–æ—Ä—É –≤ –¥—Ä—É–≥–æ–π –ø–æ–∑–∏—Ü–∏–∏")
    else:
        print(f"\n‚úÖ –≠–≤–æ–ª—é—Ü–∏—è –º–æ–∂–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å—Å—è")

print(f"\nüìç –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:")
diagnose_evolution()

print(f"\nüéÆ –£–ü–†–ê–í–õ–ï–ù–ò–ï:")
print(f"   F - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Å–ø–æ—Ä—É")
print(f"   D - –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è")
print(f"   Q - –≤—ã—Ö–æ–¥")

def input(key):
    if key == 'q' or key == 'escape':
        application.quit()
        return
    
    if key == 'f':
        print(f"\n{'='*50}")
        print(f"üöÄ –°–û–ó–î–ê–ù–ò–ï –ù–û–í–û–ô –°–ü–û–†–´")
        print(f"{'='*50}")
        
        result = spore_manager.generate_new_spore()
        if result:
            zoom_manager.register_object(result)
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Å–ø–æ—Ä–∞ {result.id}")
        else:
            print(f"‚ùå –°–ø–æ—Ä–∞ –Ω–µ —Å–æ–∑–¥–∞–ª–∞—Å—å")
        
        diagnose_evolution()
        print(f"{'='*50}")
    
    elif key == 'd':
        print(f"\n{'='*50}")
        print(f"üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê")
        print(f"{'='*50}")
        diagnose_evolution()
        print(f"{'='*50}")

def update():
    pass

if __name__ == '__main__':
    app.run() 