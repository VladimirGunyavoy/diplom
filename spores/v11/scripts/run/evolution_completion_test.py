#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ª–æ–≥–∏–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —ç–≤–æ–ª—é—Ü–∏–∏ —Å–ø–æ—Ä –ø–æ—Å–ª–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ —Å–ø–æ—Ä—ã –ø—Ä–µ–∫—Ä–∞—â–∞—é—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –¥–µ—Ç–µ–π –ø–æ—Å–ª–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ —Å–ø–æ—Ä–∞–º–∏
"""

import os
import sys
import json
import collections.abc
import numpy as np
from ursina import *

# --- –ü–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –≥–ª—É–±–æ–∫–æ–≥–æ —Å–ª–∏—è–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–æ–≤ ---
def deep_merge(d, u):
    """–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç —Å–ª–æ–≤–∞—Ä–∏."""
    for k, v in u.items():
        if isinstance(v, collections.abc.Mapping):
            d[k] = deep_merge(d.get(k, {}), v)
        else:
            d[k] = v
    return d

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—É—Ç–µ–π ---
script_dir = os.path.dirname(os.path.abspath(__file__))
project_root = os.path.abspath(os.path.join(script_dir, '..', '..'))
if project_root not in sys.path:
    sys.path.append(project_root)

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ---
with open(os.path.join(project_root, 'config', 'json', 'config.json'), 'r') as f:
    config = json.load(f)

with open(os.path.join(project_root, 'config', 'json', 'sizes.json'), 'r') as f:
    sizes_config = json.load(f)
    config = deep_merge(config, sizes_config)

# --- –ò–º–ø–æ—Ä—Ç—ã ---
from src.managers.color_manager import ColorManager
from src.managers.window_manager import WindowManager
from src.visual.scene_setup import SceneSetup
from src.managers.zoom_manager import ZoomManager
from src.utils.scalable import ScalableFloor
from src.logic.pendulum import PendulumSystem
from src.core.spore import Spore
from src.managers.spore_manager import SporeManager
from src.visual.link import Link

print("=== –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù–ò–Ø –≠–í–û–õ–Æ–¶–ò–ò ===")
print("üéØ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏–∫–∏ –ø—Ä–µ–∫—Ä–∞—â–µ–Ω–∏—è —ç–≤–æ–ª—é—Ü–∏–∏ –ø–æ—Å–ª–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è")
print("=" * 50)

# ===== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø =====
app = Ursina()

# ===== –ù–ê–°–¢–†–û–ô–ö–ê –û–ö–ù–ê =====
window_manager = WindowManager(
    title="–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —ç–≤–æ–ª—é—Ü–∏–∏ - –°–ø–æ—Ä—ã v11",
    size=(900, 700)
)
window_manager.set_background_color(color.dark_gray)

color_manager = ColorManager()

print("\nü™ü –ù–ê–°–¢–†–û–ô–ö–ê –û–ö–û–ù:")
print("‚Ä¢ –û–∫–Ω–æ Ursina: 900x700 –ø–∏–∫—Å–µ–ª–µ–π")
print("‚Ä¢ –ö–æ–Ω—Å–æ–ª—å –ø–æ–∫–∞–∂–µ—Ç –ø–æ—à–∞–≥–æ–≤—É—é –ª–æ–≥–∏–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —ç–≤–æ–ª—é—Ü–∏–∏")

# ===== –°–û–ó–î–ê–ù–ò–ï –°–¶–ï–ù–´ =====
scene_config = config['scene_setup']
scene_setup = SceneSetup(
    init_position=scene_config['init_position'], 
    init_rotation_x=scene_config['init_rotation_x'], 
    init_rotation_y=scene_config['init_rotation_y'], 
    color_manager=color_manager
)

# ===== –°–û–ó–î–ê–ù–ò–ï ZOOM MANAGER =====
zoom_manager = ZoomManager(scene_setup, color_manager=color_manager)

# --- –°–û–ó–î–ê–ù–ò–ï –ü–û–õ–ê ---
floor = ScalableFloor(
    model='quad',
    scale=12,
    rotation_x=90,
    color=color_manager.get_color('scene', 'floor'),
    texture='white_cube',
    texture_scale=(50, 50)
)
zoom_manager.register_object(floor, name='floor')

# ===== –°–û–ó–î–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´ –ú–ê–Ø–¢–ù–ò–ö–ê =====
pendulum_config = config['pendulum']
pendulum = PendulumSystem(damping=pendulum_config['damping'])

# ===== –°–û–ó–î–ê–ù–ò–ï –¢–ï–°–¢–û–í–û–ì–û –°–¶–ï–ù–ê–†–ò–Ø =====
print("\nüåü –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è...")

goal_position = config['spore']['goal_position']

# –¶–ï–õ–¨
print("üìç –°–æ–∑–¥–∞–Ω–∏–µ —Ü–µ–ª–∏ –≤ –ø–æ–∑–∏—Ü–∏–∏", goal_position)
goal = Spore(
    pendulum=pendulum,
    dt=pendulum_config['dt'],
    scale=0.1,
    position=(goal_position[0], 0, goal_position[1]),
    goal_position=goal_position,
    is_goal=True,
    color_manager=color_manager
)

# –°–ü–û–†–ê A: –ë—É–¥–µ—Ç –æ–±—ä–µ–¥–∏–Ω—è—Ç—å—Å—è —Å–æ —Å–ø–æ—Ä–æ–π B
print("üìç –°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–æ—Ä—ã A –≤ –ø–æ–∑–∏—Ü–∏–∏ (0.5, 0.1)")
spore_a = Spore(
    pendulum=pendulum,
    dt=pendulum_config['dt'],
    goal_position=goal_position,
    scale=0.09,
    position=(0.5, 0, 0.1),
    color_manager=color_manager,
    config=config.get('spore', {})
)

# –°–ü–û–†–ê B: –¶–µ–ª–µ–≤–∞—è –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è
print("üìç –°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–æ—Ä—ã B –≤ –ø–æ–∑–∏—Ü–∏–∏ (0.52, 0.08)")
spore_b = Spore(
    pendulum=pendulum,
    dt=pendulum_config['dt'],
    goal_position=goal_position,
    scale=0.09,
    position=(0.52, 0, 0.08),
    color_manager=color_manager,
    config=config.get('spore', {})
)

# –°–ü–û–†–ê C: –ù–µ–∑–∞–≤–∏—Å–∏–º–∞—è —Å–ø–æ—Ä–∞
print("üìç –°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–æ—Ä—ã C –≤ –ø–æ–∑–∏—Ü–∏–∏ (0.3, 0.3)")
spore_c = Spore(
    pendulum=pendulum,
    dt=pendulum_config['dt'],
    goal_position=goal_position,
    scale=0.09,
    position=(0.3, 0, 0.3),
    color_manager=color_manager,
    config=config.get('spore', {})
)

# ===== –°–û–ó–î–ê–ù–ò–ï –ú–ï–ù–ï–î–ñ–ï–†–ê –°–ü–û–† =====
spore_manager = SporeManager(
    pendulum=pendulum, 
    zoom_manager=zoom_manager, 
    settings_param=None,
    color_manager=color_manager,
    angel_manager=None,
    config=config,
    spawn_area=None
)

# –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–æ—Ä—ã –≤ –º–µ–Ω–µ–¥–∂–µ—Ä
print("\n‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ø–æ—Ä –≤ –º–µ–Ω–µ–¥–∂–µ—Ä...")
spore_manager.add_spore(goal)
spore_manager.add_spore(spore_a)
spore_manager.add_spore(spore_b)
spore_manager.add_spore(spore_c)

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤ zoom manager
zoom_manager.register_object(goal, "goal_spore")
zoom_manager.register_object(spore_a, "spore_a")
zoom_manager.register_object(spore_b, "spore_b") 
zoom_manager.register_object(spore_c, "spore_c")

print(f"\n‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ç–µ—Å—Ç–æ–≤–∞—è —Å—Ä–µ–¥–∞:")
print(f"   –°–ø–æ—Ä: {len(spore_manager.objects)} (–≤–∫–ª—é—á–∞—è —Ü–µ–ª—å)")
print(f"   –°–≤—è–∑–µ–π: {len(spore_manager.links)}")
print("üìä –¶–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞:")
print("   üü£ –§–∏–æ–ª–µ—Ç–æ–≤—ã–π - –æ–±—ã—á–Ω—ã–µ —Å–ø–æ—Ä—ã")
print("   üîµ –°–∏–Ω–∏–π - —Å–ø–æ—Ä—ã —Å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π —ç–≤–æ–ª—é—Ü–∏–µ–π")
print("   üü¢ –ó–µ–ª–µ–Ω—ã–π - —Ü–µ–ª—å")
print("   üî¥ –°–µ—Ä—ã–π - –º–µ—Ä—Ç–≤—ã–µ —Å–ø–æ—Ä—ã")

current_active_index = len(spore_manager.objects) - 1

def show_spore_status():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—ã–π —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Å–ø–æ—Ä"""
    print(f"\nüìä –°–¢–ê–¢–£–° –í–°–ï–• –°–ü–û–†:")
    print("=" * 50)
    for i, spore in enumerate(spore_manager.objects):
        status_markers = []
        
        if hasattr(spore, 'is_goal') and spore.is_goal:
            status_markers.append("üèÅ –¶–ï–õ–¨")
        else:
            if spore.is_alive():
                status_markers.append("üíö –ñ–ò–í–ê")
            else:
                status_markers.append("üíÄ –ú–ï–†–¢–í–ê")
                
            if hasattr(spore, 'evolution_completed') and spore.evolution_completed:
                status_markers.append("üîµ –≠–í–û–õ–Æ–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê")
                
            if hasattr(spore, 'can_evolve') and spore.can_evolve():
                status_markers.append("üöÄ –ú–û–ñ–ï–¢ –≠–í–û–õ–Æ–¶–ò–û–ù–ò–†–û–í–ê–¢–¨")
            else:
                status_markers.append("üö´ –ù–ï –ú–û–ñ–ï–¢ –≠–í–û–õ–Æ–¶–ò–û–ù–ò–†–û–í–ê–¢–¨")
        
        active_marker = "üéØ" if i == current_active_index else "  "
        
        print(f"{active_marker} –°–ø–æ—Ä–∞ {spore.id}: {spore.calc_2d_pos()} | {' | '.join(status_markers)}")
    
    print("=" * 50)

def switch_active_spore(direction):
    """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—É—é —Å–ø–æ—Ä—É"""
    global current_active_index
    
    non_goal_spores = [i for i, spore in enumerate(spore_manager.objects) 
                       if not (hasattr(spore, 'is_goal') and spore.is_goal)]
    
    if direction == 'next':
        current_idx = non_goal_spores.index(current_active_index)
        next_idx = (current_idx + 1) % len(non_goal_spores)
        current_active_index = non_goal_spores[next_idx]
    elif direction == 'prev':
        current_idx = non_goal_spores.index(current_active_index)
        prev_idx = (current_idx - 1) % len(non_goal_spores)
        current_active_index = non_goal_spores[prev_idx]
    
    # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–ø–æ—Ä—É –≤ –∫–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞
    active_spore = spore_manager.objects[current_active_index]
    spore_manager.objects.remove(active_spore)
    spore_manager.objects.append(active_spore)
    
    current_active_index = len(spore_manager.objects) - 1
    
    print(f"\nüéØ –ê–ö–¢–ò–í–ù–ê–Ø –°–ü–û–†–ê: {active_spore.id}")
    print(f"   –ü–æ–∑–∏—Ü–∏—è: {active_spore.calc_2d_pos()}")
    print(f"   –ú–æ–∂–µ—Ç —ç–≤–æ–ª—é—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞—Ç—å: {active_spore.can_evolve()}")

print("\nüéÆ –ü–û–î–†–û–ë–ù–û–ï –£–ü–†–ê–í–õ–ï–ù–ò–ï:")
print("=" * 50)
print("üìç –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´:")
print("   F - —Å–æ–∑–¥–∞—Ç—å —Å–ø–æ—Ä—É –æ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π (—Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —ç–≤–æ–ª—é—Ü–∏–∏)")
print("   Q - –≤—ã—Ö–æ–¥ —Å –æ—Ç—á–µ—Ç–æ–º")
print()
print("üîÑ –°–ú–ï–ù–ê –ê–ö–¢–ò–í–ù–û–ô –°–ü–û–†–´:")
print("   N - —Å–ª–µ–¥—É—é—â–∞—è –∞–∫—Ç–∏–≤–Ω–∞—è —Å–ø–æ—Ä–∞")
print("   P - –ø—Ä–µ–¥—ã–¥—É—â–∞—è –∞–∫—Ç–∏–≤–Ω–∞—è —Å–ø–æ—Ä–∞") 
print("   1,2,3 - –≤—ã–±—Ä–∞—Ç—å —Å–ø–æ—Ä—É A,B,C –Ω–∞–ø—Ä—è–º—É—é")
print()
print("üìä –ò–ù–§–û–†–ú–ê–¶–ò–Ø:")
print("   I - –ø–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Å–ø–æ—Ä")
print()
print("üîç –í–ò–ó–£–ê–õ–ò–ó–ê–¶–ò–Ø:")
print("   E/T - –∏–∑–º–µ–Ω–∏—Ç—å –º–∞—Å—à—Ç–∞–±")
print("   R - —Å–±—Ä–æ—Å –º–∞—Å—à—Ç–∞–±–∞")
print()
print("üéØ –¶–ï–õ–¨ –¢–ï–°–¢–ê:")
print("   1. –û–±—ä–µ–¥–∏–Ω–∏—Ç—å —Å–ø–æ—Ä—É A —Å–æ —Å–ø–æ—Ä–æ–π B")
print("   2. –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ —Å–ø–æ—Ä–∞ A –±–æ–ª—å—à–µ –Ω–µ –º–æ–∂–µ—Ç —ç–≤–æ–ª—é—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞—Ç—å")
print("   3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ —Å–ø–æ—Ä–∞ C –º–æ–∂–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å —ç–≤–æ–ª—é—Ü–∏—é")
print("=" * 50)

def update():
    pass

def input(key):
    print(f"\nüéπ –ö–õ–ê–í–ò–®–ê –ù–ê–ñ–ê–¢–ê: '{key}'")
    print("-" * 30)
    
    if key == 'q' or key == 'escape':
        print("üìä –§–ò–ù–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ê:")
        print("=" * 50)
        
        completed_spores = 0
        evolving_spores = 0
        dead_spores = 0
        
        for spore in spore_manager.objects:
            if hasattr(spore, 'is_goal') and spore.is_goal:
                continue
            elif hasattr(spore, 'evolution_completed') and spore.evolution_completed:
                completed_spores += 1
            elif not spore.is_alive():
                dead_spores += 1
            elif hasattr(spore, 'can_evolve') and spore.can_evolve():
                evolving_spores += 1
        
        print(f"   –í—Å–µ–≥–æ —Å–ø–æ—Ä: {len(spore_manager.objects)}")
        print(f"   –í—Å–µ–≥–æ —Å–≤—è–∑–µ–π: {len(spore_manager.links)}")
        print(f"   üîµ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —ç–≤–æ–ª—é—Ü–∏–∏: {completed_spores}")
        print(f"   üöÄ –°–ø–æ—Å–æ–±–Ω—ã–µ —ç–≤–æ–ª—é—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞—Ç—å: {evolving_spores}")
        print(f"   üíÄ –ú–µ—Ä—Ç–≤—ã–µ —Å–ø–æ—Ä—ã: {dead_spores}")
        print("=" * 50)
        print("üëã –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!")
        application.quit()
        return
    
    if key == 'f':
        active_spore = spore_manager.objects[-1]
        print(f"‚ö° –ü–û–ü–´–¢–ö–ê –°–û–ó–î–ê–ù–ò–Ø –°–ü–û–†–´ –û–¢ {active_spore.id}")
        print(f"   üìç –¢–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è: {active_spore.calc_2d_pos()}")
        print(f"   üíö –ñ–∏–≤–∞: {active_spore.is_alive()}")
        print(f"   üîµ –≠–≤–æ–ª—é—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {getattr(active_spore, 'evolution_completed', False)}")
        print(f"   üöÄ –ú–æ–∂–µ—Ç —ç–≤–æ–ª—é—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞—Ç—å: {active_spore.can_evolve()}")
        
        result = spore_manager.generate_new_spore()
        
        if result:
            if result in spore_manager.objects[:-1]:
                print(f"   ‚úÖ –û–ë–™–ï–î–ò–ù–ï–ù–ò–ï! –°–æ–∑–¥–∞–Ω–∞ —Å–≤—è–∑—å –∫ —Å–ø–æ—Ä–µ {result.id}")
                print(f"   üîµ –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è —Å–ø–æ—Ä–∞ {active_spore.id} –∑–∞–≤–µ—Ä—à–∏–ª–∞ —ç–≤–æ–ª—é—Ü–∏—é")
            else:
                print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Å–ø–æ—Ä–∞: {result.id}")
        else:
            print(f"   ‚ùå –°–ø–æ—Ä–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞")
            
        print(f"   üìà –°–æ—Å—Ç–æ—è–Ω–∏–µ: {len(spore_manager.objects)} —Å–ø–æ—Ä, {len(spore_manager.links)} —Å–≤—è–∑–µ–π")
        return
    
    if key == 'i':
        show_spore_status()
        return
    
    if key == 'n':
        switch_active_spore('next')
        return
        
    if key == 'p':
        switch_active_spore('prev')
        return
    
    # –ü—Ä—è–º–æ–π –≤—ã–±–æ—Ä —Å–ø–æ—Ä
    if key == '1':
        for i, spore in enumerate(spore_manager.objects):
            if hasattr(spore, 'id') and spore.id == spore_a.id:
                spore_manager.objects.append(spore_manager.objects.pop(i))
                current_active_index = len(spore_manager.objects) - 1
                print(f"üéØ –í—ã–±—Ä–∞–Ω–∞ —Å–ø–æ—Ä–∞ A (ID: {spore_a.id})")
                break
        return
    elif key == '2':
        for i, spore in enumerate(spore_manager.objects):
            if hasattr(spore, 'id') and spore.id == spore_b.id:
                spore_manager.objects.append(spore_manager.objects.pop(i))
                current_active_index = len(spore_manager.objects) - 1
                print(f"üéØ –í—ã–±—Ä–∞–Ω–∞ —Å–ø–æ—Ä–∞ B (ID: {spore_b.id})")
                break
        return
    elif key == '3':
        for i, spore in enumerate(spore_manager.objects):
            if hasattr(spore, 'id') and spore.id == spore_c.id:
                spore_manager.objects.append(spore_manager.objects.pop(i))
                current_active_index = len(spore_manager.objects) - 1
                print(f"üéØ –í—ã–±—Ä–∞–Ω–∞ —Å–ø–æ—Ä–∞ C (ID: {spore_c.id})")
                break
        return
    
    # –ë–∞–∑–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
    if key == 'e':
        zoom_manager.zoom_in()
    elif key == 't':
        zoom_manager.zoom_out()
    elif key == 'r':
        zoom_manager.reset_zoom()
    else:
        print(f"   ‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–ª–∞–≤–∏—à–∞")

print("\n‚ú® –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —ç–≤–æ–ª—é—Ü–∏–∏ –∑–∞–ø—É—â–µ–Ω!")
print("üîç –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–ª–∞–≤–∏—à–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ª–æ–≥–∏–∫–∏")

# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
show_spore_status()

app.run() 