"""
–£–ü–†–û–©–ï–ù–ù–´–ô –¢–ï–°–¢
===============

–ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –±–µ–∑ —Å–ª–æ–∂–Ω–æ–π –ª–æ–≥–∏–∫–∏.
"""

import sys
import os
from ursina import *
import numpy as np
import json
import collections.abc

# --- –ü–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –≥–ª—É–±–æ–∫–æ–≥–æ —Å–ª–∏—è–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–æ–≤ ---
def deep_merge(d, u):
    """–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç —Å–ª–æ–≤–∞—Ä–∏."""
    for k, v in u.items():
        if isinstance(v, collections.abc.Mapping):
            d[k] = deep_merge(d.get(k, {}), v)
        else:
            d[k] = v
    return d

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—É—Ç–µ–π ---
script_dir = os.path.dirname(os.path.abspath(__file__))
project_root = os.path.abspath(os.path.join(script_dir, '..', '..'))
if project_root not in sys.path:
    sys.path.append(project_root)

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ---
with open(os.path.join(project_root, 'config', 'json', 'config.json'), 'r') as f:
    config = json.load(f)

with open(os.path.join(project_root, 'config', 'json', 'sizes.json'), 'r') as f:
    sizes_config = json.load(f)
    config = deep_merge(config, sizes_config)

# --- –ò–º–ø–æ—Ä—Ç—ã ---
from src.managers.color_manager import ColorManager
from src.visual.scene_setup import SceneSetup
from src.visual.frame import Frame
from src.managers.zoom_manager import ZoomManager
from src.utils.scalable import ScalableFloor
from src.logic.pendulum import PendulumSystem
from src.core.spore import Spore
from src.managers.spore_manager import SporeManager

print("=== –£–ü–†–û–©–ï–ù–ù–´–ô –¢–ï–°–¢ ===")
print("üéØ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏")
print("=" * 30)

# ===== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø =====
app = Ursina()
color_manager = ColorManager()

# ===== –°–û–ó–î–ê–ù–ò–ï –°–¶–ï–ù–´ =====
scene_config = config['scene_setup']
scene_setup = SceneSetup(
    init_position=scene_config['init_position'], 
    init_rotation_x=scene_config['init_rotation_x'], 
    init_rotation_y=scene_config['init_rotation_y'], 
    color_manager=color_manager
)

# ===== –°–û–ó–î–ê–ù–ò–ï ZOOM MANAGER =====
zoom_manager = ZoomManager(scene_setup, color_manager=color_manager)

# --- –°–û–ó–î–ê–ù–ò–ï –ü–û–õ–ê ---
floor = ScalableFloor(
    model='quad',
    scale=10,
    rotation_x=90,
    color=color_manager.get_color('scene', 'floor'),
    texture='white_cube',
    texture_scale=(40, 40)
)
zoom_manager.register_object(floor, name='floor')

# ===== –°–û–ó–î–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´ –ú–ê–Ø–¢–ù–ò–ö–ê =====
pendulum_config = config['pendulum']
pendulum = PendulumSystem(damping=pendulum_config['damping'])

# ===== –°–û–ó–î–ê–ù–ò–ï –¢–ï–°–¢–û–í–´–• –°–ü–û–† =====
print("\nüåü –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–ø–æ—Ä...")

goal_position = config['spore']['goal_position']

# –¶–ï–õ–¨
print("üìç –°–æ–∑–¥–∞–Ω–∏–µ —Ü–µ–ª–∏ –≤ –ø–æ–∑–∏—Ü–∏–∏", goal_position)
goal = Spore(
    pendulum=pendulum,
    dt=pendulum_config['dt'],
    scale=0.1,  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –¥–ª—è –≤–∏–¥–∏–º–æ—Å—Ç–∏
    position=(goal_position[0], 0, goal_position[1]),
    goal_position=goal_position,
    is_goal=True,
    color_manager=color_manager
)

# –°–ü–û–†–ê 1: –ø–æ–∑–∏—Ü–∏—è (0.68, 0.12) - –≤ 3D —ç—Ç–æ (0.68, 0, 0.12)
print("üìç –°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–æ—Ä—ã 1 –≤ –ø–æ–∑–∏—Ü–∏–∏ (0.68, 0.12)")
spore1 = Spore(
    pendulum=pendulum,
    dt=pendulum_config['dt'],
    goal_position=goal_position,
    scale=0.1,  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä
    position=(0.68, 0, 0.12),
    color_manager=color_manager,
    config=config.get('spore', {})
)

# –°–ü–û–†–ê 2: –ø–æ–∑–∏—Ü–∏—è (0, 2) - –≤ 3D —ç—Ç–æ (0, 0, 2)
print("üìç –°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–æ—Ä—ã 2 –≤ –ø–æ–∑–∏—Ü–∏–∏ (0, 2)")
spore2 = Spore(
    pendulum=pendulum,
    dt=pendulum_config['dt'],
    goal_position=goal_position,
    scale=0.1,  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä
    position=(0, 0, 2),
    color_manager=color_manager,
    config=config.get('spore', {})
)

# ===== –°–û–ó–î–ê–ù–ò–ï –ú–ï–ù–ï–î–ñ–ï–†–ê –°–ü–û–† =====
spore_manager = SporeManager(
    pendulum=pendulum, 
    zoom_manager=zoom_manager, 
    settings_param=None,  # –£–ø—Ä–æ—â–∞–µ–º
    color_manager=color_manager,
    angel_manager=None,  # –£–ø—Ä–æ—â–∞–µ–º
    config=config,
    spawn_area=None  # –£–ø—Ä–æ—â–∞–µ–º
)

# –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–æ—Ä—ã
print("\n‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ø–æ—Ä –≤ –º–µ–Ω–µ–¥–∂–µ—Ä...")
spore_manager.add_spore(goal)
spore_manager.add_spore(spore1)
spore_manager.add_spore(spore2)

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤ zoom manager
zoom_manager.register_object(goal, "goal_spore")
zoom_manager.register_object(spore1, "test_spore_1")
zoom_manager.register_object(spore2, "test_spore_2")

print(f"\n‚úÖ –°–æ–∑–¥–∞–Ω–æ —Å–ø–æ—Ä: {len(spore_manager.objects)}")
print("üìä –ü–æ–∑–∏—Ü–∏–∏ —Å–ø–æ—Ä:")
for i, spore in enumerate(spore_manager.objects):
    print(f"   –°–ø–æ—Ä–∞ {i}: 3D={spore.real_position}, 2D={spore.calc_2d_pos()}")

print("\nüéÆ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:")
print("F - —Å–æ–∑–¥–∞—Ç—å —Å–ª–µ–¥—É—é—â—É—é —Å–ø–æ—Ä—É")
print("E/T - –º–∞—Å—à—Ç–∞–±, R - —Å–±—Ä–æ—Å")
print("Q - –≤—ã—Ö–æ–¥")

def update():
    # –ë–∞–∑–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    pass

def input(key):
    print(f"üéπ –ö–õ–ê–í–ò–®–ê –ù–ê–ñ–ê–¢–ê: '{key}'")  # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    
    if key == 'q' or key == 'escape':
        print("\nüìä –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞")
        print(f"   –°–ø–æ—Ä: {len(spore_manager.objects)}")
        print(f"   –°–≤—è–∑–µ–π: {len(spore_manager.links)}")
        application.quit()
        return
    
    if key == 'f':
        print(f"\n‚ö° F –ù–ê–ñ–ê–¢–ê! –û–±—Ä–∞–±–æ—Ç–∫–∞...")
        print(f"   –í—Å–µ–≥–æ —Å–ø–æ—Ä: {len(spore_manager.objects)}")
        if spore_manager.objects:
            last_spore = spore_manager.objects[-1]
            print(f"   –ü–æ—Å–ª–µ–¥–Ω—è—è —Å–ø–æ—Ä–∞: ID={last_spore.id}")
            print(f"   –ü–æ–∑–∏—Ü–∏—è: 3D={last_spore.real_position}, 2D={last_spore.calc_2d_pos()}")
            print(f"   –ñ–∏–≤–∞: {last_spore.is_alive()}")
            print(f"   –û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {last_spore.logic.optimal_control}")
            print(f"   –û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ dt: {last_spore.logic.optimal_dt}")
            
            print("   üöÄ –í—ã–∑—ã–≤–∞–µ–º generate_new_spore()...")
            try:
                result = spore_manager.generate_new_spore()
                if result:
                    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Å–ø–æ—Ä–∞: ID={result.id}, –ø–æ–∑–∏—Ü–∏—è: {result.real_position}")
                    print(f"   –í—Å–µ–≥–æ —Å–ø–æ—Ä —Ç–µ–ø–µ—Ä—å: {len(spore_manager.objects)}")
                else:
                    print("‚ùå generate_new_spore() –≤–µ—Ä–Ω—É–ª None")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤ generate_new_spore(): {e}")
                import traceback
                traceback.print_exc()
        else:
            print("   ‚ö†Ô∏è –ù–µ—Ç —Å–ø–æ—Ä –≤ –º–µ–Ω–µ–¥–∂–µ—Ä–µ")
        return
    
    # –ë–∞–∑–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
    if key == 'e':
        print("üîç –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –º–∞—Å—à—Ç–∞–±–∞")
        zoom_manager.zoom_in()
    elif key == 't':
        print("üîç –£–º–µ–Ω—å—à–µ–Ω–∏–µ –º–∞—Å—à—Ç–∞–±–∞")
        zoom_manager.zoom_out()
    elif key == 'r':
        print("üîç –°–±—Ä–æ—Å –º–∞—Å—à—Ç–∞–±–∞")
        zoom_manager.reset_zoom()
    else:
        print(f"   ‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–ª–∞–≤–∏—à–∞: '{key}'")

print("\n‚ú® –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –∑–∞–ø—É—â–µ–Ω!")
app.run() 