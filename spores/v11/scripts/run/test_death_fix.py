#!/usr/bin/env python3
"""
–¢–ï–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –ü–†–ï–ñ–î–ï–í–†–ï–ú–ï–ù–ù–û–ô –°–ú–ï–†–¢–ò –°–ü–û–†
============================================

–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ —Å–ø–æ—Ä—ã —Ç–µ–ø–µ—Ä—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –¥–æ—Ö–æ–¥—è—Ç –¥–æ –∫—Ä–∞—Å–Ω–æ–π –ª–∏–Ω–∏–∏ (–º–∏–Ω–∏–º—É–º–∞ –∫–æ—Å—Ç–∞)
–≤–º–µ—Å—Ç–æ —Ç–æ–≥–æ —á—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å—Å—è –∑–∞ —à–∞–≥ –¥–æ –Ω–µ—ë.
"""

import os
import sys
import json
import collections.abc
import numpy as np
from ursina import *

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—É—Ç–µ–π
script_dir = os.path.dirname(os.path.abspath(__file__))
project_root = os.path.abspath(os.path.join(script_dir, '..', '..'))
if project_root not in sys.path:
    sys.path.append(project_root)

def deep_merge(d, u):
    """–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç —Å–ª–æ–≤–∞—Ä–∏."""
    for k, v in u.items():
        if isinstance(v, collections.abc.Mapping):
            d[k] = deep_merge(d.get(k, {}), v)
        else:
            d[k] = v
    return d

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥–∏
with open(os.path.join(project_root, 'config', 'json', 'config.json'), 'r') as f:
    config = json.load(f)

with open(os.path.join(project_root, 'config', 'json', 'sizes.json'), 'r') as f:
    sizes_config = json.load(f)
    config = deep_merge(config, sizes_config)

# –í–∫–ª—é—á–∞–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
config['trajectory_optimization']['debug_output'] = True

# –ò–º–ø–æ—Ä—Ç—ã
from src.logic.pendulum import PendulumSystem
from src.managers.color_manager import ColorManager
from src.managers.zoom_manager import ZoomManager
from src.managers.spore_manager import SporeManager
from src.visual.scene_setup import SceneSetup
from src.core.spore import Spore
from src.managers.window_manager import WindowManager

print("=" * 80)
print("üîß –¢–ï–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –ü–†–ï–ñ–î–ï–í–†–ï–ú–ï–ù–ù–û–ô –°–ú–ï–†–¢–ò –°–ü–û–†")
print("=" * 80)
print("üìã –¶–µ–ª—å —Ç–µ—Å—Ç–∞:")
print("   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ —Å–ø–æ—Ä—ã –¥–æ—Ö–æ–¥—è—Ç –¥–æ –∫—Ä–∞—Å–Ω–æ–π –ª–∏–Ω–∏–∏")
print("   ‚Ä¢ –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
print("   ‚Ä¢ –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—à–∞–≥–æ–≤–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –∫ –º–∏–Ω–∏–º—É–º—É –∫–æ—Å—Ç–∞")
print("=" * 80)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
app = Ursina()
color_manager = ColorManager()
scene_setup = SceneSetup(
    init_position=config['scene_setup']['init_position'], 
    init_rotation_x=config['scene_setup']['init_rotation_x'], 
    init_rotation_y=config['scene_setup']['init_rotation_y'], 
    color_manager=color_manager
)
zoom_manager = ZoomManager(scene_setup, color_manager=color_manager)
window_manager = WindowManager()

# –°–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
pendulum = PendulumSystem(damping=config['pendulum']['damping'])

# –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å–ø–æ—Ä
spore_manager = SporeManager(
    pendulum=pendulum,
    zoom_manager=zoom_manager,
    settings_param=None,
    color_manager=color_manager,
    config=config
)

# –°–æ–∑–¥–∞–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–π —Å–ø–æ—Ä—ã
goal_position = config['spore']['goal_position']
goal = Spore(
    pendulum=pendulum,
    dt=config['pendulum']['dt'],
    scale=config['spore']['scale'],
    position=(goal_position[0], 0, goal_position[1]),
    goal_position=goal_position,
    is_goal=True,
    color_manager=color_manager
)

# –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞—Ä—Ç–æ–≤–æ–π —Å–ø–æ—Ä—ã —á—É—Ç—å –¥–∞–ª—å—à–µ –æ—Ç —Ü–µ–ª–∏
start_position = (1.0, 0, 0.5)  # –ü–æ–∑–∏—Ü–∏—è, –æ—Ç–∫—É–¥–∞ —Ö–æ—Ä–æ—à–æ –≤–∏–¥–Ω–æ –¥–≤–∏–∂–µ–Ω–∏–µ –∫ —Ü–µ–ª–∏
spore_start = Spore(
    pendulum=pendulum,
    dt=config['pendulum']['dt'],
    goal_position=goal_position,
    scale=config['spore']['scale'],
    position=start_position,
    color_manager=color_manager,
    config=config.get('spore', {})
)

# –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–æ—Ä—ã –≤ –º–µ–Ω–µ–¥–∂–µ—Ä
spore_manager.add_spore(goal)
spore_manager.add_spore(spore_start)

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤ zoom_manager
zoom_manager.register_object(goal)
zoom_manager.register_object(spore_start)

step_count = 0

def show_detailed_status():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—ã–π —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Å–ø–æ—Ä."""
    print(f"\nüìä –î–ï–¢–ê–õ–¨–ù–´–ô –°–¢–ê–¢–£–° (—à–∞–≥ {step_count}):")
    print("=" * 60)
    
    for i, spore in enumerate(spore_manager.objects):
        if hasattr(spore, 'is_goal') and spore.is_goal:
            print(f"üéØ –¶–ï–õ–¨ {spore.id}: –ø–æ–∑–∏—Ü–∏—è {spore.calc_2d_pos()}, cost {spore.logic.cost:.4f}")
            continue
            
        status_parts = []
        if spore.is_alive():
            status_parts.append("üíö –ñ–ò–í–ê")
        else:
            status_parts.append("üíÄ –ú–ï–†–¢–í–ê")
            
        if hasattr(spore, 'evolution_completed') and spore.evolution_completed:
            status_parts.append("üîµ –≠–í–û–õ–Æ–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê")
            
        if hasattr(spore, 'can_evolve') and spore.can_evolve():
            status_parts.append("üöÄ –ú–û–ñ–ï–¢ –≠–í–û–õ–Æ–¶–ò–û–ù–ò–†–û–í–ê–¢–¨")
        else:
            status_parts.append("üö´ –ù–ï –ú–û–ñ–ï–¢ –≠–í–û–õ–Æ–¶–ò–û–ù–ò–†–û–í–ê–¢–¨")
        
        print(f"üî∏ –°–ø–æ—Ä–∞ {spore.id}:")
        print(f"   üìç –ü–æ–∑–∏—Ü–∏—è: {spore.calc_2d_pos()}")
        print(f"   üí∞ Cost: {spore.logic.cost:.6f}")
        print(f"   üìä –°—Ç–∞—Ç—É—Å: {' | '.join(status_parts)}")
        if spore.logic.optimal_control is not None:
            print(f"   üéÆ –û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {spore.logic.optimal_control}")
            print(f"   ‚è±Ô∏è  –û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ dt: {spore.logic.optimal_dt}")
        print()
    
    print(f"üìà –°–í–û–î–ö–ê:")
    print(f"   –í—Å–µ–≥–æ —Å–ø–æ—Ä: {len(spore_manager.objects)}")
    print(f"   –í—Å–µ–≥–æ —Å–≤—è–∑–µ–π: {len(spore_manager.links)}")
    print("=" * 60)

def update():
    pass

def input(key):
    global step_count
    
    if key == 'q' or key == 'escape':
        print(f"\nüìã –§–ò–ù–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ê:")
        print("=" * 60)
        print(f"   –°–¥–µ–ª–∞–Ω–æ —à–∞–≥–æ–≤: {step_count}")
        print(f"   –ò—Ç–æ–≥–æ —Å–ø–æ—Ä: {len(spore_manager.objects)}")
        print(f"   –ò—Ç–æ–≥–æ —Å–≤—è–∑–µ–π: {len(spore_manager.links)}")
        
        # –ê–Ω–∞–ª–∏–∑ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        for spore in spore_manager.objects:
            if not (hasattr(spore, 'is_goal') and spore.is_goal):
                final_cost = spore.logic.cost
                if final_cost < 0.1:
                    print(f"   ‚úÖ –°–ø–æ—Ä–∞ {spore.id} –±–ª–∏–∑–∫–æ –∫ —Ü–µ–ª–∏ (cost: {final_cost:.6f})")
                elif not spore.is_alive():
                    print(f"   ü™¶ –°–ø–æ—Ä–∞ {spore.id} –¥–æ—Å—Ç–∏–≥–ª–∞ –º–∏–Ω–∏–º—É–º–∞ –∏ —É–º–µ—Ä–ª–∞ (cost: {final_cost:.6f})")
                else:
                    print(f"   ‚è≥ –°–ø–æ—Ä–∞ {spore.id} –µ—â–µ –≤ –ø—É—Ç–∏ (cost: {final_cost:.6f})")
        
        print("=" * 60)
        print("üëã –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!")
        application.quit()
        return
    
    if key == 'f':
        print(f"\n‚ö° –®–ê–ì {step_count + 1}: –°–û–ó–î–ê–ù–ò–ï –ù–û–í–û–ô –°–ü–û–†–´")
        print("-" * 50)
        
        last_spore = spore_manager.objects[-1]
        if hasattr(last_spore, 'is_goal') and last_spore.is_goal:
            print("‚ö†Ô∏è  –ê–∫—Ç–∏–≤–Ω–∞ —Ü–µ–ª–µ–≤–∞—è —Å–ø–æ—Ä–∞, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â—É—é")
            if len(spore_manager.objects) > 1:
                # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –Ω–µ-—Ü–µ–ª—å –≤ –∫–æ–Ω–µ—Ü
                for spore in spore_manager.objects:
                    if not (hasattr(spore, 'is_goal') and spore.is_goal):
                        spore_manager.objects.remove(spore)
                        spore_manager.objects.append(spore)
                        break
                last_spore = spore_manager.objects[-1]
        
        print(f"üéØ –ê–∫—Ç–∏–≤–Ω–∞—è —Å–ø–æ—Ä–∞: {last_spore.id}")
        print(f"   üìç –¢–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è: {last_spore.calc_2d_pos()}")
        print(f"   üí∞ –¢–µ–∫—É—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {last_spore.logic.cost:.6f}")
        print(f"   üíö –ñ–∏–≤–∞: {last_spore.is_alive()}")
        print(f"   üöÄ –ú–æ–∂–µ—Ç —ç–≤–æ–ª—é—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞—Ç—å: {last_spore.can_evolve()}")
        
        if last_spore.logic.optimal_control is not None:
            print(f"   üéÆ –û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {last_spore.logic.optimal_control}")
            print(f"   ‚è±Ô∏è  –û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ dt: {last_spore.logic.optimal_dt}")
            
            # –ü—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ–º, –∫—É–¥–∞ –ø–æ–π–¥–µ—Ç —Å–ø–æ—Ä–∞
            predicted_pos_3d = last_spore.evolve_3d(
                control=last_spore.logic.optimal_control,
                dt=last_spore.logic.optimal_dt
            )
            predicted_pos_2d = np.array([predicted_pos_3d[0], predicted_pos_3d[2]])
            predicted_cost = np.linalg.norm(predicted_pos_2d - np.array(goal_position))
            print(f"   üîÆ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è: {predicted_pos_2d}")
            print(f"   üîÆ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {predicted_cost:.6f}")
        
        print("\nüöÄ –í—ã–∑—ã–≤–∞–µ–º generate_new_spore()...")
        result = spore_manager.generate_new_spore()
        
        if result:
            step_count += 1
            if result != last_spore:  # –ù–æ–≤–∞—è —Å–ø–æ—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞
                print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Å–ø–æ—Ä–∞: {result.id}")
                print(f"   üìç –ü–æ–∑–∏—Ü–∏—è: {result.calc_2d_pos()}")
                print(f"   üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {result.logic.cost:.6f}")
            else:  # –ü—Ä–æ–∏–∑–æ—à–ª–æ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ
                print(f"üîÑ –ü—Ä–æ–∏–∑–æ—à–ª–æ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–ø–æ—Ä–æ–π")
        else:
            print(f"‚ùå –°–ø–æ—Ä–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞ (–≤–æ–∑–º–æ–∂–Ω–æ, —ç–≤–æ–ª—é—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞)")
            
        show_detailed_status()
        return
    
    if key == 'i':
        show_detailed_status()
        return
        
    if key == 'auto':
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–≥–æ–Ω –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —ç–≤–æ–ª—é—Ü–∏–∏
        print(f"\nü§ñ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –†–ï–ñ–ò–ú")
        max_steps = 20
        while step_count < max_steps:
            result = spore_manager.generate_new_spore() 
            if result:
                step_count += 1
                print(f"–®–∞–≥ {step_count}: —Å–ø–æ—Ä–∞ {result.id}, cost: {result.logic.cost:.6f}")
            else:
                print(f"–≠–≤–æ–ª—é—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –Ω–∞ —à–∞–≥–µ {step_count}")
                break
        show_detailed_status()

print(f"\nüéÆ –£–ü–†–ê–í–õ–ï–ù–ò–ï:")
print("=" * 40)
print("   F - —Å–æ–∑–¥–∞—Ç—å —Å–ª–µ–¥—É—é—â—É—é —Å–ø–æ—Ä—É")
print("   I - –ø–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å") 
print("   Q - –≤—ã—Ö–æ–¥ —Å –æ—Ç—á–µ—Ç–æ–º")
print("   AUTO - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–≥–æ–Ω")
print("=" * 40)
print()
print("üîç –ß–¢–û –ù–ê–ë–õ–Æ–î–ê–¢–¨:")
print("   ‚Ä¢ –°–ø–æ—Ä—ã –¥–æ–ª–∂–Ω—ã —Ä–µ–∞–ª—å–Ω–æ –¥–æ—Ö–æ–¥–∏—Ç—å –¥–æ –∫—Ä–∞—Å–Ω–æ–π –ª–∏–Ω–∏–∏")
print("   ‚Ä¢ Cost –¥–æ–ª–∂–µ–Ω —É–º–µ–Ω—å—à–∞—Ç—å—Å—è –ø—Ä–∏ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–∏ –∫ —Ü–µ–ª–∏")
print("   ‚Ä¢ –ü—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –º–∏–Ω–∏–º—É–º–∞ optimal_dt ‚Üí 0 –∏ —Å–ø–æ—Ä–∞ —É–º–∏—Ä–∞–µ—Ç")
print("   ‚Ä¢ –ù–∏–∫–∞–∫–∏—Ö –ø—Ä–µ–∂–¥–µ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ—Å—Ç–∞–Ω–æ–≤–æ–∫!")
print("=" * 40)

show_detailed_status()

app.run() 