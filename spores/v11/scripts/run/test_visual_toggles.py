#!/usr/bin/env python3
"""
–¢–ï–°–¢ –ü–ï–†–ï–ö–õ–Æ–ß–ï–ù–ò–Ø –í–ò–ó–£–ê–õ–ò–ó–ê–¶–ò–ò
=============================

–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏:
- Y: –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∞–Ω–≥–µ–ª–æ–≤ (angels/pillars)  
- C: –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ (cost surface)

–ß—Ç–æ —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç—Å—è:
1. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏ –∞–Ω–≥–µ–ª—ã, –∏ cost surface –≤—ã–∫–ª—é—á–µ–Ω—ã
2. –ö–Ω–æ–ø–∫–∞ Y –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –∞–Ω–≥–µ–ª–æ–≤
3. –ö–Ω–æ–ø–∫–∞ C –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç cost surface
4. –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ
"""

import os
import sys
import json
import collections.abc
from ursina import *
import numpy as np

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—É—Ç–µ–π
script_dir = os.path.dirname(os.path.abspath(__file__))
project_root = os.path.abspath(os.path.join(script_dir, '..', '..'))
if project_root not in sys.path:
    sys.path.append(project_root)

def deep_merge(d, u):
    """–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç —Å–ª–æ–≤–∞—Ä–∏."""
    for k, v in u.items():
        if isinstance(v, collections.abc.Mapping):
            d[k] = deep_merge(d.get(k, {}), v)
        else:
            d[k] = v
    return d

print("üß™ –¢–ï–°–¢ –ü–ï–†–ï–ö–õ–Æ–ß–ï–ù–ò–Ø –í–ò–ó–£–ê–õ–ò–ó–ê–¶–ò–ò")
print("=" * 50)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
config_path = os.path.join(project_root, 'config', 'json', 'config.json')
with open(config_path, 'r', encoding='utf-8') as f:
    config = json.load(f)

print("üìã –ü–†–û–í–ï–†–ö–ê –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò –ü–û –£–ú–û–õ–ß–ê–ù–ò–Æ:")
print(f"   cost_surface.enabled: {config.get('cost_surface', {}).get('enabled', '–ù–ï –ù–ê–ô–î–ï–ù')}")
print(f"   angel.show_angels: {config.get('angel', {}).get('show_angels', '–ù–ï –ù–ê–ô–î–ï–ù')}")
print(f"   angel.show_pillars: {config.get('angel', {}).get('show_pillars', '–ù–ï –ù–ê–ô–î–ï–ù')}")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—Å—ë –≤—ã–∫–ª—é—á–µ–Ω–æ
cost_enabled = config.get('cost_surface', {}).get('enabled', True)
angels_enabled = config.get('angel', {}).get('show_angels', True)
pillars_enabled = config.get('angel', {}).get('show_pillars', True)

if not cost_enabled and not angels_enabled and not pillars_enabled:
    print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞ - –≤—Å—ë –≤—ã–∫–ª—é—á–µ–Ω–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
else:
    print("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –ù–µ –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤—ã–∫–ª—é—á–µ–Ω—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:")
    print(f"   cost_surface.enabled: {cost_enabled}")
    print(f"   angel.show_angels: {angels_enabled}")
    print(f"   angel.show_pillars: {pillars_enabled}")

print("\nüéÆ –£–ü–†–ê–í–õ–ï–ù–ò–ï –í –¢–ï–°–¢–ï:")
print("   Y - –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –∞–Ω–≥–µ–ª–æ–≤")
print("   C - –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç–∏")
print("   Q - –í—ã—Ö–æ–¥")
print("   WASD - –î–≤–∏–∂–µ–Ω–∏–µ, –º—ã—à—å - –ø–æ–≤–æ—Ä–æ—Ç")

# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è
try:
    from src.visual.spawn_area_visualizer import SpawnAreaVisualizer
    from src.logic.spawn_area import SpawnArea as SpawnAreaLogic
    from src.logic.cost_function import CostFunction
    from src.visual.cost_visualizer import CostVisualizer
    from src.managers.color_manager import ColorManager
    from src.visual.scene_setup import SceneSetup
    from src.managers.zoom_manager import ZoomManager
    from src.utils.scalable import Scalable, ScalableFloor
    from src.logic.pendulum import PendulumSystem
    from src.core.spore import Spore
    from src.managers.spore_manager import SporeManager
    from src.managers.param_manager import ParamManager
    from src.managers.angel_manager import AngelManager
    from src.managers.input_manager import InputManager

    print("\n‚úÖ –í—Å–µ –º–æ–¥—É–ª–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")

    # ===== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø =====
    app = Ursina()
    color_manager = ColorManager()

    # ===== –°–û–ó–î–ê–ù–ò–ï –°–¶–ï–ù–´ =====
    scene_config = config['scene_setup']
    scene_setup = SceneSetup(
        init_position=scene_config['init_position'], 
        init_rotation_x=scene_config['init_rotation_x'], 
        init_rotation_y=scene_config['init_rotation_y'], 
        color_manager=color_manager
    )

    # ===== –°–û–ó–î–ê–ù–ò–ï ZOOM MANAGER =====
    zoom_manager = ZoomManager(scene_setup, color_manager=color_manager)
    angel_manager = AngelManager(color_manager=color_manager, zoom_manager=zoom_manager, config=config)

    # --- –°–û–ó–î–ê–ù–ò–ï –ü–û–õ–ê ---
    floor = ScalableFloor(
        model='quad',
        scale=config['scene']['floor_scale'],
        rotation_x=90,
        color=color_manager.get_color('scene', 'floor'),
        texture='white_cube',
        texture_scale=(40, 40)
    )
    zoom_manager.register_object(floor, name='floor')

    # ===== –°–û–ó–î–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´ –ú–ê–Ø–¢–ù–ò–ö–ê –ò –°–ü–û–† =====
    pendulum_config = config['pendulum']
    pendulum = PendulumSystem(damping=pendulum_config['damping'])

    goal_position = config['spore']['goal_position']
    goal = Spore(
        pendulum=pendulum,
        dt=pendulum_config['dt'],
        scale=config['spore']['scale'],
        position=(goal_position[0], 0, goal_position[1]),
        goal_position=goal_position,
        is_goal=True,
        color_manager=color_manager
    )

    spore = Spore(
        pendulum=pendulum,
        dt=pendulum_config['dt'],
        goal_position=goal_position,
        scale=config['spore']['scale'],
        position=(0, 0, 2),
        color_manager=color_manager,
        config=config.get('spore', {})
    )

    # ===== –°–û–ó–î–ê–ù–ò–ï –û–ë–õ–ê–°–¢–ò –°–ü–ê–í–ù–ê =====
    spawn_area_logic = SpawnAreaLogic(
        focus1=spore.logic.position_2d,
        focus2=goal.logic.position_2d,
        eccentricity=config['spawn_area']['eccentricity']
    )

    # ===== –°–û–ó–î–ê–ù–ò–ï COST SURFACE =====
    cost_surface_parent = Scalable()
    cost_logic = CostFunction(goal_position_2d=np.array([goal.position[0], goal.position[2]]))
    cost_surface = CostVisualizer(
        cost_function=cost_logic,
        spawn_area=spawn_area_logic,
        parent_entity=cost_surface_parent,
        color_manager=color_manager,
        config=config['cost_surface']
    )
    angel_manager.cost_function = cost_logic

    # ===== –°–û–ó–î–ê–ù–ò–ï –ú–ï–ù–ï–î–ñ–ï–†–û–í =====
    settings_param = ParamManager(0, show=False, color_manager=color_manager)
    spore_manager = SporeManager(
        pendulum=pendulum, 
        zoom_manager=zoom_manager, 
        settings_param=settings_param, 
        color_manager=color_manager,
        angel_manager=angel_manager,
        config=config,
        spawn_area=spawn_area_logic
    )

    # ===== –°–û–ó–î–ê–ù–ò–ï INPUT MANAGER =====
    input_manager = InputManager(
        scene_setup=scene_setup,
        zoom_manager=zoom_manager,
        spore_manager=spore_manager,
        spawn_area_manager=None,
        param_manager=settings_param,
        ui_setup=None,
        angel_manager=angel_manager,
        cost_visualizer=cost_surface
    )

    # ===== –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –û–ë–™–ï–ö–¢–û–í =====
    spore_manager.add_spore(goal)
    spore_manager.add_spore(spore)
    zoom_manager.register_object(goal)
    zoom_manager.register_object(spore)
    zoom_manager.register_object(cost_surface_parent)
    zoom_manager.update_transform()

    print("‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è —Å—Ü–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∞")
    print(f"üìä –ù–ê–ß–ê–õ–¨–ù–û–ï –°–û–°–¢–û–Ø–ù–ò–ï:")
    print(f"   Cost surface –≤–∏–¥–∏–º–∞: {cost_surface.visible}")
    print(f"   –ê–Ω–≥–µ–ª—ã –≤–∏–¥–∏–º—ã: {angel_manager.angels_visible}")
    print(f"   –°—Ç–æ–ª–±—ã –≤–∏–¥–∏–º—ã: {angel_manager.pillars_visible}")

    # ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò =====
    def input(key):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞."""
        if key == 'q' or key == 'escape':
            application.quit()
            return
        
        input_manager.handle_input(key)

    def update():
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.""" 
        pass

    print("\nüöÄ –°–ò–ú–£–õ–Ø–¶–ò–Ø –ó–ê–ü–£–©–ï–ù–ê")
    print("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Y –∏ C –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏")
    
    # ===== –ó–ê–ü–£–°–ö =====
    app.run()

except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    print("‚ÑπÔ∏è  –í–æ–∑–º–æ–∂–Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç Ursina –∏–ª–∏ –¥—Ä—É–≥–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏")
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∞: {e}")
    import traceback
    traceback.print_exc()

if __name__ == "__main__":
    pass  # –ö–æ–¥ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω –≤—ã—à–µ 