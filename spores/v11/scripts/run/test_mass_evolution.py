#!/usr/bin/env python3
"""
–¢–ï–°–¢ –ú–ê–°–°–û–í–û–ì–û –†–ê–ó–í–ò–¢–ò–Ø –ö–ê–ù–î–ò–î–ê–¢–û–í
=================================

–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∫–Ω–æ–ø–∫–∏ V - —Ä–∞–∑–≤–∏—Ç–∏–µ –≤—Å–µ—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –¥–æ —Å–º–µ—Ä—Ç–∏ –∏–ª–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —ç–≤–æ–ª—é—Ü–∏–∏.

–ß—Ç–æ —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç—Å—è:
1. –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞–Ω–¥–∏–¥–∞—Ç—Å–∫–∏—Ö —Å–ø–æ—Ä
2. –ú–∞—Å—Å–æ–≤–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è –≤—Å–µ—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
3. –†–∞–∑–≤–∏—Ç–∏–µ –∫–∞–∂–¥–æ–≥–æ –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —ç–≤–æ–ª—é—Ü–∏–∏
4. –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞
"""

import os
import sys
import json
import collections.abc
import numpy as np

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—É—Ç–µ–π
script_dir = os.path.dirname(os.path.abspath(__file__))
project_root = os.path.abspath(os.path.join(script_dir, '..', '..'))
if project_root not in sys.path:
    sys.path.append(project_root)

def deep_merge(d, u):
    """–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç —Å–ª–æ–≤–∞—Ä–∏."""
    for k, v in u.items():
        if isinstance(v, collections.abc.Mapping):
            d[k] = deep_merge(d.get(k, {}), v)
        else:
            d[k] = v
    return d

def simulate_mass_evolution():
    """–°–∏–º—É–ª–∏—Ä—É–µ—Ç –º–∞—Å—Å–æ–≤–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –±–µ–∑ GUI."""
    
    print("üß™ –°–ò–ú–£–õ–Ø–¶–ò–Ø –ú–ê–°–°–û–í–û–ì–û –†–ê–ó–í–ò–¢–ò–Ø –ö–ê–ù–î–ò–î–ê–¢–û–í")
    print("=" * 50)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config_path = os.path.join(project_root, 'config', 'json', 'config.json')
    with open(config_path, 'r', encoding='utf-8') as f:
        config = json.load(f)
    
    # –í–∫–ª—é—á–∞–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
    test_config = {
        'trajectory_optimization': {
            'debug_output': True,
            'tolerance': 0.1
        },
        'spore': {
            'goal_position': [3.14159, 0],
            'scale': 0.05
        },
        'pendulum': {
            'dt': 0.1
        }
    }
    config = deep_merge(config, test_config)
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–ª–∞—Å—Å—ã
        from src.logic.pendulum import PendulumSystem
        from src.logic.spawn_area import SpawnArea
        from src.managers.spore_manager import SporeManager
        from src.managers.color_manager import ColorManager
        from src.managers.zoom_manager import ZoomManager
        from src.visual.scene_setup import SceneSetup
        from src.core.spore import Spore
        
        print("‚úÖ –í—Å–µ –º–æ–¥—É–ª–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
        
        # –°–æ–∑–¥–∞–µ–º –º–æ–∫–∏ –¥–ª—è –æ–±—ä–µ–∫—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω—ã —Ç–æ–ª—å–∫–æ –¥–ª—è UI
        class MockZoomManager:
            def register_object(self, obj, name): 
                print(f"   üîß [MOCK] –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—ä–µ–∫—Ç–∞: {name}")
            def unregister_object(self, name): 
                print(f"   üîß [MOCK] –£–¥–∞–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞: {name}")
            def update_transform(self): 
                print(f"   üîß [MOCK] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏")
        
        # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        pendulum = PendulumSystem(config.get('pendulum', {}))
        color_manager = ColorManager()
        zoom_manager = MockZoomManager()
        
        # –°–æ–∑–¥–∞–µ–º –æ–±–ª–∞—Å—Ç—å —Å–ø–∞–≤–Ω–∞
        spawn_area = SpawnArea(
            center=(0, 0),
            semi_axes=(2.0, 1.5),
            config=config.get('spawn_area', {})
        )
        
        # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —Å–ø–æ—Ä
        spore_manager = SporeManager(
            pendulum=pendulum,
            zoom_manager=zoom_manager,
            settings_param=None,
            color_manager=color_manager,
            angel_manager=None,
            config=config,
            spawn_area=spawn_area
        )
        
        print("‚úÖ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
        
        # –°–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é —Å–ø–æ—Ä—É
        initial_spore = Spore(
            pendulum=pendulum,
            dt=config.get('pendulum', {}).get('dt', 0.1),
            goal_position=config.get('spore', {}).get('goal_position', [3.14159, 0]),
            scale=config.get('spore', {}).get('scale', 0.05),
            position=(0, 0, 0),
            color_manager=color_manager,
            config=config.get('spore', {})
        )
        
        spore_manager.add_spore(initial_spore)
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –Ω–∞—á–∞–ª—å–Ω–∞—è —Å–ø–æ—Ä–∞ {initial_spore.id}")
        
        # –°–æ–∑–¥–∞–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç—Å–∫–∏—Ö —Å–ø–æ—Ä
        print("\nüìä –°–û–ó–î–ê–ù–ò–ï –ö–ê–ù–î–ò–î–ê–¢–û–í:")
        spore_manager.generate_candidate_spores()
        
        candidates_count = len(spore_manager.candidate_spores)
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤: {candidates_count}")
        
        if candidates_count == 0:
            print("‚ùå –ù–µ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        max_test_candidates = 3
        if candidates_count > max_test_candidates:
            print(f"üìä –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã—Ö {max_test_candidates} –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤")
            # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
            for candidate in spore_manager.candidate_spores[max_test_candidates:]:
                spore_manager.zoom_manager.unregister_object(candidate.id)
            spore_manager.candidate_spores = spore_manager.candidate_spores[:max_test_candidates]
        
        print(f"\nüöÄ –ù–ê–ß–ò–ù–ê–ï–ú –¢–ï–°–¢ –ú–ê–°–°–û–í–û–ì–û –†–ê–ó–í–ò–¢–ò–Ø:")
        print(f"   üìä –ö–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {len(spore_manager.candidate_spores)}")
        print(f"   üìä –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–ø–æ—Ä –¥–æ —Ç–µ—Å—Ç–∞: {len(spore_manager.objects)}")
        print(f"   üìä –°–≤—è–∑–µ–π –¥–æ —Ç–µ—Å—Ç–∞: {len(spore_manager.links)}")
        
        # –û–°–ù–û–í–ù–û–ô –¢–ï–°–¢: –º–∞—Å—Å–æ–≤–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ
        spore_manager.evolve_all_candidates_to_completion()
        
        print(f"\nüìà –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ê:")
        print(f"   üìä –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–ø–æ—Ä –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∞: {len(spore_manager.objects)}")
        print(f"   üìä –°–≤—è–∑–µ–π –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∞: {len(spore_manager.links)}")
        print(f"   üìä –û—Å—Ç–∞–≤—à–∏—Ö—Å—è –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤: {len(spore_manager.candidate_spores)}")
        
        # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        alive_spores = [s for s in spore_manager.objects if s.is_alive()]
        dead_spores = [s for s in spore_manager.objects if not s.is_alive()]
        completed_spores = [s for s in spore_manager.objects if s.evolution_completed]
        
        print(f"\nüîç –î–ï–¢–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"   üíö –ñ–∏–≤—ã—Ö —Å–ø–æ—Ä: {len(alive_spores)}")
        print(f"   üíÄ –ú–µ—Ä—Ç–≤—ã—Ö —Å–ø–æ—Ä: {len(dead_spores)}")
        print(f"   üèÅ –ó–∞–≤–µ—Ä—à–∏–≤—à–∏—Ö —ç–≤–æ–ª—é—Ü–∏—é: {len(completed_spores)}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏
        print(f"\nüìç –§–ò–ù–ê–õ–¨–ù–´–ï –ü–û–ó–ò–¶–ò–ò –°–ü–û–†:")
        for spore in spore_manager.objects:
            status = ""
            if not spore.is_alive():
                status = "üíÄ –º–µ—Ä—Ç–≤–∞"
            elif spore.evolution_completed:
                status = "üèÅ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
            else:
                status = "üíö –∂–∏–≤–∞"
                
            print(f"   –°–ø–æ—Ä–∞ {spore.id}: {spore.calc_2d_pos()} - cost: {spore.logic.cost:.6f} - {status}")
        
        print(f"\nüéâ –¢–ï–°–¢ –ú–ê–°–°–û–í–û–ì–û –†–ê–ó–í–ò–¢–ò–Ø –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û!")
        
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ (–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç Ursina): {e}")
        print("‚ÑπÔ∏è  –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è headless —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    simulate_mass_evolution() 