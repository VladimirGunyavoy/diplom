#!/usr/bin/env python3
"""
–¢–ï–°–¢ –°–ò–°–¢–ï–ú–´ –û–¢–õ–ê–î–û–ß–ù–û–ì–û –í–´–í–û–î–ê
==============================

–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç–ª–∞–¥–æ—á–Ω—ã–º –≤—ã–≤–æ–¥–æ–º:
- –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—Å—ë –≤—ã–∫–ª—é—á–µ–Ω–æ (–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å)
- –†–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–ª–∞–≥–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ—Ç–ª–∞–¥–∫–∏
- –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é

–ß—Ç–æ —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç—Å—è:
1. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ—Ç–ª–∞–¥–æ—á–Ω—ã–µ –ø—Ä–∏–Ω—Ç—ã –≤—ã–∫–ª—é—á–µ–Ω—ã
2. –§–ª–∞–≥–∏ –≤ config.json –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —É–ø—Ä–∞–≤–ª—è—é—Ç –≤—ã–≤–æ–¥–æ–º
3. always_print() —Ä–∞–±–æ—Ç–∞–µ—Ç –≤—Å–µ–≥–¥–∞
4. –†–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –æ—Ç–ª–∞–¥–∫–∏ (verbose, evolution, candidate, trajectory)
"""

import os
import sys
import json
import collections.abc

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—É—Ç–µ–π
script_dir = os.path.dirname(os.path.abspath(__file__))
project_root = os.path.abspath(os.path.join(script_dir, '..', '..'))
if project_root not in sys.path:
    sys.path.append(project_root)

def deep_merge(d, u):
    """–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç —Å–ª–æ–≤–∞—Ä–∏."""
    for k, v in u.items():
        if isinstance(v, collections.abc.Mapping):
            d[k] = deep_merge(d.get(k, {}), v)
        else:
            d[k] = v
    return d

print("üß™ –¢–ï–°–¢ –°–ò–°–¢–ï–ú–´ –û–¢–õ–ê–î–û–ß–ù–û–ì–û –í–´–í–û–î–ê")
print("=" * 50)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
config_path = os.path.join(project_root, 'config', 'json', 'config.json')
with open(config_path, 'r', encoding='utf-8') as f:
    config = json.load(f)

print("üìã –ü–†–û–í–ï–†–ö–ê –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò –ü–û –£–ú–û–õ–ß–ê–ù–ò–Æ:")
debug_config = config.get('debug', {})
print(f"   enable_verbose_output: {debug_config.get('enable_verbose_output', '–ù–ï –ù–ê–ô–î–ï–ù')}")
print(f"   enable_detailed_evolution: {debug_config.get('enable_detailed_evolution', '–ù–ï –ù–ê–ô–î–ï–ù')}")
print(f"   enable_candidate_logging: {debug_config.get('enable_candidate_logging', '–ù–ï –ù–ê–ô–î–ï–ù')}")
print(f"   enable_trajectory_logging: {debug_config.get('enable_trajectory_logging', '–ù–ï –ù–ê–ô–î–ï–ù')}")

try:
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É –æ—Ç–ª–∞–¥–æ—á–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
    from src.utils.debug_output import (
        init_debug_output, debug_print, evolution_print, 
        candidate_print, trajectory_print, always_print
    )
    
    print("\n‚úÖ –ú–æ–¥—É–ª—å debug_output —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω")
    
    # –¢–µ—Å—Ç 1: –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—Å—ë –≤—ã–∫–ª—é—á–µ–Ω–æ
    print("\nüß™ –¢–ï–°–¢ 1: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–≤—Å—ë –≤—ã–∫–ª—é—á–µ–Ω–æ)")
    init_debug_output(config)
    
    print("–ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ—Ç–ª–∞–¥–æ—á–Ω—ã–µ –ø—Ä–∏–Ω—Ç—ã –ù–ï –≤—ã–≤–æ–¥—è—Ç—Å—è:")
    debug_print("   üî∏ debug_print: –≠—Ç–æ—Ç —Ç–µ–∫—Å—Ç –ù–ï –¥–æ–ª–∂–µ–Ω –ø–æ—è–≤–∏—Ç—å—Å—è")
    evolution_print("   üß¨ evolution_print: –≠—Ç–æ—Ç —Ç–µ–∫—Å—Ç –ù–ï –¥–æ–ª–∂–µ–Ω –ø–æ—è–≤–∏—Ç—å—Å—è")  
    candidate_print("   ‚ö™ candidate_print: –≠—Ç–æ—Ç —Ç–µ–∫—Å—Ç –ù–ï –¥–æ–ª–∂–µ–Ω –ø–æ—è–≤–∏—Ç—å—Å—è")
    trajectory_print("   üîó trajectory_print: –≠—Ç–æ—Ç —Ç–µ–∫—Å—Ç –ù–ï –¥–æ–ª–∂–µ–Ω –ø–æ—è–≤–∏—Ç—å—Å—è")
    always_print("   ‚úÖ always_print: –≠—Ç–æ—Ç —Ç–µ–∫—Å—Ç –î–û–õ–ñ–ï–ù –ø–æ—è–≤–∏—Ç—å—Å—è")
    
    # –¢–µ—Å—Ç 2: –í–∫–ª—é—á–∞–µ–º –≤—Å–µ —Ñ–ª–∞–≥–∏
    print("\nüß™ –¢–ï–°–¢ 2: –í–∫–ª—é—á–∞–µ–º –≤—Å–µ —Ñ–ª–∞–≥–∏ –æ—Ç–ª–∞–¥–∫–∏")
    test_config = deep_merge(config, {
        'debug': {
            'enable_verbose_output': True,
            'enable_detailed_evolution': True,
            'enable_candidate_logging': True,
            'enable_trajectory_logging': True
        }
    })
    
    init_debug_output(test_config)
    
    print("–ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –í–°–ï –æ—Ç–ª–∞–¥–æ—á–Ω—ã–µ –ø—Ä–∏–Ω—Ç—ã —Ç–µ–ø–µ—Ä—å –≤—ã–≤–æ–¥—è—Ç—Å—è:")
    debug_print("   üî∏ debug_print: –≠—Ç–æ—Ç —Ç–µ–∫—Å—Ç –î–û–õ–ñ–ï–ù –ø–æ—è–≤–∏—Ç—å—Å—è")
    evolution_print("   üß¨ evolution_print: –≠—Ç–æ—Ç —Ç–µ–∫—Å—Ç –î–û–õ–ñ–ï–ù –ø–æ—è–≤–∏—Ç—å—Å—è")
    candidate_print("   ‚ö™ candidate_print: –≠—Ç–æ—Ç —Ç–µ–∫—Å—Ç –î–û–õ–ñ–ï–ù –ø–æ—è–≤–∏—Ç—å—Å—è")
    trajectory_print("   üîó trajectory_print: –≠—Ç–æ—Ç —Ç–µ–∫—Å—Ç –î–û–õ–ñ–ï–ù –ø–æ—è–≤–∏—Ç—å—Å—è")
    always_print("   ‚úÖ always_print: –≠—Ç–æ—Ç —Ç–µ–∫—Å—Ç –í–°–ï–ì–î–ê –ø–æ—è–≤–ª—è–µ—Ç—Å—è")
    
    # –¢–µ—Å—Ç 3: –í–∫–ª—é—á–∞–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ç–∏–ø
    print("\nüß™ –¢–ï–°–¢ 3: –í–∫–ª—é—á–∞–µ–º —Ç–æ–ª—å–∫–æ trajectory_logging")
    test_config = deep_merge(config, {
        'debug': {
            'enable_verbose_output': False,
            'enable_detailed_evolution': False,
            'enable_candidate_logging': False,
            'enable_trajectory_logging': True
        }
    })
    
    init_debug_output(test_config)
    
    print("–ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç–æ–ª—å–∫–æ trajectory_print –≤—ã–≤–æ–¥–∏—Ç—Å—è:")
    debug_print("   üî∏ debug_print: –ù–ï –¥–æ–ª–∂–µ–Ω –ø–æ—è–≤–∏—Ç—å—Å—è")
    evolution_print("   üß¨ evolution_print: –ù–ï –¥–æ–ª–∂–µ–Ω –ø–æ—è–≤–∏—Ç—å—Å—è")
    candidate_print("   ‚ö™ candidate_print: –ù–ï –¥–æ–ª–∂–µ–Ω –ø–æ—è–≤–∏—Ç—å—Å—è") 
    trajectory_print("   üîó trajectory_print: –î–û–õ–ñ–ï–ù –ø–æ—è–≤–∏—Ç—å—Å—è")
    always_print("   ‚úÖ always_print: –í—Å–µ–≥–¥–∞ –ø–æ—è–≤–ª—è–µ—Ç—Å—è")
    
    # –¢–µ—Å—Ç 4: –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º —Ñ–ª–∞–≥–æ–º
    print("\nüß™ –¢–ï–°–¢ 4: –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º debug_output")
    test_config = deep_merge(config, {
        'debug': {
            'enable_verbose_output': False,
            'enable_detailed_evolution': False, 
            'enable_candidate_logging': False,
            'enable_trajectory_logging': False
        },
        'trajectory_optimization': {
            'debug_output': True
        }
    })
    
    init_debug_output(test_config)
    
    print("–ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å—Ç–∞—Ä—ã–π —Ñ–ª–∞–≥ –≤–∫–ª—é—á–∞–µ—Ç trajectory_logging:")
    debug_print("   üî∏ debug_print: –ù–ï –¥–æ–ª–∂–µ–Ω –ø–æ—è–≤–∏—Ç—å—Å—è")
    evolution_print("   üß¨ evolution_print: –ù–ï –¥–æ–ª–∂–µ–Ω –ø–æ—è–≤–∏—Ç—å—Å—è")
    candidate_print("   ‚ö™ candidate_print: –ù–ï –¥–æ–ª–∂–µ–Ω –ø–æ—è–≤–∏—Ç—å—Å—è")
    trajectory_print("   üîó trajectory_print: –î–û–õ–ñ–ï–ù –ø–æ—è–≤–∏—Ç—å—Å—è (—á–µ—Ä–µ–∑ —Å—Ç–∞—Ä—ã–π —Ñ–ª–∞–≥)")
    always_print("   ‚úÖ always_print: –í—Å–µ–≥–¥–∞ –ø–æ—è–≤–ª—è–µ—Ç—Å—è")
    
    print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
    print("\nüìä –†–ï–ó–Æ–ú–ï:")
    print("‚úÖ –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥ –≤—ã–∫–ª—é—á–µ–Ω (–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å)")
    print("‚úÖ –§–ª–∞–≥–∏ –≤ config.json –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —É–ø—Ä–∞–≤–ª—è—é—Ç –≤—ã–≤–æ–¥–æ–º")  
    print("‚úÖ always_print() —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ñ–ª–∞–≥–æ–≤")
    print("‚úÖ –†–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –æ—Ç–ª–∞–¥–∫–∏ –º–æ–∂–Ω–æ –≤–∫–ª—é—á–∞—Ç—å –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏")
    print("‚úÖ –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º debug_output —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
    
    print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    print(f"   ‚Ä¢ –î–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –≤—Å–µ —Ñ–ª–∞–≥–∏ false –≤ config.json")
    print(f"   ‚Ä¢ –î–ª—è –æ—Ç–ª–∞–¥–∫–∏ –≤–∫–ª—é—á–∏—Ç–µ –Ω—É–∂–Ω—ã–µ —Ç–∏–ø—ã: verbose/evolution/candidate/trajectory")
    print(f"   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ always_print() –¥–ª—è –≤–∞–∂–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")

except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    print("‚ÑπÔ∏è  –í–æ–∑–º–æ–∂–Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –º–æ–¥—É–ª–∏ —Å–∏—Å—Ç–µ–º—ã")
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∞: {e}")
    import traceback
    traceback.print_exc()

if __name__ == "__main__":
    pass  # –ö–æ–¥ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω –≤—ã—à–µ 