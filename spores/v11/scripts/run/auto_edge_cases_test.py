#!/usr/bin/env python3
"""
–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ—Å—Ç –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–π
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ –±–µ–∑ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞
"""

import os
import sys
import json
import collections.abc
import numpy as np

# --- –ü–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –≥–ª—É–±–æ–∫–æ–≥–æ —Å–ª–∏—è–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–æ–≤ ---
def deep_merge(d, u):
    """–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç —Å–ª–æ–≤–∞—Ä–∏."""
    for k, v in u.items():
        if isinstance(v, collections.abc.Mapping):
            d[k] = deep_merge(d.get(k, {}), v)
        else:
            d[k] = v
    return d

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—É—Ç–µ–π ---
script_dir = os.path.dirname(os.path.abspath(__file__))
project_root = os.path.abspath(os.path.join(script_dir, '..', '..'))
if project_root not in sys.path:
    sys.path.append(project_root)

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ---
with open(os.path.join(project_root, 'config', 'json', 'config.json'), 'r') as f:
    config = json.load(f)

with open(os.path.join(project_root, 'config', 'json', 'sizes.json'), 'r') as f:
    sizes_config = json.load(f)
    config = deep_merge(config, sizes_config)

# --- –ò–º–ø–æ—Ä—Ç—ã ---
from src.managers.color_manager import ColorManager
from src.logic.pendulum import PendulumSystem
from src.core.spore import Spore
from src.managers.spore_manager import SporeManager
from src.visual.link import Link

print("=== –ê–í–¢–û–ú–ê–¢–ò–ó–ò–†–û–í–ê–ù–ù–´–ô –¢–ï–°–¢ –ì–†–ê–ù–ò–ß–ù–´–• –°–õ–£–ß–ê–ï–í ===")
print("üéØ –ü—Ä–æ–≥—Ä–∞–º–º–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–π")
print("=" * 60)

def create_test_environment():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—É—é —Å—Ä–µ–¥—É –±–µ–∑ –≥—Ä–∞—Ñ–∏–∫–∏"""
    
    # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ –º–µ–Ω–µ–¥–∂–µ—Ä—ã
    color_manager = ColorManager()
    pendulum_config = config['pendulum']
    pendulum = PendulumSystem(damping=pendulum_config['damping'])
    goal_position = config['spore']['goal_position']
    
    # –°–æ–∑–¥–∞–µ–º —Å–ø–æ—Ä –º–µ–Ω–µ–¥–∂–µ—Ä –±–µ–∑ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    spore_manager = SporeManager(
        pendulum=pendulum, 
        zoom_manager=None,  # –ë–µ–∑ –≥—Ä–∞—Ñ–∏–∫–∏
        settings_param=None,
        color_manager=color_manager,
        angel_manager=None,
        config=config,
        spawn_area=None
    )
    
    return spore_manager, pendulum, goal_position

def test_scenario_1():
    """
    –°—Ü–µ–Ω–∞—Ä–∏–π 1: –°–ø–æ—Ä–∞ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ —Å–≤—è–∑—è–º–∏ –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç—Å—è —Å –¥—Ä—É–≥–æ–π —Å–ø–æ—Ä–æ–π
    """
    print("\nüî¨ –¢–ï–°–¢ 1: –°–ø–æ—Ä–∞ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ —Å–≤—è–∑—è–º–∏")
    print("-" * 40)
    
    spore_manager, pendulum, goal_position = create_test_environment()
    pendulum_config = config['pendulum']
    
    # –°–æ–∑–¥–∞–µ–º —Å–ø–æ—Ä—ã
    spore_a = Spore(pendulum=pendulum, dt=pendulum_config['dt'], 
                   goal_position=goal_position, position=(0.5, 0, 0.1),
                   color_manager=spore_manager.color_manager, config=config.get('spore', {}))
    
    spore_b = Spore(pendulum=pendulum, dt=pendulum_config['dt'],
                   goal_position=goal_position, position=(0.6, 0, 0.15), 
                   color_manager=spore_manager.color_manager, config=config.get('spore', {}))
    
    spore_c = Spore(pendulum=pendulum, dt=pendulum_config['dt'],
                   goal_position=goal_position, position=(0.68, 0, 0.12),
                   color_manager=spore_manager.color_manager, config=config.get('spore', {}))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –º–µ–Ω–µ–¥–∂–µ—Ä
    spore_manager.add_spore(spore_a) 
    spore_manager.add_spore(spore_b)
    spore_manager.add_spore(spore_c)
    
    # –°–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ —Å–≤—è–∑–∏ A‚ÜíB‚ÜíC
    link_ab = Link(spore_a, spore_b, color_manager=spore_manager.color_manager, 
                   zoom_manager=None, config=config)
    link_bc = Link(spore_b, spore_c, color_manager=spore_manager.color_manager,
                   zoom_manager=None, config=config)
    spore_manager.links.extend([link_ab, link_bc])
    
    print(f"üìä –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:")
    print(f"   –°–ø–æ—Ä—ã: {len(spore_manager.objects)} (A, B, C)")
    print(f"   –°–≤—è–∑–∏: {len(spore_manager.links)} (A‚ÜíB, B‚ÜíC)")
    print(f"   –ü–æ–∑–∏—Ü–∏–∏: A={spore_a.calc_2d_pos()}, B={spore_b.calc_2d_pos()}, C={spore_c.calc_2d_pos()}")
    
    # –¢–µ—Å—Ç: –ø–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å —Å–ø–æ—Ä—É –æ—Ç B, –∫–æ—Ç–æ—Ä–∞—è –º–æ–∂–µ—Ç –ø—Ä–∏–π—Ç–∏ –∫ C
    print(f"\nüß™ –î–µ–ª–∞–µ–º B –∞–∫—Ç–∏–≤–Ω–æ–π (–ø–µ—Ä–µ–º–µ—â–∞–µ–º –≤ –∫–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞)")
    spore_manager.objects.remove(spore_b)
    spore_manager.objects.append(spore_b)
    
    print(f"   –ê–∫—Ç–∏–≤–Ω–∞—è —Å–ø–æ—Ä–∞: {spore_manager.objects[-1].id} –≤ –ø–æ–∑–∏—Ü–∏–∏ {spore_manager.objects[-1].calc_2d_pos()}")
    print(f"   –û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {spore_b.logic.optimal_control}")
    print(f"   –û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ dt: {spore_b.logic.optimal_dt}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫—É–¥–∞ –ø—Ä–∏–≤–µ–¥–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —à–∞–≥ –æ—Ç B
    if spore_b.logic.optimal_control is not None and spore_b.logic.optimal_dt is not None:
        next_pos_3d = spore_b.evolve_3d(control=spore_b.logic.optimal_control[0], 
                                         dt=spore_b.logic.optimal_dt)
        next_pos_2d = np.array([next_pos_3d[0], next_pos_3d[2]])
        print(f"   –°–ª–µ–¥—É—é—â–∞—è –ø–æ–∑–∏—Ü–∏—è B: {next_pos_2d}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ C
        distance_to_c = np.linalg.norm(next_pos_2d - spore_c.calc_2d_pos())
        tolerance = config.get('trajectory_optimization', {}).get('merge_tolerance', 0.1)
        print(f"   –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ C: {distance_to_c:.6f} (tolerance: {tolerance})")
        
        result = spore_manager.generate_new_spore()
        
        if result == spore_c:
            print(f"‚úÖ –£–°–ü–ï–•: –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ! B ‚Üí C")
            print(f"   –ù–æ–≤—ã—Ö —Å–ø–æ—Ä –Ω–µ —Å–æ–∑–¥–∞–Ω–æ, —Å–æ–∑–¥–∞–Ω–∞ —Å–≤—è–∑—å B‚ÜíC")
        elif result != spore_b:  # –°–æ–∑–¥–∞–ª–∞—Å—å –Ω–æ–≤–∞—è —Å–ø–æ—Ä–∞
            print(f"‚ö†Ô∏è  –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Å–ø–æ—Ä–∞ {result.id} –≤–º–µ—Å—Ç–æ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è")
            print(f"   –í–æ–∑–º–æ–∂–Ω–æ, —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –±–æ–ª—å—à–µ tolerance")
        else:
            print(f"‚ùå –°–ø–æ—Ä–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞ (–º–µ—Ä—Ç–≤–∞—è —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è –∏–ª–∏ –æ—à–∏–±–∫–∞)")
    else:
        print(f"‚ùå –£ —Å–ø–æ—Ä—ã B –Ω–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
    
    return len(spore_manager.objects), len(spore_manager.links)

def test_scenario_2():
    """
    –°—Ü–µ–Ω–∞—Ä–∏–π 2: –ü–µ—Ä–≤–∞—è —Å–ø–æ—Ä–∞ –¥–≤–∏–∂–µ—Ç—Å—è –∫ –¥—Ä—É–≥–æ–π —Å–ø–æ—Ä–µ
    """
    print("\nüî¨ –¢–ï–°–¢ 2: –ü–µ—Ä–≤–∞—è —Å–ø–æ—Ä–∞ –¥–≤–∏–∂–µ—Ç—Å—è")
    print("-" * 30)
    
    spore_manager, pendulum, goal_position = create_test_environment()
    pendulum_config = config['pendulum']
    
    # –°–æ–∑–¥–∞–µ–º –¥–≤–µ —Å–ø–æ—Ä—ã –≤ —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏—Ö –ø–æ–∑–∏—Ü–∏—è—Ö
    spore_first = Spore(pendulum=pendulum, dt=pendulum_config['dt'],
                       goal_position=goal_position, position=(0.3, 0, 0.05), 
                       color_manager=spore_manager.color_manager, config=config.get('spore', {}))
    
    spore_target = Spore(pendulum=pendulum, dt=pendulum_config['dt'],
                        goal_position=goal_position, position=(0.68, 0, 0.12),
                        color_manager=spore_manager.color_manager, config=config.get('spore', {}))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –º–µ–Ω–µ–¥–∂–µ—Ä (–ø–µ—Ä–≤–∞—è –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–µ—Ä–≤–æ–π)
    spore_manager.add_spore(spore_first)
    spore_manager.add_spore(spore_target)
    
    print(f"üìä –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:")
    print(f"   –ü–µ—Ä–≤–∞—è —Å–ø–æ—Ä–∞: {spore_first.id} –≤ {spore_first.calc_2d_pos()}")
    print(f"   –¶–µ–ª–µ–≤–∞—è —Å–ø–æ—Ä–∞: {spore_target.id} –≤ {spore_target.calc_2d_pos()}")
    
    # –î–µ–ª–∞–µ–º –ø–µ—Ä–≤—É—é —Å–ø–æ—Ä—É –∞–∫—Ç–∏–≤–Ω–æ–π
    spore_manager.objects.remove(spore_first)
    spore_manager.objects.append(spore_first)
    
    print(f"\nüß™ –î–µ–ª–∞–µ–º –ø–µ—Ä–≤—É—é —Å–ø–æ—Ä—É –∞–∫—Ç–∏–≤–Ω–æ–π")
    print(f"   –ê–∫—Ç–∏–≤–Ω–∞—è: {spore_manager.objects[-1].id}")
    print(f"   –û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {spore_first.logic.optimal_control}")
    
    # –ù–µ—Å–∫–æ–ª—å–∫–æ —à–∞–≥–æ–≤ –¥–ª—è –¥–≤–∏–∂–µ–Ω–∏—è –ø–µ—Ä–≤–æ–π —Å–ø–æ—Ä—ã –∫ —Ü–µ–ª–µ–≤–æ–π
    steps_taken = 0
    max_steps = 10
    
    while steps_taken < max_steps:
        print(f"\nüìç –®–∞–≥ {steps_taken + 1}:")
        print(f"   –ü–æ–∑–∏—Ü–∏—è –ø–µ—Ä–≤–æ–π —Å–ø–æ—Ä—ã: {spore_manager.objects[-1].calc_2d_pos()}")
        
        result = spore_manager.generate_new_spore()
        
        if result == spore_target:
            print(f"‚úÖ –£–°–ü–ï–•: –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ! –ü–µ—Ä–≤–∞—è —Å–ø–æ—Ä–∞ –¥–æ—Å—Ç–∏–≥–ª–∞ —Ü–µ–ª–µ–≤–æ–π")
            break
        elif result and result != spore_manager.objects[-2]:  # –ù–æ–≤–∞—è —Å–ø–æ—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞
            print(f"   –°–æ–∑–¥–∞–Ω–∞ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–∞—è —Å–ø–æ—Ä–∞ {result.id}")
            steps_taken += 1
        else:
            print(f"‚ùå –î–≤–∏–∂–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ (–º–µ—Ä—Ç–≤–∞—è —Å–ø–æ—Ä–∞ –∏–ª–∏ –æ—à–∏–±–∫–∞)")
            break
    
    if steps_taken >= max_steps:
        print(f"‚ö†Ô∏è  –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —à–∞–≥–æ–≤ ({max_steps}), –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ")
    
    return len(spore_manager.objects), len(spore_manager.links)

def test_scenario_3():
    """
    –°—Ü–µ–Ω–∞—Ä–∏–π 3: –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ —Å–ø–æ—Ä–µ –∫–æ—Ç–æ—Ä–∞—è —É–∂–µ –∏–º–µ–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–≤—è–∑–∏
    """
    print("\nüî¨ –¢–ï–°–¢ 3: –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ —Å–ø–æ—Ä–µ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —Å–≤—è–∑—è–º–∏")
    print("-" * 50)
    
    spore_manager, pendulum, goal_position = create_test_environment()
    pendulum_config = config['pendulum']
    
    # –°–æ–∑–¥–∞–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—É—é —Å–ø–æ—Ä—É –∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ø–æ—Ä –≤–æ–∫—Ä—É–≥ –Ω–µ–µ
    central_spore = Spore(pendulum=pendulum, dt=pendulum_config['dt'],
                         goal_position=goal_position, position=(0.68, 0, 0.12),
                         color_manager=spore_manager.color_manager, config=config.get('spore', {}))
    
    satellite_1 = Spore(pendulum=pendulum, dt=pendulum_config['dt'],
                        goal_position=goal_position, position=(0.6, 0, 0.1),
                        color_manager=spore_manager.color_manager, config=config.get('spore', {}))
    
    satellite_2 = Spore(pendulum=pendulum, dt=pendulum_config['dt'],
                        goal_position=goal_position, position=(0.65, 0, 0.08),
                        color_manager=spore_manager.color_manager, config=config.get('spore', {}))
    
    approaching_spore = Spore(pendulum=pendulum, dt=pendulum_config['dt'],
                             goal_position=goal_position, position=(0.66, 0, 0.13),
                             color_manager=spore_manager.color_manager, config=config.get('spore', {}))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –º–µ–Ω–µ–¥–∂–µ—Ä
    spore_manager.add_spore(central_spore)
    spore_manager.add_spore(satellite_1) 
    spore_manager.add_spore(satellite_2)
    spore_manager.add_spore(approaching_spore)
    
    # –°–æ–∑–¥–∞–µ–º —Å–≤—è–∑–∏ –∫ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π —Å–ø–æ—Ä–µ
    link_1_to_central = Link(satellite_1, central_spore, 
                            color_manager=spore_manager.color_manager,
                            zoom_manager=None, config=config)
    link_2_to_central = Link(satellite_2, central_spore,
                            color_manager=spore_manager.color_manager, 
                            zoom_manager=None, config=config)
    
    spore_manager.links.extend([link_1_to_central, link_2_to_central])
    
    print(f"üìä –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:")
    print(f"   –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è —Å–ø–æ—Ä–∞: {central_spore.id} –≤ {central_spore.calc_2d_pos()}")
    print(f"   –°–≤—è–∑–∏ –∫ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π: {len([l for l in spore_manager.links if l.child_spore == central_spore])}")
    print(f"   –ü—Ä–∏–±–ª–∏–∂–∞—é—â–∞—è—Å—è —Å–ø–æ—Ä–∞: {approaching_spore.id} –≤ {approaching_spore.calc_2d_pos()}")
    
    # –î–µ–ª–∞–µ–º –ø—Ä–∏–±–ª–∏–∂–∞—é—â—É—é—Å—è —Å–ø–æ—Ä—É –∞–∫—Ç–∏–≤–Ω–æ–π
    spore_manager.objects.remove(approaching_spore)
    spore_manager.objects.append(approaching_spore)
    
    print(f"\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –ø—Ä–∏–±–ª–∏–∂–∞—é—â–µ–π—Å—è —Å–ø–æ—Ä—ã —Å —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π")
    
    result = spore_manager.generate_new_spore()
    
    if result == central_spore:
        print(f"‚úÖ –£–°–ü–ï–•: –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ! –¢—Ä–µ—Ç—å—è —Å–≤—è–∑—å —Å–æ–∑–¥–∞–Ω–∞ –∫ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π —Å–ø–æ—Ä–µ")
        central_links = len([l for l in spore_manager.links if l.child_spore == central_spore])
        print(f"   –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è —Å–ø–æ—Ä–∞ —Ç–µ–ø–µ—Ä—å –∏–º–µ–µ—Ç {central_links} –≤—Ö–æ–¥—è—â–∏—Ö —Å–≤—è–∑–µ–π")
    else:
        print(f"‚ö†Ô∏è  –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ, —Å–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Å–ø–æ—Ä–∞ –∏–ª–∏ –æ—à–∏–±–∫–∞")
    
    return len(spore_manager.objects), len(spore_manager.links)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    
    print("üöÄ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤...")
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
    results = []
    
    try:
        spores_1, links_1 = test_scenario_1()
        results.append(("–°—Ü–µ–Ω–∞—Ä–∏–π 1 (—Å–ø–æ—Ä—ã —Å —Å–≤—è–∑—è–º–∏)", spores_1, links_1))
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ 1: {e}")
        results.append(("–°—Ü–µ–Ω–∞—Ä–∏–π 1 (–æ—à–∏–±–∫–∞)", 0, 0))
    
    try:
        spores_2, links_2 = test_scenario_2()
        results.append(("–°—Ü–µ–Ω–∞—Ä–∏–π 2 (–ø–µ—Ä–≤–∞—è –¥–≤–∏–∂–µ—Ç—Å—è)", spores_2, links_2))
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ 2: {e}")
        results.append(("–°—Ü–µ–Ω–∞—Ä–∏–π 2 (–æ—à–∏–±–∫–∞)", 0, 0))
    
    try:
        spores_3, links_3 = test_scenario_3()
        results.append(("–°—Ü–µ–Ω–∞—Ä–∏–π 3 (–º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–≤—è–∑–∏)", spores_3, links_3))
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ 3: {e}")
        results.append(("–°—Ü–µ–Ω–∞—Ä–∏–π 3 (–æ—à–∏–±–∫–∞)", 0, 0))
    
    # –í—ã–≤–æ–¥–∏–º —Å–≤–æ–¥–∫—É
    print("\n" + "=" * 60)
    print("üìä –°–í–û–î–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í")
    print("=" * 60)
    
    for scenario, spores, links in results:
        print(f"{scenario:35} | –°–ø–æ—Ä—ã: {spores:2} | –°–≤—è–∑–∏: {links:2}")
    
    print("\nüéØ –í–´–í–û–î–´:")
    print("‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–π –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∞")
    print("‚Ä¢ –ì—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ —Å–≤—è–∑—è–º–∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã")
    print("‚Ä¢ –ü–æ–≤–µ–¥–µ–Ω–∏–µ –ø—Ä–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–≤—è–∑—è—Ö –∫ –æ–¥–Ω–æ–π —Å–ø–æ—Ä–µ –∏–∑—É—á–µ–Ω–æ")
    print("\n‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    main() 