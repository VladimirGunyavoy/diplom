"""
–¢–ï–°–¢ –ù–ê–ü–†–ê–í–õ–ï–ù–ò–Ø –°–í–Ø–ó–ï–ô
=======================

–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–≤—è–∑–µ–π –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è.
"""

import sys
import os
import json
import collections.abc

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—É—Ç–µ–π
script_dir = os.path.dirname(os.path.abspath(__file__))
project_root = os.path.abspath(os.path.join(script_dir, '..', '..'))
if project_root not in sys.path:
    sys.path.append(project_root)

from ursina import *
import numpy as np

# –ò–º–ø–æ—Ä—Ç—ã
from src.logic.pendulum import PendulumSystem
from src.managers.color_manager import ColorManager
from src.managers.zoom_manager import ZoomManager
from src.managers.spore_manager import SporeManager
from src.visual.scene_setup import SceneSetup
from src.core.spore import Spore
from src.managers.window_manager import WindowManager

def deep_merge(d, u):
    """–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç —Å–ª–æ–≤–∞—Ä–∏."""
    for k, v in u.items():
        if isinstance(v, collections.abc.Mapping):
            d[k] = deep_merge(d.get(k, {}), v)
        else:
            d[k] = v
    return d

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥–∏
with open(os.path.join(project_root, 'config', 'json', 'config.json'), 'r') as f:
    config = json.load(f)

with open(os.path.join(project_root, 'config', 'json', 'sizes.json'), 'r') as f:
    sizes_config = json.load(f)
    config = deep_merge(config, sizes_config)

print("="*60)
print("üîó –¢–ï–°–¢ –ù–ê–ü–†–ê–í–õ–ï–ù–ò–Ø –°–í–Ø–ó–ï–ô")
print("="*60)
print(f"üìä trajectory_merge_tolerance: {config.get('trajectory_optimization', {}).get('trajectory_merge_tolerance')}")
print("="*60)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
app = Ursina()
color_manager = ColorManager()
scene_setup = SceneSetup(
    init_position=config['scene_setup']['init_position'], 
    init_rotation_x=config['scene_setup']['init_rotation_x'], 
    init_rotation_y=config['scene_setup']['init_rotation_y'], 
    color_manager=color_manager
)
zoom_manager = ZoomManager(scene_setup, color_manager=color_manager)
window_manager = WindowManager()

# –°–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
pendulum = PendulumSystem(damping=config['pendulum']['damping'])

# –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å–ø–æ—Ä
spore_manager = SporeManager(
    pendulum=pendulum,
    zoom_manager=zoom_manager,
    settings_param=None,
    color_manager=color_manager,
    config=config
)

# –°–æ–∑–¥–∞–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–π —Å–ø–æ—Ä—ã (–†–û–ó–û–í–ê–Ø)
goal_position = config['spore']['goal_position']
goal = Spore(
    pendulum=pendulum,
    dt=config['pendulum']['dt'],
    scale=config['spore']['scale'],
    position=(goal_position[0], 0, goal_position[1]),
    goal_position=goal_position,
    is_goal=True,
    color_manager=color_manager
)

# –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ã—á–Ω–æ–π —Å–ø–æ—Ä—ã (–ì–û–õ–£–ë–ê–Ø) –±–ª–∏–∑–∫–æ –∫ —Ü–µ–ª–∏
close_to_goal = Spore(
    pendulum=pendulum,
    dt=config['pendulum']['dt'],
    goal_position=goal_position,
    scale=config['spore']['scale'],
    position=(goal_position[0] - 0.15, 0, goal_position[1] + 0.05),  # –ë–ª–∏–∑–∫–æ –∫ —Ü–µ–ª–∏
    color_manager=color_manager,
    config=config.get('spore', {})
)

# –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–æ—Ä—ã –≤ –º–µ–Ω–µ–¥–∂–µ—Ä
spore_manager.add_spore(goal)
spore_manager.add_spore(close_to_goal)

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤ zoom_manager
zoom_manager.register_object(goal)
zoom_manager.register_object(close_to_goal)

print(f"\nüìç –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–ø–æ—Ä:")
print(f"   üå∏ –¶–µ–ª—å (–†–û–ó–û–í–ê–Ø): {goal.calc_2d_pos()}")
print(f"   üîµ –û–±—ã—á–Ω–∞—è (–ì–û–õ–£–ë–ê–Ø): {close_to_goal.calc_2d_pos()}")

print(f"\nüéÆ –£–ü–†–ê–í–õ–ï–ù–ò–ï:")
print(f"   F - —Å–æ–∑–¥–∞—Ç—å —Å–ø–æ—Ä—É –æ—Ç –≥–æ–ª—É–±–æ–π (–¥–æ–ª–∂–Ω–æ –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å—Å—è —Å —Ä–æ–∑–æ–≤–æ–π)")
print(f"   Q - –≤—ã—Ö–æ–¥")

def input(key):
    if key == 'q' or key == 'escape':
        application.quit()
        return
    
    if key == 'f':
        print(f"\n{'='*60}")
        print(f"üîó –¢–ï–°–¢ –°–û–ó–î–ê–ù–ò–Ø –°–í–Ø–ó–ò")
        print(f"{'='*60}")
        
        # –î–µ–ª–∞–µ–º –≥–æ–ª—É–±—É—é —Å–ø–æ—Ä—É –ø–æ—Å–ª–µ–¥–Ω–µ–π (–∏—Å—Ç–æ—á–Ω–∏–∫ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è)
        spore_manager.objects = [goal, close_to_goal]
        
        print(f"üìä –î–æ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è:")
        print(f"   –ì–æ–ª—É–±–∞—è —Å–ø–æ—Ä–∞: {close_to_goal.calc_2d_pos()}")
        print(f"   –†–æ–∑–æ–≤–∞—è —Ü–µ–ª—å: {goal.calc_2d_pos()}")
        
        result = spore_manager.generate_new_spore()
        
        if result == goal:
            print(f"‚úÖ –û–ë–™–ï–î–ò–ù–ï–ù–ò–ï –ü–†–û–ò–ó–û–®–õ–û!")
            print(f"   –°—Ç—Ä–µ–ª–∫–∞ –¥–æ–ª–∂–Ω–∞ –∏–¥—Ç–∏: –†–æ–∑–æ–≤–∞—è —Ü–µ–ª—å ‚Üí –ì–æ–ª—É–±–∞—è —Å–ø–æ—Ä–∞")
            print(f"   (–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —á—Ç–æ –≥–æ–ª—É–±–∞—è —Å–ø–æ—Ä–∞ '–¥–æ—Å—Ç–∏–≥–ª–∞' —Ä–æ–∑–æ–≤—É—é —Ü–µ–ª—å)")
        elif result and result != close_to_goal:
            print(f"‚ùå –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Å–ø–æ—Ä–∞ {result.id} –≤–º–µ—Å—Ç–æ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è")
            zoom_manager.register_object(result)
        else:
            print(f"‚ùå –°–ø–æ—Ä–∞ –Ω–µ —Å–æ–∑–¥–∞–ª–∞—Å—å")
        
        print(f"{'='*60}")

def update():
    pass

if __name__ == '__main__':
    app.run() 