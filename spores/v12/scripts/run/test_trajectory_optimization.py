"""
–¢–ï–°–¢ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò –¢–†–ê–ï–ö–¢–û–†–ò–ô
===========================

–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–π.
–°–æ–∑–¥–∞–µ—Ç –¥–≤–µ —Å–ø–æ—Ä—ã –≤ –ø–æ–∑–∏—Ü–∏—è—Ö (0.79, 0) –∏ (0, 2), –≥–¥–µ –≤—Ç–æ—Ä–∞—è –¥–æ–ª–∂–Ω–∞ 
–ø—Ä–∏–π—Ç–∏ –∫ –ø–µ—Ä–≤–æ–π –∏ —Å–æ–∑–¥–∞—Ç—å —Å–≤—è–∑—å –≤–º–µ—Å—Ç–æ –Ω–æ–≤–æ–π —Å–ø–æ—Ä—ã.

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
- F: —Å–æ–∑–¥–∞—Ç—å —Å–ª–µ–¥—É—é—â—É—é —Å–ø–æ—Ä—É (—Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π)
- –û–∂–∏–¥–∞–µ–º–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ: –≤—Ç–æ—Ä–∞—è —Å–ø–æ—Ä–∞ –¥–æ–ª–∂–Ω–∞ –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å—Å—è —Å –ø–µ—Ä–≤–æ–π
"""

import sys
import os
from ursina import *
import numpy as np
import time
from colorsys import hsv_to_rgb
from matplotlib.colors import LinearSegmentedColormap
import matplotlib.pyplot as plt
import json
import collections.abc

# --- –ü–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –≥–ª—É–±–æ–∫–æ–≥–æ —Å–ª–∏—è–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–æ–≤ ---
def deep_merge(d, u):
    """–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç —Å–ª–æ–≤–∞—Ä–∏."""
    for k, v in u.items():
        if isinstance(v, collections.abc.Mapping):
            d[k] = deep_merge(d.get(k, {}), v)
        else:
            d[k] = v
    return d

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—É—Ç–µ–π –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ ---
script_dir = os.path.dirname(os.path.abspath(__file__))
project_root = os.path.abspath(os.path.join(script_dir, '..', '..'))
if project_root not in sys.path:
    sys.path.append(project_root)

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ---
with open(os.path.join(project_root, 'config', 'json', 'config.json'), 'r') as f:
    config = json.load(f)

with open(os.path.join(project_root, 'config', 'json', 'sizes.json'), 'r') as f:
    sizes_config = json.load(f)
    config = deep_merge(config, sizes_config)

# --- –û—Å–Ω–æ–≤–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã ---
from src.visual.spawn_area_visualizer import SpawnAreaVisualizer
from src.logic.spawn_area import SpawnArea as SpawnAreaLogic
from src.logic.cost_function import CostFunction
from src.visual.cost_visualizer import CostVisualizer
from src.managers.color_manager import ColorManager
from src.visual.scene_setup import SceneSetup
from src.visual.frame import Frame
from src.managers.zoom_manager import ZoomManager
from src.utils.scalable import Scalable, ScalableFrame, ScalableFloor
from src.logic.pendulum import PendulumSystem
from src.managers.window_manager import WindowManager
from src.core.spore import Spore
from src.managers.spore_manager import SporeManager
from src.managers.param_manager import ParamManager
from src.visual.ui_setup import UI_setup
from src.managers.angel_manager import AngelManager
from src.managers.input_manager import InputManager
from src.managers.update_manager import UpdateManager
from src.managers.spawn_area_manager import SpawnAreaManager

print("=== –¢–ï–°–¢ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò –¢–†–ê–ï–ö–¢–û–†–ò–ô ===")
print("üéØ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è —Å—Ö–æ–∂–∏—Ö —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–π")
print("üìç –ù–∞—á–∞–ª—å–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏: (0.79, 0) –∏ (0, 2)")
print("üîó –û–∂–∏–¥–∞–µ—Ç—Å—è: –≤—Ç–æ—Ä–∞—è —Å–ø–æ—Ä–∞ –æ–±—ä–µ–¥–∏–Ω–∏—Ç—Å—è —Å –ø–µ—Ä–≤–æ–π")
print("=" * 50)

# ===== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø =====
app = Ursina()
color_manager = ColorManager()

# ===== –°–û–ó–î–ê–ù–ò–ï –°–¶–ï–ù–´ =====
scene_config = config['scene_setup']
scene_setup = SceneSetup(
    init_position=scene_config['init_position'], 
    init_rotation_x=scene_config['init_rotation_x'], 
    init_rotation_y=scene_config['init_rotation_y'], 
    color_manager=color_manager
)
frame = Frame(
    color_manager=color_manager,
    origin_scale=config.get('frame', {}).get('origin_scale', 0.05)
)
scene_setup.frame = frame
window_manager = WindowManager()

# ===== –°–û–ó–î–ê–ù–ò–ï ZOOM MANAGER =====
zoom_manager = ZoomManager(scene_setup, color_manager=color_manager)
angel_manager = AngelManager(color_manager=color_manager, zoom_manager=zoom_manager, config=config)

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –¥–æ—á–µ—Ä–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã Frame –≤ ZoomManager
for i, entity in enumerate(frame.entities):
    zoom_manager.register_object(entity, name=f'frame_child_{i}')

# --- –°–û–ó–î–ê–ù–ò–ï –ú–ê–°–®–¢–ê–ë–ò–†–£–ï–ú–û–ì–û –ü–û–õ–ê ---
floor = ScalableFloor(
    model='quad',
    scale=config['scene']['floor_scale'],
    rotation_x=90,
    color=color_manager.get_color('scene', 'floor'),
    texture='white_cube',
    texture_scale=(40, 40)
)
zoom_manager.register_object(floor, name='floor')

# ===== –°–û–ó–î–ê–ù–ò–ï PARAM MANAGER =====
settings_param = ParamManager(0, show=False, color_manager=color_manager)

# ===== –°–û–ó–î–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´ –ú–ê–Ø–¢–ù–ò–ö–ê =====
pendulum_config = config['pendulum']
pendulum = PendulumSystem(damping=pendulum_config['damping'])

# ===== –°–û–ó–î–ê–ù–ò–ï –¢–ï–°–¢–û–í–´–• –°–ü–û–† =====
print("\nüåü –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–ø–æ—Ä...")

goal_position = config['spore']['goal_position']
goal = Spore(
    pendulum=pendulum,
    dt=pendulum_config['dt'],
    scale=config['spore']['scale'],
    position=(goal_position[0], 0, goal_position[1]),
    goal_position=goal_position,
    is_goal=True,
    color_manager=color_manager
)

# –¢–ï–°–¢–û–í–ê–Ø –°–ü–û–†–ê 1: –ø–æ–∑–∏—Ü–∏—è (0.68, 0.12)
print("üìç –°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–æ—Ä—ã 1 –≤ –ø–æ–∑–∏—Ü–∏–∏ (0.68, 0.12)")
spore1 = Spore(
    pendulum=pendulum,
    dt=pendulum_config['dt'],
    goal_position=goal_position,
    scale=config['spore']['scale'],
    position=(0.68, 0, 0.12),  # (x, y, z) –≥–¥–µ z —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤—Ç–æ—Ä–æ–π –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–µ –≤ 2D
    color_manager=color_manager,
    config=config.get('spore', {})
)

# –¢–ï–°–¢–û–í–ê–Ø –°–ü–û–†–ê 2: –ø–æ–∑–∏—Ü–∏—è (0, 2) 
print("üìç –°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–æ—Ä—ã 2 –≤ –ø–æ–∑–∏—Ü–∏–∏ (0, 2)")
spore2 = Spore(
    pendulum=pendulum,
    dt=pendulum_config['dt'],
    goal_position=goal_position,
    scale=config['spore']['scale'],
    position=(0, 0, 2),  # (x, y, z) –≥–¥–µ z —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤—Ç–æ—Ä–æ–π –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–µ –≤ 2D
    color_manager=color_manager,
    config=config.get('spore', {})
)

# ===== –°–û–ó–î–ê–ù–ò–ï –û–ö–†–£–ñ–ï–ù–ò–Ø =====
spawn_area_config = config['spawn_area']
spawn_area_logic = SpawnAreaLogic(
    focus1=spore1.logic.position_2d,
    focus2=goal.logic.position_2d,
    eccentricity=spawn_area_config['eccentricity']
)

spawn_area_visualizer = SpawnAreaVisualizer(
    spawn_area=spawn_area_logic,
    resolution=spawn_area_config['resolution'],
    color=color_manager.get_color('spawn_area', 'default')
)

# ===== –°–û–ó–î–ê–ù–ò–ï –ú–ï–ù–ï–î–ñ–ï–†–ê –°–ü–û–† =====
spore_manager = SporeManager(
    pendulum=pendulum, 
    zoom_manager=zoom_manager, 
    settings_param=settings_param, 
    color_manager=color_manager,
    angel_manager=angel_manager,
    config=config,
    spawn_area=spawn_area_logic
)

# –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–æ—Ä—ã –≤ –º–µ–Ω–µ–¥–∂–µ—Ä
spore_manager.add_spore(goal)
spore_manager.add_spore(spore1)
spore_manager.add_spore(spore2)

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å–ø–æ—Ä—ã –≤ zoom manager
zoom_manager.register_object(goal, "goal_spore")
zoom_manager.register_object(spore1, "test_spore_1")
zoom_manager.register_object(spore2, "test_spore_2")

# --- –ü–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç–∏ ---
cost_surface_parent = Scalable()
cost_logic = CostFunction(
    goal_position_2d=np.array([goal.position[0], goal.position[2]]),
)
cost_surface = CostVisualizer(
    cost_function=cost_logic,
    spawn_area=spawn_area_logic,
    parent_entity=cost_surface_parent,
    color_manager=color_manager,
    config=config['cost_surface']
)
angel_manager.cost_function = cost_logic

# ===== –ù–ê–°–¢–†–û–ô–ö–ê UI =====
print("\nüìä –ù–∞—Å—Ç—Ä–æ–π–∫–∞ UI...")
ui_setup = UI_setup(color_manager=color_manager)

# ===== –°–û–ó–î–ê–ù–ò–ï –ú–ï–ù–ï–î–ñ–ï–†–û–í =====
spawn_area_manager = SpawnAreaManager(
    spawn_area_logic=spawn_area_logic,
    spawn_area_visualizer=spawn_area_visualizer,
    cost_visualizer=cost_surface
)

input_manager = InputManager(
    scene_setup=scene_setup,
    zoom_manager=zoom_manager,
    spore_manager=spore_manager,
    spawn_area_manager=spawn_area_manager,
    param_manager=settings_param,
    ui_setup=ui_setup,
    angel_manager=angel_manager
)

update_manager = UpdateManager(
    ui_setup=ui_setup,
    settings_param=settings_param,
    spore_manager=spore_manager,
    zoom_manager=zoom_manager,
    spawn_area_manager=spawn_area_manager,
    angel_manager=angel_manager
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ UI —Å –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö
data_providers = {
    'get_spore_count': lambda: len(spore_manager.objects),
    'get_param_value': lambda: settings_param.value,
    'get_zoom_info': lambda: (zoom_manager.a_transformation, zoom_manager.spores_scale),
    'get_candidate_info': lambda: (spore_manager.min_radius, spore_manager.candidate_count),
}

ui_elements = ui_setup.setup_demo_ui(
    data_providers=data_providers,
    spawn_area=spawn_area_logic
)

print("\nüéÆ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:")
print("F - —Å–æ–∑–¥–∞—Ç—å —Å–ª–µ–¥—É—é—â—É—é —Å–ø–æ—Ä—É (—Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π)")
print("E/T - –º–∞—Å—à—Ç–∞–±, R - —Å–±—Ä–æ—Å")
print("Q - –≤—ã—Ö–æ–¥")
print("\n‚ú® –¢–µ—Å—Ç –Ω–∞—á–∞—Ç! –ù–∞–∂–º–∏—Ç–µ F –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–ø–æ—Ä...")

# –¢–µ–∫—É—â–∞—è –∞–∫—Ç–∏–≤–Ω–∞—è —Å–ø–æ—Ä–∞ (–¥–ª—è F)
current_active = spore2  # –ù–∞—á–∏–Ω–∞–µ–º —Å–æ –≤—Ç–æ—Ä–æ–π —Å–ø–æ—Ä—ã

def update():
    update_manager.update()

def input(key):
    if key == 'q' or key == 'escape':
        print("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞:")
        print(f"   –í—Å–µ–≥–æ —Å–ø–æ—Ä: {len(spore_manager.objects)}")
        print(f"   –í—Å–µ–≥–æ —Å–≤—è–∑–µ–π: {len(spore_manager.links)}")
        print("üëã –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!")
        application.quit()
        return
    
    # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞
    if key == 'f':
        print(f"\n‚ö° –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ø–æ—Ä—ã –æ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–ø–æ—Ä—ã {spore_manager.objects[-1].id}")
        result = spore_manager.generate_new_spore()
        if result:
            print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: —Å–ø–æ—Ä–∞ {result.id}")
        return
    
    input_manager.handle_input(key)

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –≤ zoom manager
zoom_manager.register_object(cost_surface_parent, name='cost_surface')

app.run() 