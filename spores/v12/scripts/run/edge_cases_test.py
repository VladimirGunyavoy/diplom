#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–π
- –°–ø–æ—Ä—ã —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ —Å–≤—è–∑—è–º–∏
- –†–∞–∑–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–≤–∏–∂–µ–Ω–∏—è
- –†—É—á–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–ø–æ—Ä–æ–π
"""

import os
import sys
import json
import collections.abc
import numpy as np
from ursina import *

# --- –ü–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –≥–ª—É–±–æ–∫–æ–≥–æ —Å–ª–∏—è–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–æ–≤ ---
def deep_merge(d, u):
    """–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç —Å–ª–æ–≤–∞—Ä–∏."""
    for k, v in u.items():
        if isinstance(v, collections.abc.Mapping):
            d[k] = deep_merge(d.get(k, {}), v)
        else:
            d[k] = v
    return d

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—É—Ç–µ–π ---
script_dir = os.path.dirname(os.path.abspath(__file__))
project_root = os.path.abspath(os.path.join(script_dir, '..', '..'))
if project_root not in sys.path:
    sys.path.append(project_root)

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ---
with open(os.path.join(project_root, 'config', 'json', 'config.json'), 'r') as f:
    config = json.load(f)

with open(os.path.join(project_root, 'config', 'json', 'sizes.json'), 'r') as f:
    sizes_config = json.load(f)
    config = deep_merge(config, sizes_config)

# --- –ò–º–ø–æ—Ä—Ç—ã ---
from src.managers.color_manager import ColorManager
from src.managers.window_manager import WindowManager
from src.visual.scene_setup import SceneSetup
from src.managers.zoom_manager import ZoomManager
from src.utils.scalable import ScalableFloor
from src.logic.pendulum import PendulumSystem
from src.core.spore import Spore
from src.managers.spore_manager import SporeManager
from src.visual.link import Link

print("=== –¢–ï–°–¢ –ì–†–ê–ù–ò–ß–ù–´–• –°–õ–£–ß–ê–ï–í ===")
print("üéØ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–≤–µ–¥–µ–Ω–∏—è –ø—Ä–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–≤—è–∑—è—Ö")
print("=" * 40)

# ===== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø =====
app = Ursina()

# ===== –ù–ê–°–¢–†–û–ô–ö–ê –û–ö–ù–ê –î–õ–Ø –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–û–ì–û –ü–†–û–°–ú–û–¢–†–ê =====
window_manager = WindowManager(
    title="–¢–µ—Å—Ç –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ - –°–ø–æ—Ä—ã v11",
    size=(800, 600)  # –ö–æ–º–ø–∞–∫—Ç–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Ä—è–¥–æ–º —Å –∫–æ–Ω—Å–æ–ª—å—é
)
window_manager.set_background_color(color.dark_gray)

color_manager = ColorManager()

print("\nü™ü –ù–ê–°–¢–†–û–ô–ö–ê –û–ö–û–ù:")
print("‚Ä¢ –†–∞–∑–º–µ—Å—Ç–∏—Ç–µ –æ–∫–Ω–æ Ursina —Å–ø—Ä–∞–≤–∞ –æ—Ç –∫–æ–Ω—Å–æ–ª–∏")
print("‚Ä¢ –†–∞–∑–º–µ—Ä –æ–∫–Ω–∞: 800x600 –ø–∏–∫—Å–µ–ª–µ–π")
print("‚Ä¢ –ö–æ–Ω—Å–æ–ª—å —Å–ª–µ–≤–∞ –ø–æ–∫–∞–∂–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é")

# ===== –°–û–ó–î–ê–ù–ò–ï –°–¶–ï–ù–´ =====
scene_config = config['scene_setup']
scene_setup = SceneSetup(
    init_position=scene_config['init_position'], 
    init_rotation_x=scene_config['init_rotation_x'], 
    init_rotation_y=scene_config['init_rotation_y'], 
    color_manager=color_manager
)

# ===== –°–û–ó–î–ê–ù–ò–ï ZOOM MANAGER =====
zoom_manager = ZoomManager(scene_setup, color_manager=color_manager)

# --- –°–û–ó–î–ê–ù–ò–ï –ü–û–õ–ê ---
floor = ScalableFloor(
    model='quad',
    scale=10,
    rotation_x=90,
    color=color_manager.get_color('scene', 'floor'),
    texture='white_cube',
    texture_scale=(40, 40)
)
zoom_manager.register_object(floor, name='floor')

# ===== –°–û–ó–î–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´ –ú–ê–Ø–¢–ù–ò–ö–ê =====
pendulum_config = config['pendulum']
pendulum = PendulumSystem(damping=pendulum_config['damping'])

# ===== –°–û–ó–î–ê–ù–ò–ï –¢–ï–°–¢–û–í–´–• –°–ü–û–† =====
print("\nüåü –°–æ–∑–¥–∞–Ω–∏–µ —Å–ª–æ–∂–Ω–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è...")

goal_position = config['spore']['goal_position']

# –¶–ï–õ–¨
print("üìç –°–æ–∑–¥–∞–Ω–∏–µ —Ü–µ–ª–∏ –≤ –ø–æ–∑–∏—Ü–∏–∏", goal_position)
goal = Spore(
    pendulum=pendulum,
    dt=pendulum_config['dt'],
    scale=0.08,
    position=(goal_position[0], 0, goal_position[1]),
    goal_position=goal_position,
    is_goal=True,
    color_manager=color_manager
)

# –°–ü–û–†–ê A: —Å—Ç–∞—Ä—Ç–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è (0.5, 0.1)
print("üìç –°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–æ—Ä—ã A –≤ –ø–æ–∑–∏—Ü–∏–∏ (0.5, 0.1)")
spore_a = Spore(
    pendulum=pendulum,
    dt=pendulum_config['dt'],
    goal_position=goal_position,
    scale=0.08,
    position=(0.5, 0, 0.1),
    color_manager=color_manager,
    config=config.get('spore', {})
)

# –°–ü–û–†–ê B: –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è (0.6, 0.15)
print("üìç –°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–æ—Ä—ã B –≤ –ø–æ–∑–∏—Ü–∏–∏ (0.6, 0.15)")
spore_b = Spore(
    pendulum=pendulum,
    dt=pendulum_config['dt'],
    goal_position=goal_position,
    scale=0.08,
    position=(0.6, 0, 0.15),
    color_manager=color_manager,
    config=config.get('spore', {})
)

# –°–ü–û–†–ê C: —Ü–µ–ª–µ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è (0.68, 0.12)
print("üìç –°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–æ—Ä—ã C –≤ –ø–æ–∑–∏—Ü–∏–∏ (0.68, 0.12)")
spore_c = Spore(
    pendulum=pendulum,
    dt=pendulum_config['dt'],
    goal_position=goal_position,
    scale=0.08,
    position=(0.68, 0, 0.12),
    color_manager=color_manager,
    config=config.get('spore', {})
)

# ===== –°–û–ó–î–ê–ù–ò–ï –ú–ï–ù–ï–î–ñ–ï–†–ê –°–ü–û–† =====
spore_manager = SporeManager(
    pendulum=pendulum, 
    zoom_manager=zoom_manager, 
    settings_param=None,
    color_manager=color_manager,
    angel_manager=None,
    config=config,
    spawn_area=None
)

# –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–æ—Ä—ã –≤ –º–µ–Ω–µ–¥–∂–µ—Ä
print("\n‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ø–æ—Ä –≤ –º–µ–Ω–µ–¥–∂–µ—Ä...")
spore_manager.add_spore(goal)
spore_manager.add_spore(spore_a)
spore_manager.add_spore(spore_b)
spore_manager.add_spore(spore_c)

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤ zoom manager
zoom_manager.register_object(goal, "goal_spore")
zoom_manager.register_object(spore_a, "spore_a")
zoom_manager.register_object(spore_b, "spore_b") 
zoom_manager.register_object(spore_c, "spore_c")

# ===== –°–û–ó–î–ê–ù–ò–ï –ù–ê–ß–ê–õ–¨–ù–´–• –°–í–Ø–ó–ï–ô =====
print("\nüîó –°–æ–∑–¥–∞–Ω–∏–µ —Ü–µ–ø–æ—á–∫–∏ —Å–≤—è–∑–µ–π A ‚Üí B ‚Üí C...")

# –°–≤—è–∑—å A ‚Üí B
link_ab = Link(spore_a, spore_b, 
               color_manager=color_manager,
               zoom_manager=zoom_manager,
               config=config)
spore_manager.links.append(link_ab)
zoom_manager.register_object(link_ab, "link_ab")

# –°–≤—è–∑—å B ‚Üí C  
link_bc = Link(spore_b, spore_c,
               color_manager=color_manager, 
               zoom_manager=zoom_manager,
               config=config)
spore_manager.links.append(link_bc)
zoom_manager.register_object(link_bc, "link_bc")

# –û–±–Ω–æ–≤–ª—è–µ–º –≥–µ–æ–º–µ—Ç—Ä–∏—é —Å–≤—è–∑–µ–π
link_ab.update_geometry()
link_bc.update_geometry()
zoom_manager.update_transform()

print(f"\n‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ç–µ—Å—Ç–æ–≤–∞—è —Å—Ä–µ–¥–∞:")
print(f"   –°–ø–æ—Ä: {len(spore_manager.objects)} (–≤–∫–ª—é—á–∞—è —Ü–µ–ª—å)")
print(f"   –°–≤—è–∑–µ–π: {len(spore_manager.links)}")
print("üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞:")
print("   –¶–µ–ª—å ‚Üê A ‚Üí B ‚Üí C")
print("   –ü–æ—Å–ª–µ–¥–Ω—è—è —Å–ø–æ—Ä–∞ (–∞–∫—Ç–∏–≤–Ω–∞—è): C")

# ===== –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –°–ú–ï–ù–´ –ê–ö–¢–ò–í–ù–û–ô –°–ü–û–†–´ =====
current_active_index = len(spore_manager.objects) - 1  # –ò–Ω–¥–µ–∫—Å –∞–∫—Ç–∏–≤–Ω–æ–π —Å–ø–æ—Ä—ã

def switch_active_spore(direction):
    """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—É—é —Å–ø–æ—Ä—É"""
    global current_active_index
    
    # –ò—Å–∫–ª—é—á–∞–µ–º —Ü–µ–ª—å –∏–∑ –≤—ã–±–æ—Ä–∞ (–æ–Ω–∞ –≤—Å–µ–≥–¥–∞ –ø–µ—Ä–≤–∞—è)
    non_goal_spores = [i for i, spore in enumerate(spore_manager.objects) 
                       if not (hasattr(spore, 'is_goal') and spore.is_goal)]
    
    if direction == 'next':
        current_idx = non_goal_spores.index(current_active_index)
        next_idx = (current_idx + 1) % len(non_goal_spores)
        current_active_index = non_goal_spores[next_idx]
    elif direction == 'prev':
        current_idx = non_goal_spores.index(current_active_index)
        prev_idx = (current_idx - 1) % len(non_goal_spores)
        current_active_index = non_goal_spores[prev_idx]
    
    # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–ø–æ—Ä—É –≤ –∫–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞ (—á—Ç–æ–±—ã —Å—Ç–∞–ª–∞ "–ø–æ—Å–ª–µ–¥–Ω–µ–π")
    active_spore = spore_manager.objects[current_active_index]
    spore_manager.objects.remove(active_spore)
    spore_manager.objects.append(active_spore)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å
    current_active_index = len(spore_manager.objects) - 1
    
    print(f"üéØ –ê–∫—Ç–∏–≤–Ω–∞—è —Å–ø–æ—Ä–∞: {active_spore.id} –≤ –ø–æ–∑–∏—Ü–∏–∏ {active_spore.calc_2d_pos()}")

print("\nüéÆ –ü–û–î–†–û–ë–ù–û–ï –£–ü–†–ê–í–õ–ï–ù–ò–ï:")
print("=" * 40)
print("üìç –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´:")
print("   F - —Å–æ–∑–¥–∞—Ç—å —Å–ø–æ—Ä—É –æ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π (–ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è)")
print("   Q - –≤—ã—Ö–æ–¥ —Å –æ—Ç—á–µ—Ç–æ–º")
print()
print("üîÑ –°–ú–ï–ù–ê –ê–ö–¢–ò–í–ù–û–ô –°–ü–û–†–´:")
print("   N - —Å–ª–µ–¥—É—é—â–∞—è –∞–∫—Ç–∏–≤–Ω–∞—è —Å–ø–æ—Ä–∞")
print("   P - –ø—Ä–µ–¥—ã–¥—É—â–∞—è –∞–∫—Ç–∏–≤–Ω–∞—è —Å–ø–æ—Ä–∞") 
print("   1 - –≤—ã–±—Ä–∞—Ç—å —Å–ø–æ—Ä—É A (–ø–æ–∑–∏—Ü–∏—è 0.5, 0.1)")
print("   2 - –≤—ã–±—Ä–∞—Ç—å —Å–ø–æ—Ä—É B (–ø–æ–∑–∏—Ü–∏—è 0.6, 0.15)")
print("   3 - –≤—ã–±—Ä–∞—Ç—å —Å–ø–æ—Ä—É C (–ø–æ–∑–∏—Ü–∏—è 0.68, 0.12)")
print()
print("üìä –ò–ù–§–û–†–ú–ê–¶–ò–Ø:")
print("   I - –ø–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å–µ—Ö —Å–ø–æ—Ä–∞—Ö")
print()
print("üîç –í–ò–ó–£–ê–õ–ò–ó–ê–¶–ò–Ø:")
print("   E/T - –∏–∑–º–µ–Ω–∏—Ç—å –º–∞—Å—à—Ç–∞–±")
print("   R - —Å–±—Ä–æ—Å –º–∞—Å—à—Ç–∞–±–∞")
print()
print("üéØ –¶–ï–õ–¨ –¢–ï–°–¢–ê:")
print("   –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–π –ø—Ä–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–≤—è–∑—è—Ö")
print("   –ñ–µ–ª—Ç—ã–µ —Å–≤—è–∑–∏ = –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ, –æ—Ä–∞–Ω–∂–µ–≤—ã–µ = –æ–±—ã—á–Ω—ã–µ")
print("=" * 40)

def update():
    pass

def input(key):
    print(f"\nüéπ –ö–õ–ê–í–ò–®–ê –ù–ê–ñ–ê–¢–ê: '{key}'")
    print("-" * 30)
    
    if key == 'q' or key == 'escape':
        print("üìä –§–ò–ù–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ê:")
        print("=" * 40)
        print(f"   –í—Å–µ–≥–æ —Å–ø–æ—Ä: {len(spore_manager.objects)}")
        print(f"   –í—Å–µ–≥–æ —Å–≤—è–∑–µ–π: {len(spore_manager.links)}")
        print("   –¢–∏–ø—ã —Å–≤—è–∑–µ–π:")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∏–ø—ã —Å–≤—è–∑–µ–π
        normal_links = 0
        merge_links = 0
        for link in spore_manager.links:
            if hasattr(link, 'color'):
                if 'active' in str(link.color).lower() or 'yellow' in str(link.color).lower():
                    merge_links += 1
                else:
                    normal_links += 1
            else:
                normal_links += 1
        
        print(f"     üîó –û–±—ã—á–Ω—ã–µ —Å–≤—è–∑–∏: {normal_links}")
        print(f"     üíõ –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ —Å–≤—è–∑–∏: {merge_links}")
        print("=" * 40)
        print("üëã –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!")
        application.quit()
        return
    
    if key == 'f':
        active_spore = spore_manager.objects[-1]
        print(f"‚ö° –ì–ï–ù–ï–†–ê–¶–ò–Ø –°–ü–û–†–´ –û–¢ –ê–ö–¢–ò–í–ù–û–ô")
        print(f"   üéØ –ê–∫—Ç–∏–≤–Ω–∞—è —Å–ø–æ—Ä–∞: {active_spore.id}")
        print(f"   üìç –¢–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è: {active_spore.calc_2d_pos()}")
        print(f"   üéÆ –û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {active_spore.logic.optimal_control}")
        print(f"   ‚è±Ô∏è  –û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ dt: {active_spore.logic.optimal_dt}")
        print(f"   üíö –ñ–∏–≤–∞: {active_spore.is_alive()}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, –∫–∞–∫–∏–µ —Å–ø–æ—Ä—ã –µ—Å—Ç—å —Ä—è–¥–æ–º
        if active_spore.logic.optimal_control is not None and active_spore.logic.optimal_dt is not None:
            next_pos_3d = active_spore.evolve_3d(
                control=active_spore.logic.optimal_control[0], 
                dt=active_spore.logic.optimal_dt
            )
            next_pos_2d = np.array([next_pos_3d[0], next_pos_3d[2]])
            print(f"   üé™ –°–ª–µ–¥—É—é—â–∞—è –ø–æ–∑–∏—Ü–∏—è: {next_pos_2d}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –¥–æ –≤—Å–µ—Ö —Å–ø–æ—Ä
            tolerance = config.get('trajectory_optimization', {}).get('merge_tolerance', 0.1)
            print(f"   üìè Tolerance –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è: {tolerance}")
            
            print("   üîç –†–∞—Å—Å—Ç–æ—è–Ω–∏—è –¥–æ –¥—Ä—É–≥–∏—Ö —Å–ø–æ—Ä:")
            for i, other_spore in enumerate(spore_manager.objects):
                if other_spore.id != active_spore.id and not (hasattr(other_spore, 'is_goal') and other_spore.is_goal):
                    distance = np.linalg.norm(next_pos_2d - other_spore.calc_2d_pos())
                    status = "üéØ –ú–û–ñ–ï–¢ –û–ë–™–ï–î–ò–ù–ò–¢–¨–°–Ø" if distance <= tolerance else "üö´ –°–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ"
                    print(f"     –°–ø–æ—Ä–∞ {other_spore.id}: {distance:.6f} ({status})")
        
        print("   üöÄ –í—ã–∑—ã–≤–∞–µ–º generate_new_spore()...")
        
        result = spore_manager.generate_new_spore()
        
        print(f"   üìä –†–µ–∑—É–ª—å—Ç–∞—Ç:")
        if result:
            if result in spore_manager.objects[:-1]:  # –ï—Å–ª–∏ –≤–µ—Ä–Ω—É–ª–∞—Å—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è —Å–ø–æ—Ä–∞
                print(f"   ‚úÖ –û–ë–™–ï–î–ò–ù–ï–ù–ò–ï! –°–æ–∑–¥–∞–Ω–∞ —Å–≤—è–∑—å –∫ —Å–ø–æ—Ä–µ {result.id}")
                print(f"   üíõ –≠—Ç–æ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∂–µ–ª—Ç–∞—è —Å–≤—è–∑—å!")
            else:
                print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Å–ø–æ—Ä–∞: {result.id}")
                print(f"   üîó –≠—Ç–æ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ä–∞–Ω–∂–µ–≤–∞—è —Å–≤—è–∑—å")
        else:
            print("   ‚ùå –°–ø–æ—Ä–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞ (–º–µ—Ä—Ç–≤–∞—è –∏–ª–∏ –æ—à–∏–±–∫–∞)")
        
        print(f"   üìà –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {len(spore_manager.objects)} —Å–ø–æ—Ä, {len(spore_manager.links)} —Å–≤—è–∑–µ–π")
        return
    
    if key == 'n':
        switch_active_spore('next')
        return
        
    if key == 'p':
        switch_active_spore('prev')
        return
    
    # –ü—Ä—è–º–æ–π –≤—ã–±–æ—Ä —Å–ø–æ—Ä
    if key == '1':
        # –°–ø–æ—Ä–∞ A (–∏–Ω–¥–µ–∫—Å 1, —Ç–∞–∫ –∫–∞–∫ 0 - —Ü–µ–ª—å)
        spore_manager.objects.append(spore_manager.objects.pop(1))
        current_active_index = len(spore_manager.objects) - 1
        print(f"üéØ –í—ã–±—Ä–∞–Ω–∞ —Å–ø–æ—Ä–∞ A")
        return
    elif key == '2':
        # –°–ø–æ—Ä–∞ B (–±—ã–ª–∞ –∏–Ω–¥–µ–∫—Å 2, –Ω–æ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è A –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å—Å—è)
        for i, spore in enumerate(spore_manager.objects):
            if spore.calc_2d_pos()[0] == 0.6:  # –ù–∞–π–¥–µ–º —Å–ø–æ—Ä—É B –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
                spore_manager.objects.append(spore_manager.objects.pop(i))
                break
        current_active_index = len(spore_manager.objects) - 1
        print(f"üéØ –í—ã–±—Ä–∞–Ω–∞ —Å–ø–æ—Ä–∞ B")
        return
    elif key == '3':
        # –°–ø–æ—Ä–∞ C
        for i, spore in enumerate(spore_manager.objects):
            if abs(spore.calc_2d_pos()[0] - 0.68) < 0.01:  # –ù–∞–π–¥–µ–º —Å–ø–æ—Ä—É C –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
                spore_manager.objects.append(spore_manager.objects.pop(i))
                break
        current_active_index = len(spore_manager.objects) - 1
        print(f"üéØ –í—ã–±—Ä–∞–Ω–∞ —Å–ø–æ—Ä–∞ C")
        return
    
    if key == 'i':
        print(f"\nüìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–ø–æ—Ä–∞—Ö:")
        print(f"   –í—Å–µ–≥–æ —Å–ø–æ—Ä: {len(spore_manager.objects)}")
        print(f"   –í—Å–µ–≥–æ —Å–≤—è–∑–µ–π: {len(spore_manager.links)}")
        print("   –î–µ—Ç–∞–ª–∏ —Å–ø–æ—Ä:")
        for i, spore in enumerate(spore_manager.objects):
            status = "üéØ –ê–ö–¢–ò–í–ù–ê–Ø" if i == len(spore_manager.objects) - 1 else ""
            goal_marker = "üèÅ" if hasattr(spore, 'is_goal') and spore.is_goal else ""
            print(f"     {i}: ID={spore.id}, pos={spore.calc_2d_pos()}, alive={spore.is_alive()} {goal_marker} {status}")
        return
    
    # –ë–∞–∑–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
    if key == 'e':
        zoom_manager.zoom_in()
    elif key == 't':
        zoom_manager.zoom_out()
    elif key == 'r':
        zoom_manager.reset_zoom()
    else:
        print(f"   ‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–ª–∞–≤–∏—à–∞")

print("\n‚ú® –¢–µ—Å—Ç –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ –∑–∞–ø—É—â–µ–Ω!")
print("üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –ø—Ä–∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–∏ —Å–ø–æ—Ä —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ —Å–≤—è–∑—è–º–∏")

app.run() 