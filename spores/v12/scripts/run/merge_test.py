"""
–¢–ï–°–¢ –°–õ–ò–Ø–ù–ò–Ø –¢–†–ê–ï–ö–¢–û–†–ò–ô  
=======================

–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–π.
–°–æ–∑–¥–∞–µ–º —Å–ø–æ—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –≤—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è –ø—Ä–∏ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏.
"""

import sys
import os
import json
import collections.abc

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—É—Ç–µ–π
script_dir = os.path.dirname(os.path.abspath(__file__))
project_root = os.path.abspath(os.path.join(script_dir, '..', '..'))
if project_root not in sys.path:
    sys.path.append(project_root)

from ursina import *
import numpy as np

# –ò–º–ø–æ—Ä—Ç—ã
from src.logic.pendulum import PendulumSystem
from src.managers.color_manager import ColorManager
from src.managers.zoom_manager import ZoomManager
from src.managers.spore_manager import SporeManager
from src.visual.scene_setup import SceneSetup
from src.core.spore import Spore
from src.managers.window_manager import WindowManager

def deep_merge(d, u):
    """–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç —Å–ª–æ–≤–∞—Ä–∏."""
    for k, v in u.items():
        if isinstance(v, collections.abc.Mapping):
            d[k] = deep_merge(d.get(k, {}), v)
        else:
            d[k] = v
    return d

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥–∏
with open(os.path.join(project_root, 'config', 'json', 'config.json'), 'r') as f:
    config = json.load(f)

with open(os.path.join(project_root, 'config', 'json', 'sizes.json'), 'r') as f:
    sizes_config = json.load(f)
    config = deep_merge(config, sizes_config)

print("="*60)
print("üîó –¢–ï–°–¢ –°–õ–ò–Ø–ù–ò–Ø –¢–†–ê–ï–ö–¢–û–†–ò–ô")
print("="*60)
print(f"üìä trajectory_merge_tolerance: {config.get('trajectory_optimization', {}).get('trajectory_merge_tolerance', '–ù–ï –ù–ê–ô–î–ï–ù')}")
print("="*60)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
app = Ursina()
color_manager = ColorManager()
scene_setup = SceneSetup(
    init_position=config['scene_setup']['init_position'], 
    init_rotation_x=config['scene_setup']['init_rotation_x'], 
    init_rotation_y=config['scene_setup']['init_rotation_y'], 
    color_manager=color_manager
)
zoom_manager = ZoomManager(scene_setup, color_manager=color_manager)
window_manager = WindowManager()

# –°–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
pendulum = PendulumSystem(damping=config['pendulum']['damping'])

# –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å–ø–æ—Ä
spore_manager = SporeManager(
    pendulum=pendulum,
    zoom_manager=zoom_manager,
    settings_param=None,
    color_manager=color_manager,
    config=config
)

# –°–æ–∑–¥–∞–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–π —Å–ø–æ—Ä—ã
goal_position = config['spore']['goal_position']
goal = Spore(
    pendulum=pendulum,
    dt=config['pendulum']['dt'],
    scale=config['spore']['scale'],
    position=(goal_position[0], 0, goal_position[1]),
    goal_position=goal_position,
    is_goal=True,
    color_manager=color_manager
)

# –°–ü–ï–¶–ò–ê–õ–¨–ù–´–ô –°–¶–ï–ù–ê–†–ò–ô: –°–æ–∑–¥–∞–µ–º —Å–ø–æ—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –≤—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è
# –°–ø–æ—Ä–∞ A - —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è "—Ü–µ–ª–µ–≤–∞—è" —Ç–æ—á–∫–∞ –¥–ª—è —Å–ª–∏—è–Ω–∏—è
spore_target = Spore(
    pendulum=pendulum,
    dt=config['pendulum']['dt'],
    goal_position=goal_position,
    scale=config['spore']['scale'],
    position=(1.0, 0, 0.5),  # –¶–µ–ª–µ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è –¥–ª—è —Å–ª–∏—è–Ω–∏—è
    color_manager=color_manager,
    config=config.get('spore', {})
)

# –°–ø–æ—Ä–∞ B - –¥–æ–ª–∂–Ω–∞ –ø—Ä–∏–π—Ç–∏ –∫ sporet_target –ø–æ—Å–ª–µ –æ–¥–Ω–æ–≥–æ —à–∞–≥–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
# –ù–∞–π–¥–µ–º –ø–æ–∑–∏—Ü–∏—é, –∏–∑ –∫–æ—Ç–æ—Ä–æ–π —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ –ø—Ä–∏–≤–µ–¥–µ—Ç –∫ spore_target
target_pos_2d = spore_target.calc_2d_pos()
print(f"üéØ –¶–µ–ª–µ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è –¥–ª—è —Å–ª–∏—è–Ω–∏—è: {target_pos_2d}")

# –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Å–ø–æ—Ä—É –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ —à–∞–≥–∞
# –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–∑–∏—Ü–∏–π –∏ –Ω–∞–π–¥–µ–º —Ç—É, –∫–æ—Ç–æ—Ä–∞—è –≤–µ–¥–µ—Ç –∫ target
test_positions = [
    (0.8, 0, 0.6),   # –ë–ª–∏–∑–∫–æ –∫ —Ü–µ–ª–∏
    (0.9, 0, 0.4),   # –î—Ä—É–≥–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
    (1.1, 0, 0.6),   # –ï—â–µ –æ–¥–∏–Ω –≤–∞—Ä–∏–∞–Ω—Ç
    (0.95, 0, 0.45), # –û—á–µ–Ω—å –±–ª–∏–∑–∫–æ
]

best_distance = float('inf')
best_position = test_positions[0]

for test_pos in test_positions:
    test_spore = Spore(
        pendulum=pendulum,
        dt=config['pendulum']['dt'],
        goal_position=goal_position,
        scale=config['spore']['scale'],
        position=test_pos,
        color_manager=color_manager,
        config=config.get('spore', {})
    )
    
    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ optimizer
    from src.logic.optimizer import SporeOptimizer
    optimizer = SporeOptimizer(pendulum, config)
    result = optimizer.find_optimal_step(test_spore)
    optimal_control, optimal_dt = result['x']
    test_spore.logic.optimal_control = np.array([optimal_control])
    test_spore.logic.optimal_dt = optimal_dt
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –ø–æ–∑–∏—Ü–∏—é
    if test_spore.logic.optimal_control is not None and test_spore.logic.optimal_dt is not None:
        next_pos_3d = test_spore.evolve_3d(
            control=test_spore.logic.optimal_control,
            dt=test_spore.logic.optimal_dt
        )
    else:
        # –ï—Å–ª–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        next_pos_3d = test_spore.evolve_3d(
            control=np.array([0.0]),
            dt=config['pendulum']['dt']
        )
    next_pos_2d = np.array([next_pos_3d[0], next_pos_3d[2]])
    
    distance_to_target = np.linalg.norm(next_pos_2d - target_pos_2d)
    print(f"üìç –¢–µ—Å—Ç –ø–æ–∑–∏—Ü–∏–∏ {test_pos} -> {next_pos_2d}, —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Ü–µ–ª–∏: {distance_to_target:.4f}")
    
    if distance_to_target < best_distance:
        best_distance = distance_to_target
        best_position = test_pos
    
    # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Å–ø–æ—Ä—É
    destroy(test_spore)

print(f"‚úÖ –õ—É—á—à–∞—è —Å—Ç–∞—Ä—Ç–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è: {best_position}, —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {best_distance:.4f}")

# –°–æ–∑–¥–∞–µ–º —Å–ø–æ—Ä—É, –∫–æ—Ç–æ—Ä–∞—è –¥–æ–ª–∂–Ω–∞ –ø—Ä–∏–¥—Ç–∏ –∫ spore_target
spore_source = Spore(
    pendulum=pendulum,
    dt=config['pendulum']['dt'],
    goal_position=goal_position,
    scale=config['spore']['scale'],
    position=best_position,
    color_manager=color_manager,
    config=config.get('spore', {})
)

# –ó–∞–ø—É—Å–∫–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –¥–ª—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞ —á–µ—Ä–µ–∑ optimizer
from src.logic.optimizer import SporeOptimizer
optimizer = SporeOptimizer(pendulum, config)
result = optimizer.find_optimal_step(spore_source)
optimal_control, optimal_dt = result['x']
spore_source.logic.optimal_control = np.array([optimal_control])
spore_source.logic.optimal_dt = optimal_dt

# –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–æ—Ä—ã –≤ –º–µ–Ω–µ–¥–∂–µ—Ä
spore_manager.add_spore(goal)
spore_manager.add_spore(spore_target)
spore_manager.add_spore(spore_source)

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤ zoom_manager
zoom_manager.register_object(goal)
zoom_manager.register_object(spore_target)
zoom_manager.register_object(spore_source)

print(f"\nüìç –°–æ–∑–¥–∞–Ω—ã —Å–ø–æ—Ä—ã:")
print(f"   üéØ –¶–µ–ª—å: {goal.calc_2d_pos()}")
print(f"   üîµ –¶–µ–ª–µ–≤–∞—è —Å–ø–æ—Ä–∞ (–¥–ª—è —Å–ª–∏—è–Ω–∏—è): {spore_target.calc_2d_pos()}")
print(f"   üü¢ –ò—Å—Ç–æ—á–Ω–∏–∫ (–¥–æ–ª–∂–Ω–∞ —Å–ª–∏—Ç—å—Å—è): {spore_source.calc_2d_pos()}")

print(f"\nüéÆ –£–ü–†–ê–í–õ–ï–ù–ò–ï:")
print(f"   F - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Å–ø–æ—Ä—É –æ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–∞ (–¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏–∑–æ–π—Ç–∏ —Å–ª–∏—è–Ω–∏–µ!)")
print(f"   Q - –≤—ã—Ö–æ–¥")

def input(key):
    if key == 'q' or key == 'escape':
        application.quit()
        return
    
    if key == 'f':
        print(f"\n{'='*80}")
        print(f"üöÄ –ü–û–ü–´–¢–ö–ê –°–õ–ò–Ø–ù–ò–Ø")
        print(f"{'='*80}")
        
        # –î–µ–ª–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–ø–æ—Ä–æ–π
        spore_manager.objects = [goal, spore_target, spore_source]
        
        print(f"üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–¥ —Å–ª–∏—è–Ω–∏–µ–º:")
        print(f"   –ò—Å—Ç–æ—á–Ω–∏–∫ {spore_source.id}: {spore_source.calc_2d_pos()}")
        print(f"   –¶–µ–ª—å —Å–ª–∏—è–Ω–∏—è {spore_target.id}: {spore_target.calc_2d_pos()}")
        print(f"   –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞: {spore_source.logic.optimal_control}")
        print(f"   dt –∏—Å—Ç–æ—á–Ω–∏–∫–∞: {spore_source.logic.optimal_dt}")
        
        result = spore_manager.generate_new_spore()
        
        if result == spore_target:
            print(f"üéâ –£–°–ü–ï–®–ù–û–ï –°–õ–ò–Ø–ù–ò–ï! –°–ø–æ—Ä–∞ {spore_source.id} –æ–±—ä–µ–¥–∏–Ω–∏–ª–∞—Å—å —Å {spore_target.id}")
        elif result and result != spore_source:
            print(f"‚ùå –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Å–ø–æ—Ä–∞ {result.id} –≤–º–µ—Å—Ç–æ —Å–ª–∏—è–Ω–∏—è")
            zoom_manager.register_object(result)
        else:
            print(f"‚ùå –°–ø–æ—Ä–∞ –Ω–µ —Å–æ–∑–¥–∞–ª–∞—Å—å")
        
        print(f"{'='*80}")

def update():
    pass

if __name__ == '__main__':
    app.run() 