"""
–¢–ï–°–¢ –û–¢–õ–ê–î–ö–ò –¢–†–ê–ï–ö–¢–û–†–ò–ô
=======================

–°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ª–æ–≥–∏–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–π.
–°–æ–∑–¥–∞–µ—Ç –∏—Å—Ö–æ–¥–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.
"""

import sys
import os
import json

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—É—Ç–µ–π
script_dir = os.path.dirname(os.path.abspath(__file__))
project_root = os.path.abspath(os.path.join(script_dir, '..', '..'))
if project_root not in sys.path:
    sys.path.append(project_root)

from ursina import *
import numpy as np

# –ò–º–ø–æ—Ä—Ç—ã
from src.logic.pendulum import PendulumSystem
from src.managers.color_manager import ColorManager
from src.managers.zoom_manager import ZoomManager
from src.managers.spore_manager import SporeManager
from src.visual.scene_setup import SceneSetup
from src.core.spore import Spore
from src.managers.window_manager import WindowManager

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥–æ–≤
import collections.abc

def deep_merge(d, u):
    """–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç —Å–ª–æ–≤–∞—Ä–∏."""
    for k, v in u.items():
        if isinstance(v, collections.abc.Mapping):
            d[k] = deep_merge(d.get(k, {}), v)
        else:
            d[k] = v
    return d

# –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥
with open(os.path.join(project_root, 'config', 'json', 'config.json'), 'r') as f:
    config = json.load(f)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥ —Å —Ä–∞–∑–º–µ—Ä–∞–º–∏ –∏ –æ–±—ä–µ–¥–∏–Ω—è–µ–º
with open(os.path.join(project_root, 'config', 'json', 'sizes.json'), 'r') as f:
    sizes_config = json.load(f)
    config = deep_merge(config, sizes_config)

print("="*50)
print("üîç –¢–ï–°–¢ –û–¢–õ–ê–î–ö–ò –¢–†–ê–ï–ö–¢–û–†–ò–ô")
print("="*50)
print(f"üìä trajectory_merge_tolerance: {config.get('trajectory_optimization', {}).get('trajectory_merge_tolerance', '–ù–ï –ù–ê–ô–î–ï–ù')}")
print(f"üìä merge_tolerance: {config.get('trajectory_optimization', {}).get('merge_tolerance', '–ù–ï –ù–ê–ô–î–ï–ù')}")
print("="*50)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
app = Ursina()
color_manager = ColorManager()
scene_setup = SceneSetup(
    init_position=config['scene_setup']['init_position'], 
    init_rotation_x=config['scene_setup']['init_rotation_x'], 
    init_rotation_y=config['scene_setup']['init_rotation_y'], 
    color_manager=color_manager
)
zoom_manager = ZoomManager(scene_setup, color_manager=color_manager)
window_manager = WindowManager()

# –°–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
pendulum = PendulumSystem(damping=config['pendulum']['damping'])

# –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å–ø–æ—Ä
spore_manager = SporeManager(
    pendulum=pendulum,
    zoom_manager=zoom_manager,
    settings_param=None,
    color_manager=color_manager,
    config=config
)

# –°–æ–∑–¥–∞–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–π —Å–ø–æ—Ä—ã
goal_position = config['spore']['goal_position']
goal = Spore(
    pendulum=pendulum,
    dt=config['pendulum']['dt'],
    scale=config['spore']['scale'],
    position=(goal_position[0], 0, goal_position[1]),
    goal_position=goal_position,
    is_goal=True,
    color_manager=color_manager
)

# –°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–æ—Ä –≤ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–∑–∏—Ü–∏—è—Ö (–∫–∞–∫ –Ω–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–µ)
spore_a = Spore(
    pendulum=pendulum,
    dt=config['pendulum']['dt'],
    goal_position=goal_position,
    scale=config['spore']['scale'],
    position=(0.79, 0, 0),  # –ü–µ—Ä–≤–∞—è —Å–ø–æ—Ä–∞
    color_manager=color_manager,
    config=config.get('spore', {})
)

spore_b = Spore(
    pendulum=pendulum,
    dt=config['pendulum']['dt'],
    goal_position=goal_position,
    scale=config['spore']['scale'],
    position=(0, 0, 2),  # –í—Ç–æ—Ä–∞—è —Å–ø–æ—Ä–∞
    color_manager=color_manager,
    config=config.get('spore', {})
)

# –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–æ—Ä—ã –≤ –º–µ–Ω–µ–¥–∂–µ—Ä
spore_manager.add_spore(goal)
spore_manager.add_spore(spore_a)  
spore_manager.add_spore(spore_b)

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤ zoom_manager
zoom_manager.register_object(goal)
zoom_manager.register_object(spore_a)
zoom_manager.register_object(spore_b)

print("\nüìç –°–æ–∑–¥–∞–Ω—ã —Å–ø–æ—Ä—ã:")
print(f"   üéØ –¶–µ–ª—å: {goal.calc_2d_pos()}")
print(f"   üü£ –°–ø–æ—Ä–∞ A: {spore_a.calc_2d_pos()}")
print(f"   üü£ –°–ø–æ—Ä–∞ B: {spore_b.calc_2d_pos()}")

print("\nüéÆ –£–ü–†–ê–í–õ–ï–ù–ò–ï:")
print("   F - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Å–ø–æ—Ä—É –æ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–π")
print("   Q - –≤—ã—Ö–æ–¥")
print("   1/2 - –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É —Å–ø–æ—Ä–∞–º–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")

current_test_spore = spore_b  # –ù–∞—á–∏–Ω–∞–µ–º —Å —Å–ø–æ—Ä—ã B

def input(key):
    global current_test_spore
    
    if key == 'q' or key == 'escape':
        application.quit()
        return
    
    if key == 'f':
        print(f"\n{'='*60}")
        print(f"üöÄ –°–û–ó–î–ê–ù–ò–ï –°–ü–û–†–´ –û–¢ {current_test_spore.id}")
        print(f"{'='*60}")
        
        # –í—Ä–µ–º–µ–Ω–Ω–æ –¥–µ–ª–∞–µ–º —Ç–µ–∫—É—â—É—é —Å–ø–æ—Ä—É –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤ —Å–ø–∏—Å–∫–µ
        spore_manager.objects = [s for s in spore_manager.objects if s != current_test_spore]
        spore_manager.objects.append(current_test_spore)
        
        result = spore_manager.generate_new_spore()
        if result:
            zoom_manager.register_object(result)
            if result != current_test_spore:  # –ï—Å–ª–∏ —Å–æ–∑–¥–∞–ª–∞—Å—å –Ω–æ–≤–∞—è —Å–ø–æ—Ä–∞
                print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Å–ø–æ—Ä–∞ {result.id}")
            else:  # –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–æ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ
                print(f"üîó –ü—Ä–æ–∏–∑–æ—à–ª–æ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ")
        
        print(f"{'='*60}")
    
    elif key == '1':
        current_test_spore = spore_a
        print(f"üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞ —Å–ø–æ—Ä—É A: {spore_a.calc_2d_pos()}")
    
    elif key == '2':
        current_test_spore = spore_b  
        print(f"üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞ —Å–ø–æ—Ä—É B: {spore_b.calc_2d_pos()}")

def update():
    pass

if __name__ == '__main__':
    app.run() 