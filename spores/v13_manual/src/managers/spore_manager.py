from ursina import destroy
import numpy as np
from typing import List, Optional, Dict, TYPE_CHECKING

from ..core.spore import Spore
from ..logic.pendulum import PendulumSystem
from ..visual.link import Link
from ..managers.color_manager import ColorManager
from ..visual.prediction_visualizer import PredictionVisualizer
from .zoom_manager import ZoomManager
from ..logic.optimizer import SporeOptimizer
from .param_manager import ParamManager
from .angel_manager import AngelManager
from ..utils.debug_output import DebugOutput, always_print, debug_print, evolution_print, candidate_print, trajectory_print

if TYPE_CHECKING:
    from ..logic.spawn_area import SpawnArea


class SporeManager:
    def __init__(self, pendulum: PendulumSystem, 
                 zoom_manager: ZoomManager, 
                 settings_param: Optional[ParamManager], 
                 color_manager: ColorManager, 
                 angel_manager: Optional[AngelManager] = None, 
                 config: Optional[Dict] = None,
                 spawn_area: Optional['SpawnArea'] = None):
        
        self.pendulum: PendulumSystem = pendulum
        self.zoom_manager: ZoomManager = zoom_manager
        self.settings_param: Optional[ParamManager] = settings_param
        self.color_manager: ColorManager = color_manager
        self.angel_manager: Optional[AngelManager] = angel_manager
        self.config: Dict = config if config is not None else {}
        self.spawn_area: Optional['SpawnArea'] = spawn_area
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
        self.debug = DebugOutput(self.config)
        
        self.optimizer: SporeOptimizer = SporeOptimizer(pendulum, config)

        self.objects: List[Spore] = []
        self.trajectories: Dict = {}
        self.spore_count: int = 0
        self.prediction_visualizers: List[PredictionVisualizer] = []
        self.ghost_link: Optional[Link] = None
        self.optimal_ghost_spore: Optional[Spore] = None  # –°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é –ø—Ä–∏–∑—Ä–∞—á–Ω—É—é —Å–ø–æ—Ä—É
        self.links: List[Link] = []
        self._next_spore_id: int = 0
        
        # –°–∏—Å—Ç–µ–º–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç—Å–∫–∏—Ö —Å–ø–æ—Ä
        self.candidate_spores: List[Spore] = []  # –°–ø–æ—Ä—ã-–∫–∞–Ω–¥–∏–¥–∞—Ç—ã (–±–µ–ª—ã–µ –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–µ)
        self.min_radius: float = 0.3  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–¥–∏—É—Å –¥–ª—è –¥–∏—Å–∫–æ–≤ –ü—É–∞—Å—Å–æ–Ω–∞
        self.candidate_count: int = 0

    def clear(self) -> None:
        """–£–¥–∞–ª—è–µ—Ç –≤—Å–µ —Å–ø–æ—Ä—ã, —Å–≤—è–∑–∏ –∏ –¥—Ä—É–≥–∏–µ –æ–±—ä–µ–∫—Ç—ã —Å–æ —Å—Ü–µ–Ω—ã."""
        for spore in self.objects:
            destroy(spore)
        for link in self.links:
            destroy(link)
        if self.ghost_link:
            destroy(self.ghost_link)
        for visualizer in self.prediction_visualizers:
            visualizer.destroy()

        self.objects = []
        self.links = []
        self.prediction_visualizers = []
        self.ghost_link = None
        self.optimal_ghost_spore = None
        self._next_spore_id = 0
        
        # –û—á–∏—â–∞–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç—Å–∫–∏–µ —Å–ø–æ—Ä—ã
        for candidate in self.candidate_spores:
            # –£–¥–∞–ª—è–µ–º –∏–∑ zoom_manager –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º –æ–±—ä–µ–∫—Ç–∞
            if hasattr(candidate, 'id'):
                self.zoom_manager.unregister_object(candidate.id)
            destroy(candidate)
        self.candidate_spores = []
        self.candidate_count = 0
        
        if self.angel_manager:
            self.angel_manager.clear_all()

    def clear_all_manual(self) -> None:
        """–ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –¥–ª—è v13_manual - —É–¥–∞–ª—è–µ—Ç –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã –ö–†–û–ú–ï —Ü–µ–ª–µ–≤–æ–π —Å–ø–æ—Ä—ã."""
        
        print("üßπ –ü–û–õ–ù–ê–Ø –û–ß–ò–°–¢–ö–ê v13_manual...")
        
        # –û—á–∏—â–∞–µ–º –≤—Å–µ registered –æ–±—ä–µ–∫—Ç—ã –∏–∑ ZoomManager —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å–æ —Å–ø–æ—Ä–∞–º–∏
        if self.zoom_manager:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–ª—é—á–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
            keys_to_remove = []
            registered_objects = getattr(self.zoom_manager, 'objects', {}) 
            
            for key in registered_objects:
                name_list = ['spore', 'link', 'ghost', 'predict', 'manual', 'angel', 'pillar']
                if any(pattern in key.lower() for pattern in name_list):
                    keys_to_remove.append(key)
            
            for key in keys_to_remove:
                try:
                    self.zoom_manager.unregister_object(key)
                    print(f"   ‚úì –£–¥–∞–ª–µ–Ω –∏–∑ ZoomManager: {key}")
                except Exception as e:
                    print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è {key}: {e}")
        
        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞
        spores_to_remove = []
        for spore in self.objects:
            if not (hasattr(spore, 'is_goal') and spore.is_goal):
                spores_to_remove.append(spore)
        
        for spore in spores_to_remove:
            self.objects.remove(spore)
            destroy(spore)
            print(f"   ‚úì –£–¥–∞–ª–µ–Ω–∞ –æ–±—ã—á–Ω–∞—è —Å–ø–æ—Ä–∞: {getattr(spore, 'id', 'unknown')}")
        
        # 2. –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–≤—è–∑–∏
        for link in self.links:
            destroy(link)
        self.links = []
        print(f"   ‚úì –£–¥–∞–ª–µ–Ω–æ —Å–≤—è–∑–µ–π: {len(self.links)}")
        
        # 3. –£–¥–∞–ª—è–µ–º ghost_link
        if self.ghost_link:
            destroy(self.ghost_link)
            self.ghost_link = None
            print("   ‚úì –£–¥–∞–ª–µ–Ω–∞ –ø—Ä–∏–∑—Ä–∞—á–Ω–∞—è —Å–≤—è–∑—å")
        
        # 4. –£–¥–∞–ª—è–µ–º prediction visualizers
        for visualizer in self.prediction_visualizers:
            visualizer.destroy()
        self.prediction_visualizers = []
        print(f"   ‚úì –£–¥–∞–ª–µ–Ω–æ visualizers: {len(self.prediction_visualizers)}")
        
        # 5. –°–±—Ä–∞—Å—ã–≤–∞–µ–º optimal_ghost_spore
        self.optimal_ghost_spore = None

        # –∫–ª–æ–¥ - –ª–µ–Ω—Ç—è–π!
        
        # 6. –û—á–∏—â–∞–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç—Å–∫–∏–µ —Å–ø–æ—Ä—ã
        for candidate in self.candidate_spores:
            # –£–¥–∞–ª—è–µ–º –∏–∑ zoom_manager –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º –æ–±—ä–µ–∫—Ç–∞
            if hasattr(candidate, 'id'):
                try:
                    self.zoom_manager.unregister_object(candidate.id)
                except:
                    pass
            destroy(candidate)
        self.candidate_spores = []
        self.candidate_count = 0
        print(f"   ‚úì –£–¥–∞–ª–µ–Ω–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤: {len(self.candidate_spores)}")
        
        # 7. –û—á–∏—â–∞–µ–º angel_manager (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if self.angel_manager:
            self.angel_manager.clear_ghosts()
            print("   ‚úì –û—á–∏—â–µ–Ω—ã –∞–Ω–≥–µ–ª—ã")
        
        # 8. –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —á—Ç–æ –æ—Å—Ç–∞–ª–æ—Å—å
        remaining_spores = [s for s in self.objects if hasattr(s, 'is_goal') and s.is_goal]
        print(f"   üíö –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Ü–µ–ª–µ–≤—ã—Ö —Å–ø–æ—Ä: {len(remaining_spores)}")
        
        print("üßπ –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ (—Ü–µ–ª–µ–≤—ã–µ —Å–ø–æ—Ä—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã)")

    def add_spore(self, spore: Spore) -> None:
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–ø–æ—Ä—É –≤ —Å–ø–∏—Å–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è."""
        if not isinstance(spore.id, int): # –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º ID, –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
            spore.id = self._next_spore_id
            self._next_spore_id += 1

        optimal_control, optimal_dt = self.optimizer.find_optimal_step(spore)['x']
        optimal_control = np.array([optimal_control])
        spore.logic.optimal_control = optimal_control
        spore.logic.optimal_dt = optimal_dt
        
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
        spore_type = ""
        if hasattr(spore, 'is_goal') and spore.is_goal:
            spore_type = "üéØ –¶–ï–õ–¨"
        elif hasattr(spore, 'is_candidate') and spore.is_candidate:
            spore_type = "‚ö™ –ö–ê–ù–î–ò–î–ê–¢"
        elif hasattr(spore, 'is_ghost') and spore.is_ghost:
            spore_type = "üëª –ü–†–ò–ó–†–ê–ö"
        else:
            spore_type = "üî∏ –û–ë–´–ß–ù–ê–Ø"
            
        debug_print(f"‚ûï {spore_type} —Å–ø–æ—Ä–∞ {spore.id} –¥–æ–±–∞–≤–ª–µ–Ω–∞:")
        debug_print(f"   üìç –ü–æ–∑–∏—Ü–∏—è: {spore.calc_2d_pos()}")
        debug_print(f"   üí∞ Cost: {spore.logic.cost:.6f}")
        debug_print(f"   üéÆ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {optimal_control}")
        debug_print(f"   ‚è±Ô∏è  dt: {optimal_dt:.6f}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–º–µ—Ä—Ç—å —Å–ø–æ—Ä—ã (–µ—Å–ª–∏ optimal_dt = 0), –Ω–æ –Ω–µ –¥–ª—è —Ü–µ–ª–µ–≤—ã—Ö —Å–ø–æ—Ä
        if not (hasattr(spore, 'is_goal') and spore.is_goal):
            # spore.check_death()
            if not spore.is_alive():
                debug_print(f"ü™¶ –°–ø–æ—Ä–∞ {spore.id} –æ–±—ä—è–≤–ª–µ–Ω–∞ –º–µ—Ä—Ç–≤–æ–π (dt = {optimal_dt}) - —Ü–≤–µ—Ç –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ —Å–µ—Ä—ã–π")
        
        self.objects.append(spore)

        if self.angel_manager:
            self.angel_manager.on_spore_created(spore)

        self.sample_ghost_spores() # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∏–∑—Ä–∞–∫–æ–≤ —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏
        self.update_ghost_link()      # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∏–∑—Ä–∞—á–Ω—É—é —Å–≤—è–∑—å

    def add_spore_manual(self, spore: Spore) -> None:
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–ø–æ—Ä—É –ë–ï–ó –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–∏–∑—Ä–∞–∫–æ–≤ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π (–¥–ª—è v13_manual)."""
        if not isinstance(spore.id, int): # –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º ID, –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
            spore.id = self._next_spore_id
            self._next_spore_id += 1

        optimal_control, optimal_dt = self.optimizer.find_optimal_step(spore)['x']
        optimal_control = np.array([optimal_control])
        spore.logic.optimal_control = optimal_control
        spore.logic.optimal_dt = optimal_dt
        
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
        spore_type = ""
        if hasattr(spore, 'is_goal') and spore.is_goal:
            spore_type = "üéØ –¶–ï–õ–¨"
        elif hasattr(spore, 'is_candidate') and spore.is_candidate:
            spore_type = "‚ö™ –ö–ê–ù–î–ò–î–ê–¢"
        elif hasattr(spore, 'is_ghost') and spore.is_ghost:
            spore_type = "üëª –ü–†–ò–ó–†–ê–ö"
        else:
            spore_type = "üî∏ –û–ë–´–ß–ù–ê–Ø"
            
        debug_print(f"‚ûï {spore_type} —Å–ø–æ—Ä–∞ {spore.id} –¥–æ–±–∞–≤–ª–µ–Ω–∞ (v13_manual):")
        debug_print(f"   üìç –ü–æ–∑–∏—Ü–∏—è: {spore.calc_2d_pos()}")
        debug_print(f"   üí∞ Cost: {spore.logic.cost:.6f}")
        debug_print(f"   üéÆ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {optimal_control}")
        debug_print(f"   ‚è±Ô∏è  dt: {optimal_dt:.6f}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–º–µ—Ä—Ç—å —Å–ø–æ—Ä—ã (–µ—Å–ª–∏ optimal_dt = 0), –Ω–æ –Ω–µ –¥–ª—è —Ü–µ–ª–µ–≤—ã—Ö —Å–ø–æ—Ä
        if not (hasattr(spore, 'is_goal') and spore.is_goal):
            # spore.check_death()
            if not spore.is_alive():
                debug_print(f"ü™¶ –°–ø–æ—Ä–∞ {spore.id} –æ–±—ä—è–≤–ª–µ–Ω–∞ –º–µ—Ä—Ç–≤–æ–π (dt = {optimal_dt}) - —Ü–≤–µ—Ç –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ —Å–µ—Ä—ã–π")
        
        self.objects.append(spore)
        
        # –ù–ï –≤—ã–∑—ã–≤–∞–µ–º:
        # - self.angel_manager.on_spore_created(spore) 
        # - self.sample_ghost_spores()
        # - self.update_ghost_link()

    def generate_new_spore(self) -> Optional[Spore]:
        """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é —Å–ø–æ—Ä—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–π."""
        if not self.objects:
            return None

        parent_spore = self.objects[-1]
        
        evolution_print(f"\nüöÄ –ù–ê–ß–ê–õ–û –ì–ï–ù–ï–†–ê–¶–ò–ò –ù–û–í–û–ô –°–ü–û–†–´:")
        evolution_print(f"   üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è —Å–ø–æ—Ä–∞: {parent_spore.id}")
        evolution_print(f"   üìç –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è –ø–æ–∑–∏—Ü–∏—è: {parent_spore.calc_2d_pos()}")
        evolution_print(f"   üí∞ –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {parent_spore.logic.cost:.6f}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è —Å–ø–æ—Ä–∞ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å —ç–≤–æ–ª—é—Ü–∏—é
        debug_output = self.config.get('trajectory_optimization', {}).get('debug_output', False)
        if not parent_spore.can_evolve():
            reason = ""
            if not parent_spore.is_alive():
                reason = f"üíÄ –º–µ—Ä—Ç–≤–∞ (dt={parent_spore.logic.optimal_dt})"
            elif parent_spore.evolution_completed:
                reason = "üèÅ —ç–≤–æ–ª—é—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ (–æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ)"
            else:
                reason = "‚ùì –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞"
                
            evolution_print(f"   ‚ùå –û–°–¢–ê–ù–û–í–ö–ê: –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è —Å–ø–æ—Ä–∞ –Ω–µ –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –¥–µ—Ç–µ–π - {reason}")
            if debug_output:
                if not parent_spore.is_alive():
                    trajectory_print(f"üíÄ –°–ø–æ—Ä–∞ {parent_spore.id} –º–µ—Ä—Ç–≤–∞ –∏ –Ω–µ –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –¥–µ—Ç–µ–π")
                elif parent_spore.evolution_completed:
                    trajectory_print(f"üèÅ –°–ø–æ—Ä–∞ {parent_spore.id} –∑–∞–≤–µ—Ä—à–∏–ª–∞ —ç–≤–æ–ª—é—Ü–∏—é –∏ –Ω–µ –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –¥–µ—Ç–µ–π")
            return None
            
        evolution_print(f"   ‚úÖ –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è —Å–ø–æ—Ä–∞ –º–æ–∂–µ—Ç —ç–≤–æ–ª—é—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞—Ç—å")
        evolution_print(f"   üéÆ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {parent_spore.logic.optimal_control}")
        evolution_print(f"   ‚è±Ô∏è  –ò—Å–ø–æ–ª—å–∑—É–µ—Ç dt: {parent_spore.logic.optimal_dt}")
            
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–ø–æ—Ä—É (–ø–æ–∑–≤–æ–ª—è–µ–º —Ä–µ–∞–ª—å–Ω–æ –¥–æ–π—Ç–∏ –¥–æ –ø–æ–∑–∏—Ü–∏–∏)
        evolution_print(f"   üèóÔ∏è  –°–û–ó–î–ê–ù–ò–ï –Ω–æ–≤–æ–π —Å–ø–æ—Ä—ã...")
        new_spore = parent_spore.step(control=parent_spore.logic.optimal_control, dt=parent_spore.logic.optimal_dt)
        new_position_2d = new_spore.calc_2d_pos()
        
        evolution_print(f"   ‚úÖ –ù–æ–≤–∞—è —Å–ø–æ—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞:")
        evolution_print(f"      üìç –ù–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è: {new_position_2d}")
        evolution_print(f"      üí∞ –ù–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {new_spore.logic.cost:.6f}")
        evolution_print(f"      üìâ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏: {parent_spore.logic.cost - new_spore.logic.cost:.6f}")
        
        # –¢–µ–ø–µ—Ä—å –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä—è–¥–æ–º —Å –ù–û–í–û–ô –°–ü–û–†–û–ô –¥—Ä—É–≥–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–ø–æ—Ä—ã
        tolerance = self.config.get('trajectory_optimization', {}).get('trajectory_merge_tolerance', 0.05)
        trajectory_print(f"   üîç –ü–†–û–í–ï–†–ö–ê –±–ª–∏–∑–æ—Å—Ç–∏ (tolerance: {tolerance})...")
        
        existing_spore = self.find_nearby_spore(new_position_2d, tolerance, exclude_spore=parent_spore)
        
        # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è)
        if debug_output:
            trajectory_print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è:")
            trajectory_print(f"   –†–æ–¥–∏—Ç–µ–ª—å {parent_spore.id}: {parent_spore.calc_2d_pos()}")
            trajectory_print(f"   –ù–æ–≤–∞—è —Å–ø–æ—Ä–∞ –ø–æ–∑–∏—Ü–∏—è: {new_position_2d}")
            trajectory_print(f"   Tolerance: {tolerance}")
            trajectory_print(f"   –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {parent_spore.logic.optimal_control}")
            trajectory_print(f"   dt: {parent_spore.logic.optimal_dt}")
            if existing_spore:
                trajectory_print(f"   –ù–∞–π–¥–µ–Ω–∞ –±–ª–∏–∑–∫–∞—è —Å–ø–æ—Ä–∞ {existing_spore.id} –≤ –ø–æ–∑–∏—Ü–∏–∏: {existing_spore.calc_2d_pos()}")
                distance = np.linalg.norm(new_position_2d - existing_spore.calc_2d_pos())
                trajectory_print(f"   –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ –Ω–µ—ë: {distance:.4f}")
            else:
                trajectory_print(f"   –ë–ª–∏–∂–∞–π—à–∏—Ö —Å–ø–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        
        if existing_spore is not None:
            # –ù–∞–π–¥–µ–Ω–∞ –±–ª–∏–∑–∫–∞—è —Å–ø–æ—Ä–∞ - —É–¥–∞–ª—è–µ–º –Ω–æ–≤—É—é —Å–ø–æ—Ä—É –∏ —Å–æ–∑–¥–∞–µ–º —Å–≤—è–∑—å –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π
            distance = np.linalg.norm(new_position_2d - existing_spore.calc_2d_pos())
            trajectory_print(f"   üéØ –ù–ê–ô–î–ï–ù–ê –±–ª–∏–∑–∫–∞—è —Å–ø–æ—Ä–∞ {existing_spore.id}:")
            trajectory_print(f"      üìç –ü–æ–∑–∏—Ü–∏—è –±–ª–∏–∑–∫–æ–π: {existing_spore.calc_2d_pos()}")
            trajectory_print(f"      üìè –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {distance:.6f}")
            trajectory_print(f"      üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –±–ª–∏–∑–∫–æ–π: {existing_spore.logic.cost:.6f}")
            
            trajectory_print(f"   ‚ôªÔ∏è  –£–î–ê–õ–ï–ù–ò–ï —Ç–æ–ª—å–∫–æ —á—Ç–æ —Å–æ–∑–¥–∞–Ω–Ω–æ–π —Å–ø–æ—Ä—ã...")
            destroy(new_spore)  # –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ —á—Ç–æ —Å–æ–∑–¥–∞–Ω–Ω—É—é —Å–ø–æ—Ä—É
            
            trajectory_print(f"   üîó –°–û–ó–î–ê–ù–ò–ï —Å–≤—è–∑–∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è...")
            self.create_link_to_existing(parent_spore, existing_spore)
            
            # –ó–∞–≤–µ—Ä—à–∞–µ–º —ç–≤–æ–ª—é—Ü–∏—é —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π —Å–ø–æ—Ä—ã –ø–æ—Å–ª–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è
            trajectory_print(f"   üèÅ –ó–ê–í–ï–†–®–ï–ù–ò–ï —ç–≤–æ–ª—é—Ü–∏–∏ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π —Å–ø–æ—Ä—ã...")
            parent_spore.mark_evolution_completed()
            
            trajectory_print(f"‚úÖ –û–ë–™–ï–î–ò–ù–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û:")
            trajectory_print(f"   üîÑ –¢—Ä–∞–µ–∫—Ç–æ—Ä–∏—è: —Å–ø–æ—Ä–∞ {parent_spore.id} ‚Üí —Å–ø–æ—Ä–∞ {existing_spore.id}")
            trajectory_print(f"   üèÅ –°–ø–æ—Ä–∞ {parent_spore.id} –∑–∞–≤–µ—Ä—à–∏–ª–∞ —ç–≤–æ–ª—é—Ü–∏—é")
            trajectory_print(f"   ‚ôªÔ∏è  –ù–æ–≤–∞—è —Å–ø–æ—Ä–∞ —É–¥–∞–ª–µ–Ω–∞\n")
            
            if debug_output:
                trajectory_print(f"üîÑ –¢—Ä–∞–µ–∫—Ç–æ—Ä–∏—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∞: —Å–ø–æ—Ä–∞ {parent_spore.id} ‚Üí —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è —Å–ø–æ—Ä–∞ {existing_spore.id}")
                trajectory_print(f"üèÅ –°–ø–æ—Ä–∞ {parent_spore.id} –∑–∞–≤–µ—Ä—à–∏–ª–∞ —ç–≤–æ–ª—é—Ü–∏—é (–æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ)")
                trajectory_print(f"‚ôªÔ∏è  –ù–æ–≤–∞—è —Å–ø–æ—Ä–∞ —É–¥–∞–ª–µ–Ω–∞, —Ç–∞–∫ –∫–∞–∫ —Ä—è–¥–æ–º –µ—Å—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è")
            return existing_spore
        
        # –ë–ª–∏–∑–∫–∞—è —Å–ø–æ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ - –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å–ø–æ—Ä—É –∫–∞–∫ –æ–±—ã—á–Ω–æ
        evolution_print(f"   ‚úÖ –ë–ª–∏–∑–∫–∏—Ö —Å–ø–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω–æ - –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å–ø–æ—Ä—É")
        evolution_print(f"   ‚ûï –î–û–ë–ê–í–õ–ï–ù–ò–ï –≤ —Å–∏—Å—Ç–µ–º—É...")
        # ID –±—É–¥–µ—Ç –ø—Ä–∏—Å–≤–æ–µ–Ω –≤ add_spore
        
        self.add_spore(new_spore)
        self.zoom_manager.register_object(new_spore, f"spore_{new_spore.id}")

        # Create a link if enabled in config
        if self.config.get('link', {}).get('show', True):
            debug_print(f"   üîó –°–û–ó–î–ê–ù–ò–ï –æ–±—ã—á–Ω–æ–π —Å–≤—è–∑–∏: {parent_spore.id} ‚Üí {new_spore.id}")
            new_link = Link(parent_spore,
                            new_spore,
                            color_manager=self.color_manager,
                            zoom_manager=self.zoom_manager,
                            config=self.config)
            self.links.append(new_link)
            self.zoom_manager.register_object(new_link, f"link_{len(self.links)}")

        # --- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï (—Ñ–∏–Ω–∞–ª—å–Ω–∞—è, –ø—Ä–æ—Å—Ç–∞—è –≤–µ—Ä—Å–∏—è): ---
        # –í—ã–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, –∫–∞–∫ —ç—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø—Ä–∏ –∑—É–º–µ.
        # –≠—Ç–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã, –≤–∫–ª—é—á–∞—è –Ω–æ–≤—ã–π –ª–∏–Ω–∫ –∏ –µ–≥–æ —Ä–æ–¥–∏—Ç–µ–ª–µ–π,
        # –±—É–¥—É—Ç –≤ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏.
        self.zoom_manager.update_transform()

        evolution_print(f"‚úÖ –ù–û–í–ê–Ø –°–ü–û–†–ê –°–û–ó–î–ê–ù–ê:")
        evolution_print(f"   üÜî ID: {new_spore.id}")
        evolution_print(f"   üìç –§–∏–Ω–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è: {new_spore.calc_2d_pos()}")
        evolution_print(f"   üí∞ –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {new_spore.logic.cost:.6f}")
        evolution_print(f"   üîó –°–≤—è–∑–µ–π –≤ —Å–∏—Å—Ç–µ–º–µ: {len(self.links)}")
        evolution_print(f"   üî∏ –°–ø–æ—Ä –≤ —Å–∏—Å—Ç–µ–º–µ: {len(self.objects)}\n")

        return new_spore

    def generate_random_spore_in_spawn_area(self) -> Optional[Spore]:
        """–°–æ–∑–¥–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é —Å–ø–æ—Ä—É –≤ —Å–ª—É—á–∞–π–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏ –≤–Ω—É—Ç—Ä–∏ spawn area."""
        if not self.spawn_area:
            always_print("‚ö†Ô∏è Spawn area –Ω–µ –∑–∞–¥–∞–Ω, –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —Å–ª—É—á–∞–π–Ω—É—é —Å–ø–æ—Ä—É")
            return None
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é 2D –ø–æ–∑–∏—Ü–∏—é –≤–Ω—É—Ç—Ä–∏ spawn area
        random_position_2d = self.spawn_area.sample_random_point()
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ 3D –ø–æ–∑–∏—Ü–∏—é (Y=0 –¥–ª—è –ø–ª–æ—Å–∫–æ—Å—Ç–∏ XZ)
        random_position_3d = (random_position_2d[0], 0.0, random_position_2d[1])
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–ø–æ—Ä—É –≤ —Å–ª—É—á–∞–π–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ü–µ–ª–∏ –æ—Ç –ª—é–±–æ–π —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–ø–æ—Ä—ã –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º defaults
        goal_position = None
        if self.objects:
            goal_position = self.objects[0].goal_position
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç —Å–ø–æ—Ä, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
            goal_position = self.config.get('spore', {}).get('goal_position', [3.14159, 0])
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–ø–æ—Ä—É
        new_spore = Spore(
            pendulum=self.pendulum,
            dt=self.config.get('pendulum', {}).get('dt', 0.1),
            goal_position=goal_position,
            scale=self.config.get('spore', {}).get('scale', 0.05),
            position=random_position_3d,
            color_manager=self.color_manager,
            config=self.config.get('spore', {})
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–æ—Ä—É –≤ –º–µ–Ω–µ–¥–∂–µ—Ä 
        self.add_spore(new_spore)
        self.zoom_manager.register_object(new_spore, f"random_spore_{new_spore.id}")
        
        always_print(f"üé≤ –°–æ–∑–¥–∞–Ω–∞ —Å–ª—É—á–∞–π–Ω–∞—è —Å–ø–æ—Ä–∞ {new_spore.id} –≤ –ø–æ–∑–∏—Ü–∏–∏ {random_position_2d}")
        
        return new_spore
    
    def generate_candidate_spores(self) -> None:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç—Å–∫–∏–µ —Å–ø–æ—Ä—ã —Å –ø–æ–º–æ—â—å—é –¥–∏—Å–∫–æ–≤ –ü—É–∞—Å—Å–æ–Ω–∞."""
        if not self.spawn_area:
            always_print("‚ö†Ô∏è Spawn area –Ω–µ –∑–∞–¥–∞–Ω, –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤")
            return
        
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
        for candidate in self.candidate_spores:
            # –£–¥–∞–ª—è–µ–º –∏–∑ zoom_manager –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º –æ–±—ä–µ–∫—Ç–∞
            if hasattr(candidate, 'id'):
                self.zoom_manager.unregister_object(candidate.id)
            destroy(candidate)
        self.candidate_spores = []
        
        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–∑–∏—Ü–∏–∏ —á–µ—Ä–µ–∑ –¥–∏—Å–∫–∏ –ü—É–∞—Å—Å–æ–Ω–∞
            candidate_positions_2d = self.spawn_area.sample_poisson_disk(self.min_radius)
            
            if len(candidate_positions_2d) == 0:
                always_print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ —Å —Ä–∞–¥–∏—É—Å–æ–º {self.min_radius}")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ü–µ–ª–∏
            goal_position = None
            if self.objects:
                goal_position = self.objects[0].goal_position
            else:
                goal_position = self.config.get('spore', {}).get('goal_position', [3.14159, 0])
            
            # –°–æ–∑–¥–∞–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç—Å–∫–∏–µ —Å–ø–æ—Ä—ã
            for i, pos_2d in enumerate(candidate_positions_2d):
                pos_3d = (pos_2d[0], 0.0, pos_2d[1])
                
                candidate = Spore(
                    pendulum=self.pendulum,
                    dt=self.config.get('pendulum', {}).get('dt', 0.1),
                    goal_position=goal_position,
                    scale=self.config.get('spore', {}).get('scale', 0.05),
                    position=pos_3d,
                    color_manager=self.color_manager,
                    config=self.config.get('spore', {}),
                    is_ghost=False  # –ö–∞–Ω–¥–∏–¥–∞—Ç—ã –Ω–µ –ø—Ä–∏–∑—Ä–∞–∫–∏
                )
                
                candidate.id = f"candidate_{i}"
                candidate.is_candidate = True
                candidate.set_color_type('candidate')  # –ë–µ–ª—ã–π –ø–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π
                
                self.candidate_spores.append(candidate)
                self.zoom_manager.register_object(candidate, candidate.id)
            
            self.candidate_count = len(self.candidate_spores)
            candidate_print(f"üéØ –°–æ–∑–¥–∞–Ω–æ {self.candidate_count} –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ —Å —Ä–∞–¥–∏—É—Å–æ–º {self.min_radius}")
            
        except Exception as e:
            always_print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤: {e}")
    
    def activate_random_candidate(self) -> Optional[Spore]:
        """–í—ã–±–∏—Ä–∞–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –∏ –¥–µ–ª–∞–µ—Ç –µ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–ø–æ—Ä–æ–π."""
        if not self.candidate_spores:
            always_print("‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤")
            return None
        
        candidate_print(f"\nüé≤ –ê–ö–¢–ò–í–ê–¶–ò–Ø –°–õ–£–ß–ê–ô–ù–û–ì–û –ö–ê–ù–î–ò–î–ê–¢–ê:")
        candidate_print(f"   üìä –î–æ—Å—Ç—É–ø–Ω–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤: {len(self.candidate_spores)}")
        
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
        import random
        selected_candidate = random.choice(self.candidate_spores)
        
        candidate_print(f"   üéØ –í—ã–±—Ä–∞–Ω –∫–∞–Ω–¥–∏–¥–∞—Ç: {selected_candidate.id}")
        candidate_print(f"   üìç –ü–æ–∑–∏—Ü–∏—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞: {selected_candidate.calc_2d_pos()}")
        candidate_print(f"   üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –∫–∞–Ω–¥–∏–¥–∞—Ç–∞: {selected_candidate.logic.cost:.6f}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–∑–∏—Ü–∏—é –∏ —Ü–µ–ª—å –¥–æ —É–¥–∞–ª–µ–Ω–∏—è
        candidate_position = selected_candidate.real_position.copy()
        candidate_goal = selected_candidate.goal_position
        
        candidate_print(f"   üóëÔ∏è  –£–î–ê–õ–ï–ù–ò–ï –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –∏–∑ —Å–∏—Å—Ç–µ–º—ã...")
        
        # –£–¥–∞–ª—è–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –∏–∑ zoom_manager –ü–ï–†–ï–î —É–¥–∞–ª–µ–Ω–∏–µ–º –æ–±—ä–µ–∫—Ç–∞
        if hasattr(selected_candidate, 'id'):
            self.zoom_manager.unregister_object(selected_candidate.id)
        
        # –£–¥–∞–ª—è–µ–º –µ–≥–æ –∏–∑ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
        self.candidate_spores.remove(selected_candidate)
        
        # –£–¥–∞–ª—è–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
        destroy(selected_candidate)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫
        self.candidate_count = len(self.candidate_spores)
        candidate_print(f"   üìâ –û—Å—Ç–∞–ª–æ—Å—å –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤: {self.candidate_count}")
        
        candidate_print(f"   üèóÔ∏è  –°–û–ó–î–ê–ù–ò–ï –∞–∫—Ç–∏–≤–Ω–æ–π —Å–ø–æ—Ä—ã –Ω–∞ —Ç–æ–º –∂–µ –º–µ—Å—Ç–µ...")
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∞–∫—Ç–∏–≤–Ω—É—é —Å–ø–æ—Ä—É –≤ —Ç–æ–π –∂–µ –ø–æ–∑–∏—Ü–∏–∏
        new_spore = Spore(
            pendulum=self.pendulum,
            dt=self.config.get('pendulum', {}).get('dt', 0.1),
            goal_position=candidate_goal,
            scale=self.config.get('spore', {}).get('scale', 0.05),
            position=candidate_position,
            color_manager=self.color_manager,
            config=self.config.get('spore', {})
        )
        
        candidate_print(f"   ‚ûï –î–û–ë–ê–í–õ–ï–ù–ò–ï –∞–∫—Ç–∏–≤–Ω–æ–π —Å–ø–æ—Ä—ã –≤ —Å–∏—Å—Ç–µ–º—É...")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å–ø–æ—Ä—É —á–µ—Ä–µ–∑ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é —Å–∏—Å—Ç–µ–º—É
        self.add_spore(new_spore)
        self.zoom_manager.register_object(new_spore, f"activated_spore_{new_spore.id}")
        
        candidate_print(f"‚úÖ –ö–ê–ù–î–ò–î–ê–¢ –ê–ö–¢–ò–í–ò–†–û–í–ê–ù:")
        candidate_print(f"   üÜî –ù–æ–≤—ã–π ID: {new_spore.id}")
        candidate_print(f"   üìç –ü–æ–∑–∏—Ü–∏—è: {candidate_position}")
        candidate_print(f"   üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {new_spore.logic.cost:.6f}")
        candidate_print(f"   üéÆ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {new_spore.logic.optimal_control}")
        candidate_print(f"   ‚è±Ô∏è  dt: {new_spore.logic.optimal_dt}")
        candidate_print(f"   üíö –ñ–∏–≤–∞: {new_spore.is_alive()}")
        candidate_print(f"   üöÄ –ú–æ–∂–µ—Ç —ç–≤–æ–ª—é—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞—Ç—å: {new_spore.can_evolve()}\n")
        
        return new_spore

    def evolve_all_candidates_to_completion(self) -> None:
        """
        –†–∞–∑–≤–∏–≤–∞–µ—Ç –≤—Å–µ—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –¥–æ —Å–º–µ—Ä—Ç–∏ –∏–ª–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —ç–≤–æ–ª—é—Ü–∏–∏.
        
        –î–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞:
        1. –ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –µ–≥–æ (–ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç –≤ –æ–±—ã—á–Ω—É—é —Å–ø–æ—Ä—É)
        2. –†–∞–∑–≤–∏–≤–∞–µ—Ç –¥–æ —Ç–µ—Ö –ø–æ—Ä –ø–æ–∫–∞ —Å–ø–æ—Ä–∞ –º–æ–∂–µ—Ç —ç–≤–æ–ª—é—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞—Ç—å
        3. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –∫–æ–≥–¥–∞ —Å–ø–æ—Ä–∞ —É–º–∏—Ä–∞–µ—Ç –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç —ç–≤–æ–ª—é—Ü–∏—é
        """
        if not self.candidate_spores:
            always_print("‚ö†Ô∏è –ù–µ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è")
            return
        
        total_candidates = len(self.candidate_spores)
        always_print(f"\nüöÄ –ù–ê–ß–ò–ù–ê–ï–ú –ú–ê–°–°–û–í–û–ï –†–ê–ó–í–ò–¢–ò–ï –ö–ê–ù–î–ò–î–ê–¢–û–í:")
        always_print(f"   üìä –í—Å–µ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤: {total_candidates}")
        always_print(f"   üéØ –¶–µ–ª—å: —Ä–∞–∑–≤–∏—Ç—å –∫–∞–∂–¥–æ–≥–æ –¥–æ —Å–º–µ—Ä—Ç–∏ –∏–ª–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —ç–≤–æ–ª—é—Ü–∏–∏\n")
        
        processed_count = 0
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –ø–æ–∫–∞ –æ–Ω–∏ –µ—Å—Ç—å
        while self.candidate_spores:
            processed_count += 1
            remaining = len(self.candidate_spores)
            
            always_print(f"üîÑ –û–ë–†–ê–ë–ê–¢–´–í–ê–ï–ú –ö–ê–ù–î–ò–î–ê–¢–ê {processed_count}/{total_candidates} (–æ—Å—Ç–∞–ª–æ—Å—å: {remaining})")
            evolution_print(f"   üìä –î–µ—Ç–∞–ª–∏: –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è")
            
            # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–µ—Ä–≤–æ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
            activated_spore = self.activate_random_candidate()
            if not activated_spore:
                always_print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫–∞–Ω–¥–∏–¥–∞—Ç–∞")
                break
            
            evolution_print(f"‚úÖ –ö–∞–Ω–¥–∏–¥–∞—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ —Å–ø–æ—Ä–∞ {activated_spore.id}")
            evolution_print(f"   üìç –°—Ç–∞—Ä—Ç–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è: {activated_spore.calc_2d_pos()}")
            evolution_print(f"   üí∞ –°—Ç–∞—Ä—Ç–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {activated_spore.logic.cost:.6f}")
            
            # –†–∞–∑–≤–∏–≤–∞–µ–º —Å–ø–æ—Ä—É –¥–æ –∫–æ–Ω—Ü–∞
            evolution_step = 0
            max_steps = 100  # –ó–∞—â–∏—Ç–∞ –æ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
            
            evolution_print(f"   üß¨ –ù–ê–ß–ò–ù–ê–ï–ú –≠–í–û–õ–Æ–¶–ò–Æ...")
            
            while activated_spore.can_evolve() and evolution_step < max_steps:
                evolution_step += 1
                evolution_print(f"      üìà –®–∞–≥ —ç–≤–æ–ª—é—Ü–∏–∏ {evolution_step}:")
                evolution_print(f"         üìç –¢–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è: {activated_spore.calc_2d_pos()}")
                evolution_print(f"         üí∞ –¢–µ–∫—É—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {activated_spore.logic.cost:.6f}")
                evolution_print(f"         üíö –ñ–∏–≤–∞: {activated_spore.is_alive()}")
                evolution_print(f"         üèÅ –≠–≤–æ–ª—é—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {activated_spore.evolution_completed}")
                
                # –°–æ–∑–¥–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é —Å–ø–æ—Ä—É
                result = self.generate_new_spore()
                
                if result is None:
                    evolution_print(f"         üõë generate_new_spore –≤–µ—Ä–Ω—É–ª None - –æ—Å—Ç–∞–Ω–æ–≤–∫–∞")
                    break
                elif result == activated_spore:
                    evolution_print(f"         üîÑ –°–ø–æ—Ä–∞ –æ—Å—Ç–∞–ª–∞—Å—å —Ç–æ–π –∂–µ - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º")
                    continue
                else:
                    evolution_print(f"         ‚û°Ô∏è  –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Å–ø–æ—Ä–∞ {result.id}")
                    activated_spore = result  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –Ω–æ–≤–æ–π —Å–ø–æ—Ä–µ
            
            # –ü—Ä–∏—á–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —ç–≤–æ–ª—é—Ü–∏–∏
            reason = ""
            if evolution_step >= max_steps:
                reason = f"üõë –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —à–∞–≥–æ–≤ ({max_steps})"
            elif not activated_spore.is_alive():
                reason = f"üíÄ —Å–ø–æ—Ä–∞ —É–º–µ—Ä–ª–∞ (dt = {activated_spore.logic.optimal_dt})"
            elif activated_spore.evolution_completed:
                reason = "üèÅ —ç–≤–æ–ª—é—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ (–æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ)"
            else:
                reason = "‚ùì –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞"
            
            evolution_print(f"   üéØ –≠–í–û–õ–Æ–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –ø–æ—Å–ª–µ {evolution_step} —à–∞–≥–æ–≤:")
            evolution_print(f"      üîç –ü—Ä–∏—á–∏–Ω–∞: {reason}")
            evolution_print(f"      üìç –§–∏–Ω–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è: {activated_spore.calc_2d_pos()}")
            evolution_print(f"      üí∞ –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {activated_spore.logic.cost:.6f}")
            evolution_print(f"      üíö –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {'–∂–∏–≤–∞' if activated_spore.is_alive() else '–º–µ—Ä—Ç–≤–∞'}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
            always_print(f"‚úÖ –ö–ê–ù–î–ò–î–ê–¢ {processed_count}/{total_candidates} –ó–ê–í–ï–†–®–ï–ù ({reason})")
            evolution_print()
        
        always_print(f"üéâ –ú–ê–°–°–û–í–û–ï –†–ê–ó–í–ò–¢–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!")
        always_print(f"   ‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤: {processed_count}")
        always_print(f"   üìä –û—Å—Ç–∞–ª–æ—Å—å –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤: {len(self.candidate_spores)}")
        always_print(f"   üî∏ –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–ø–æ—Ä –≤ —Å–∏—Å—Ç–µ–º–µ: {len(self.objects)}")
        always_print(f"   üîó –í—Å–µ–≥–æ —Å–≤—è–∑–µ–π: {len(self.links)}\n")
    
    def adjust_min_radius(self, multiplier: float) -> None:
        """–ò–∑–º–µ–Ω—è–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–¥–∏—É—Å –º—É–ª—å—Ç–∏–ø–ª–∏–∫–∞—Ç–∏–≤–Ω–æ –∏ –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤."""
        old_radius = self.min_radius
        self.min_radius = max(0.05, self.min_radius * multiplier)  # –ú–∏–Ω–∏–º—É–º 0.05
        
        if abs(self.min_radius - old_radius) > 0.001:  # –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–∏ –ª—é–±–æ–º –∑–Ω–∞—á–∏–º–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏
            candidate_print(f"üîß –†–∞–¥–∏—É—Å –∏–∑–º–µ–Ω–µ–Ω: {old_radius:.3f} ‚Üí {self.min_radius:.3f} (√ó{multiplier:.2f})")
            self.generate_candidate_spores()
    
    def find_nearby_spore(self, position_2d: np.ndarray, tolerance: float = 0.1, exclude_spore: Optional[Spore] = None) -> Optional[Spore]:
        """
        –ò—â–µ—Ç —Å–ø–æ—Ä—É –≤ —Ä–∞–¥–∏—É—Å–µ tolerance –æ—Ç –∑–∞–¥–∞–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏.
        
        Args:
            position_2d: 2D –ø–æ–∑–∏—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞
            tolerance: –†–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞
            exclude_spore: –°–ø–æ—Ä–∞, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –∏—Å–∫–ª—é—á–∏—Ç—å –∏–∑ –ø–æ–∏—Å–∫–∞ (–æ–±—ã—á–Ω–æ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è)
            
        Returns:
            –ë–ª–∏–∂–∞–π—à–∞—è —Å–ø–æ—Ä–∞ –≤ —Ä–∞–¥–∏—É—Å–µ –∏–ª–∏ None
        """
        min_distance = float('inf')
        closest_spore = None
        
        for spore in self.objects:
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∏—Å–∫–ª—é—á–∞–µ–º—É—é —Å–ø–æ—Ä—É
            if exclude_spore is not None and spore.id == exclude_spore.id:
                continue
                
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏–∑—Ä–∞–∫–æ–≤ (–º–µ—Ä—Ç–≤—ã–µ —Å–ø–æ—Ä—ã —É—á–∏—Ç—ã–≤–∞–µ–º –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è)
            if (hasattr(spore, 'is_ghost') and spore.is_ghost):
                continue
                
            spore_pos_2d = spore.calc_2d_pos()
            distance = np.linalg.norm(position_2d - spore_pos_2d)
            
            if distance <= tolerance and distance < min_distance:
                min_distance = distance
                closest_spore = spore
                
        return closest_spore
    
    def create_link_to_existing(self, from_spore: Spore, to_spore: Spore) -> None:
        """
        –°–æ–∑–¥–∞–µ—Ç —Å–≤—è–∑—å –º–µ–∂–¥—É —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ —Å–ø–æ—Ä–∞–º–∏.
        
        Args:
            from_spore: –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è —Å–ø–æ—Ä–∞ (—Ç–∞, –∫–æ—Ç–æ—Ä–∞—è —Å–æ–∑–¥–∞–ª–∞ –Ω–æ–≤—É—é)
            to_spore: –¶–µ–ª–µ–≤–∞—è —Å–ø–æ—Ä–∞ (—Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è)
        """
        trajectory_print(f"   üîó –î–ï–¢–ê–õ–ò –°–û–ó–î–ê–ù–ò–Ø –°–í–Ø–ó–ò –û–ë–™–ï–î–ò–ù–ï–ù–ò–Ø:")
        trajectory_print(f"      üèÅ –û–¢: —Å–ø–æ—Ä–∞ {from_spore.id} (—Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è)")
        trajectory_print(f"         üìç –ü–æ–∑–∏—Ü–∏—è: {from_spore.calc_2d_pos()}")
        trajectory_print(f"         üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {from_spore.logic.cost:.6f}")
        trajectory_print(f"         üíö –ñ–∏–≤–∞: {from_spore.is_alive()}")
        trajectory_print(f"      üéØ –ö: —Å–ø–æ—Ä–∞ {to_spore.id} (—Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è)")
        trajectory_print(f"         üìç –ü–æ–∑–∏—Ü–∏—è: {to_spore.calc_2d_pos()}")
        trajectory_print(f"         üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {to_spore.logic.cost:.6f}")
        trajectory_print(f"         üíö –ñ–∏–≤–∞: {to_spore.is_alive()}")
        
        if self.config.get('link', {}).get('show', True):
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°—Ç—Ä–µ–ª–∫–∞ –¥–æ–ª–∂–Ω–∞ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —á—Ç–æ from_spore "–ø—Ä–∏—Ö–æ–¥–∏—Ç" –∫ to_spore
            # –õ–æ–≥–∏–∫–∞: —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—è –æ—Ç —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π —Å–ø–æ—Ä—ã –≤–µ–¥–µ—Ç –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–ø–æ—Ä–µ
            trajectory_print(f"      üèπ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–µ–ª–∫–∏: {from_spore.id} ‚Üí {to_spore.id}")
            
            new_link = Link(from_spore,  # parent_spore (–æ—Ç–∫—É–¥–∞ –ø—Ä–∏—Ö–æ–¥–∏—Ç —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—è)
                           to_spore,     # existing_spore (–∫—É–¥–∞ –ø—Ä–∏—Ö–æ–¥–∏—Ç —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—è)
                           color_manager=self.color_manager,
                           zoom_manager=self.zoom_manager,
                           config=self.config)
            # –í—ã–¥–µ–ª—è–µ–º –æ—Å–æ–±—ã–º —Ü–≤–µ—Ç–æ–º —Å–≤—è–∑–∏ –º–µ–∂–¥—É —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ —Å–ø–æ—Ä–∞–º–∏
            link_color = self.color_manager.get_color('link', 'active')
            new_link.color = link_color
            trajectory_print(f"      üé® –¶–≤–µ—Ç —Å–≤—è–∑–∏: {link_color} (–∞–∫—Ç–∏–≤–Ω–∞—è —Å–≤—è–∑—å –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è)")
            
            self.links.append(new_link)
            self.zoom_manager.register_object(new_link, f"merge_link_{len(self.links)}")
            
            trajectory_print(f"      üîß –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥–µ–æ–º–µ—Ç—Ä–∏–∏ –∏ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏...")
            # –û–±–Ω–æ–≤–ª—è–µ–º –≥–µ–æ–º–µ—Ç—Ä–∏—é –∏ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—é
            new_link.update_geometry()
            self.zoom_manager.update_transform()
            
            trajectory_print(f"   ‚úÖ –°–í–Ø–ó–¨ –°–û–ó–î–ê–ù–ê: —Å–ø–æ—Ä–∞ {from_spore.id} ‚Üí —Å–ø–æ—Ä–∞ {to_spore.id} (–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è)")
            trajectory_print(f"      üîó –í—Å–µ–≥–æ —Å–≤—è–∑–µ–π –≤ —Å–∏—Å—Ç–µ–º–µ: {len(self.links)}")
        else:
            trajectory_print(f"      ‚ùå –°–æ–∑–¥–∞–Ω–∏–µ —Å–≤—è–∑–µ–π –æ—Ç–∫–ª—é—á–µ–Ω–æ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")

    def get_last_active_spore(self) -> Optional[Spore]:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é —Å–ø–æ—Ä—É, —Å–ø–æ—Å–æ–±–Ω—É—é –∫ —ç–≤–æ–ª—é—Ü–∏–∏ (–Ω–µ goal, –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–∞—è)"""
        for spore in reversed(self.objects):
            if not (hasattr(spore, 'is_goal') and spore.is_goal):
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—É—é –Ω–∞–π–¥–µ–Ω–Ω—É—é –Ω–µ-—Ü–µ–ª—å (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
                # –Ω–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –æ—Ç–¥–∞–µ–º —Å–ø–æ—Ä–∞–º, —Å–ø–æ—Å–æ–±–Ω—ã–º –∫ —ç–≤–æ–ª—é—Ü–∏–∏
                if hasattr(spore, 'can_evolve') and spore.can_evolve():
                    return spore
        
        # –ï—Å–ª–∏ –Ω–µ—Ç —Å–ø–æ—Ä, —Å–ø–æ—Å–æ–±–Ω—ã—Ö –∫ —ç–≤–æ–ª—é—Ü–∏–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ-—Ü–µ–ª—å
        for spore in reversed(self.objects):
            if not (hasattr(spore, 'is_goal') and spore.is_goal):
                return spore
        return None

    def update_ghost_link(self) -> None:
        """–°–æ–∑–¥–∞–µ—Ç –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–≤—è–∑—å –æ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–ø–æ—Ä—ã –∫ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–∏–∑—Ä–∞—á–Ω–æ–π —Å–ø–æ—Ä–µ."""
        last_spore = self.get_last_active_spore()
        if not last_spore or not self.optimal_ghost_spore:
            return

        # print('--------------------------------')
        # print(f'last_spore: {last_spore}')
        # print(f'last_spore cost: {last_spore.logic.cost}')
        # print(f'optimal_control: {last_spore.logic.optimal_control}')
        # print('--------------------------------')
        
        # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–≤—è–∑—å –∫ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–∏–∑—Ä–∞—á–Ω–æ–π —Å–ø–æ—Ä–µ
        if not self.ghost_link:
            self.ghost_link = Link(last_spore, self.optimal_ghost_spore, 
                                   color_manager=self.color_manager, 
                                   zoom_manager=self.zoom_manager,
                                   config=self.config)
            self.ghost_link.color = self.color_manager.get_color('link', 'ghost')
            self.zoom_manager.register_object(self.ghost_link, "ghost_link")
        else:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–≤—è–∑—å –µ—Å–ª–∏ –æ–Ω–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            self.ghost_link.parent_spore = last_spore
            self.ghost_link.child_spore = self.optimal_ghost_spore
            self.ghost_link.update_geometry()
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º AngelManager
        if self.angel_manager:
            self.angel_manager.update_ghost_link_angel(last_spore, self.optimal_ghost_spore)

    def create_ghost_spores(self, N: int) -> None:
        """–°–æ–∑–¥–∞–µ—Ç N –≤–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä–æ–≤ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π."""
        last_spore = self.get_last_active_spore()
        if not last_spore:
            return

        # –ü–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –Ω–æ–≤—ã—Ö –æ—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ
        for visualizer in self.prediction_visualizers:
            visualizer.destroy()
        self.prediction_visualizers = []

        # –°–æ–∑–¥–∞–µ–º N –Ω–æ–≤—ã—Ö –≤–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä–æ–≤
        for i in range(N):
            visualizer = PredictionVisualizer(
                parent_spore=last_spore,
                color_manager=self.color_manager,
                zoom_manager=self.zoom_manager,
                cost_function=self.angel_manager.cost_function if self.angel_manager else None,
                config=self.config,
                spore_id=f"ghost_pred_{i}"
            )
            self.prediction_visualizers.append(visualizer)

    def sample_ghost_spores(self, N: int = 4) -> None:
        """–°–æ–∑–¥–∞–µ—Ç —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –ø—Ä–∏–∑—Ä–∞–∫–æ–≤ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏ –∏ —Ü–≤–µ—Ç–∞–º–∏."""
        # –í—Å–µ–≥–¥–∞ —Å–æ–∑–¥–∞–µ–º 4 –ø—Ä–∏–∑—Ä–∞–∫–∞: 2 –∫—Ä–∞—Å–Ω—ã—Ö (–º–∞–∫—Å), 1 –∑–µ–ª–µ–Ω—ã–π (–Ω–æ–ª—å), 1 —Å–∏–Ω–∏–π (–æ–ø—Ç)
        if not self.prediction_visualizers:
            self.create_ghost_spores(4)
        
        if not self.prediction_visualizers:
            return

        last_spore = self.get_last_active_spore()
        if not last_spore:
            return

        # –ü–æ–ª—É—á–∞–µ–º –≥—Ä–∞–Ω–∏—Ü—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        min_control, max_control = last_spore.logic.pendulum.get_control_bounds()
        optimal_control = last_spore.logic.optimal_control[0] if last_spore.logic.optimal_control is not None else 0.0
        dt_to_use = last_spore.logic.optimal_dt if last_spore.logic.optimal_dt is not None else last_spore.logic.dt

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ —Ü–≤–µ—Ç–∞
        ghost_configs = [
            {'control': max_control, 'color': 'ghost_max', 'name': 'max_pos'},     # –ö—Ä–∞—Å–Ω—ã–π +–º–∞–∫—Å
            {'control': min_control, 'color': 'ghost_max', 'name': 'max_neg'},     # –ö—Ä–∞—Å–Ω—ã–π -–º–∞–∫—Å  
            {'control': 0.0, 'color': 'ghost_zero', 'name': 'zero'},              # –ó–µ–ª–µ–Ω—ã–π
            {'control': optimal_control, 'color': 'ghost_optimal', 'name': 'optimal'}  # –°–∏–Ω–∏–π
        ]

        # –°–∏–º—É–ª–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        controls = [config['control'] for config in ghost_configs]
        states = last_spore.logic.simulate_controls(controls, dt_to_use)

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π –≤–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä
        for i, visualizer in enumerate(self.prediction_visualizers):
            if i < len(states) and i < len(ghost_configs):
                visualizer.update(states[i])
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                if hasattr(visualizer, 'ghost_spore') and visualizer.ghost_spore:
                    visualizer.ghost_spore.set_color_type(ghost_configs[i]['color'])
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é –ø—Ä–∏–∑—Ä–∞—á–Ω—É—é —Å–ø–æ—Ä—É (—Å–∏–Ω—é—é)
                if ghost_configs[i]['name'] == 'optimal':
                    self.optimal_ghost_spore = visualizer.ghost_spore
                
                visualizer.set_visibility(True)
                # print(f"üëª –ü—Ä–∏–∑—Ä–∞–∫ {ghost_configs[i]['name']}: control={ghost_configs[i]['control']:.3f}, state={states[i]}")
            else:
                visualizer.set_visibility(False)



