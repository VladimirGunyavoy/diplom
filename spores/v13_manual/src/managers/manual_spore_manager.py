from typing import Optional, Tuple, List
import numpy as np
from ursina import Vec3, color, destroy, mouse, camera, raycast, Vec2

from ..core.spore import Spore
from ..managers.zoom_manager import ZoomManager
from ..managers.spore_manager import SporeManager
from ..managers.color_manager import ColorManager
from ..logic.pendulum import PendulumSystem
from ..visual.prediction_visualizer import PredictionVisualizer
from ..visual.link import Link


class ManualSporeManager:
    """
    –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è —Å–ø–æ—Ä —Å –ø—Ä–µ–≤—å—é –ø–æ –∫—É—Ä—Å–æ—Ä—É.
    
    –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:
    - –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω—É—é —Å–ø–æ—Ä—É –≤ –ø–æ–∑–∏—Ü–∏–∏ –∫—É—Ä—Å–æ—Ä–∞ –º—ã—à–∏
    - –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –ø—Ä–∏ min/max —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏
    - –°–æ–∑–¥–∞–µ—Ç —Å–ø–æ—Ä—ã + —Ü–µ–ø–æ—á–∫–∏ —Ä–æ–¥–∏—Ç–µ–ª–µ–π –ø–æ –õ–ö–ú
    """
    
    def __init__(self, 
                 spore_manager: SporeManager,
                 zoom_manager: ZoomManager,
                 pendulum: PendulumSystem,
                 color_manager: ColorManager,
                 config: dict):
        
        self.spore_manager = spore_manager
        self.zoom_manager = zoom_manager
        self.pendulum = pendulum
        self.color_manager = color_manager
        self.config = config
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–µ–≤—å—é
        self.preview_enabled = True
        self.preview_alpha = 0.5  # –ü–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å
        
        # –ü—Ä–µ–≤—å—é —Å–ø–æ—Ä–∞
        self.preview_spore: Optional[Spore] = None
        self.preview_position_2d = np.array([0.0, 0.0], dtype=float)
        
        # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è min/max —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        self.prediction_visualizers: List[PredictionVisualizer] = []
        self.prediction_links: List[Link] = []  # –õ–∏–Ω–∫–∏ –æ—Ç –ø—Ä–µ–≤—å—é —Å–ø–æ—Ä—ã –∫ –ø—Ä–∏–∑—Ä–∞–∫–∞–º
        self.created_links: List[Link] = []
        self.show_predictions = True
        
        # –ü–æ–ª—É—á–∞–µ–º –≥—Ä–∞–Ω–∏—Ü—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–∑ –º–∞—è—Ç–Ω–∏–∫–∞
        control_bounds = self.pendulum.get_control_bounds()
        self.min_control = float(control_bounds[0])
        self.max_control = float(control_bounds[1])

        self._link_counter = 0
        self._spore_counter = 0
        
        print(f"   ‚úì Manual Spore Manager —Å–æ–∑–¥–∞–Ω (—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {self.min_control} .. {self.max_control})")

    def _get_next_link_id(self) -> int:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –ª–∏–Ω–∫–∞"""
        self._link_counter += 1
        return self._link_counter
    
    def _get_next_spore_id(self) -> int:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è —Å–ø–æ—Ä—ã"""
        self._spore_counter += 1
        return self._spore_counter
    
    def get_mouse_world_position(self) -> Optional[Tuple[float, float]]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –ø–æ–∑–∏—Ü–∏—é –∫—É—Ä—Å–æ—Ä–∞ –º—ã—à–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –∑—É–º–∞.
        
        –ê–ª–≥–æ—Ä–∏—Ç–º:
        1. –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–æ—á–∫—É –Ω–∞ –∫–æ—Ç–æ—Ä—É—é —Å–º–æ—Ç—Ä–∏—Ç –∫–∞–º–µ—Ä–∞ (–±–µ–∑ –∑—É–º–∞)
        2. –û—Ç–Ω—è—Ç—å –ø–æ–∑–∏—Ü–∏—é frame origin_cube
        3. –ü–æ–¥–µ–ª–∏—Ç—å –Ω–∞ common_scale
        
        Returns:
            (x, z) –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫—É—Ä—Å–æ—Ä–∞ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
        """
        try:
            # 1. –ü–æ–ª—É—á–∞–µ–º —Ç–æ—á–∫—É –≤–∑–≥–ª—è–¥–∞ –∫–∞–º–µ—Ä—ã (–±–µ–∑ –∑—É–º–∞)
            look_point_x, look_point_z = self.zoom_manager.identify_invariant_point()
            
            # 2. –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—É—é –ø–æ–∑–∏—Ü–∏—é origin_cube –∏–∑ frame
            frame = getattr(self.zoom_manager.scene_setup, 'frame', None)
            if frame and hasattr(frame, 'origin_cube'):
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—É—é position (–ø–æ—Å–ª–µ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–π) –∞ –Ω–µ real_position
                origin_pos = frame.origin_cube.position
                if hasattr(origin_pos, 'x'):
                    origin_x, origin_z = origin_pos.x, origin_pos.z
                else:
                    origin_x, origin_z = origin_pos[0], origin_pos[2]
            else:
                # Fallback –µ—Å–ª–∏ frame –Ω–µ –Ω–∞–π–¥–µ–Ω
                origin_x, origin_z = 0.0, 0.0
            
            # 3. –ü–æ–ª—É—á–∞–µ–º –º–∞—Å—à—Ç–∞–± —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏
            transform_scale = getattr(self.zoom_manager, 'a_transformation', 1.0)
            
            # 4. –ü–†–ê–í–ò–õ–¨–ù–ê–Ø –§–û–†–ú–£–õ–ê: (look_point - frame_origin_cube) / scale
            corrected_x = (look_point_x - origin_x) / transform_scale
            corrected_z = (look_point_z - origin_z) / transform_scale
            
            return (corrected_x, corrected_z)
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ –º—ã—à–∏: {e}")
            return (0.0, 0.0)
    
    def update_cursor_position(self) -> None:
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ–∑–∏—Ü–∏—é –ø—Ä–µ–≤—å—é —Å–ø–æ—Ä—ã –ø–æ –ø–æ–∑–∏—Ü–∏–∏ –∫—É—Ä—Å–æ—Ä–∞ –º—ã—à–∏.
        """
        if not self.preview_enabled:
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –∫—É—Ä—Å–æ—Ä–∞ –º—ã—à–∏
        mouse_pos = self.get_mouse_world_position()
        if mouse_pos is None:
            return
            
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é
        self.preview_position_2d[0] = mouse_pos[0]
        self.preview_position_2d[1] = mouse_pos[1]
        
        # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–≤—å—é —Å–ø–æ—Ä—É
        self._update_preview_spore()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
        if self.show_predictions:
            self._update_predictions()
    
    def set_preview_enabled(self, enabled: bool) -> None:
        """–í–∫–ª—é—á–∞–µ—Ç/–≤—ã–∫–ª—é—á–∞–µ—Ç –ø—Ä–µ–≤—å—é —Å–ø–æ—Ä."""
        self.preview_enabled = enabled
        if not enabled:
            self._destroy_preview()
    
    def _update_preview_spore(self) -> None:
        """–°–æ–∑–¥–∞–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–µ–≤—å—é —Å–ø–æ—Ä—É."""
        if not self.preview_spore:
            self._create_preview_spore()
        else:
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–ø–æ—Ä—ã
            self.preview_spore.real_position = Vec3(
                self.preview_position_2d[0], 
                0.0, 
                self.preview_position_2d[1]
            )
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ zoom manager
            self.preview_spore.apply_transform(
                self.zoom_manager.a_transformation,
                self.zoom_manager.b_translation,
                spores_scale=self.zoom_manager.spores_scale
            )
    
    def _create_preview_spore(self) -> None:
        """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –ø—Ä–µ–≤—å—é —Å–ø–æ—Ä—É."""
        try:
            goal_position = self.config.get('spore', {}).get('goal_position', [0, 0])
            spore_config = self.config.get('spore', {})
            pendulum_config = self.config.get('pendulum', {})
            
            self.preview_spore = Spore(
                pendulum=self.pendulum,
                dt=pendulum_config.get('dt', 0.1),
                goal_position=goal_position,
                scale=spore_config.get('scale', 0.1),
                position=(self.preview_position_2d[0], 0.0, self.preview_position_2d[1]),
                color_manager=self.color_manager,
                is_ghost=True  # –î–µ–ª–∞–µ–º —Å–ø–æ—Ä—É-–ø—Ä–∏–∑—Ä–∞–∫
            )
            
            base_color = self.color_manager.get_color('spore', 'default')
            
            # –°–ø–æ—Å–æ–± 1: –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã r, g, b
            try:
                self.preview_spore.color = (base_color.r, base_color.g, base_color.b, self.preview_alpha)
            except AttributeError:
                # –°–ø–æ—Å–æ–± 2: –ï—Å–ª–∏ —ç—Ç–æ Vec4 –∏–ª–∏ tuple
                try:
                    self.preview_spore.color = (base_color[0], base_color[1], base_color[2], self.preview_alpha)
                except (TypeError, IndexError):
                    # –°–ø–æ—Å–æ–± 3: Fallback –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ü–≤–µ—Ç
                    self.preview_spore.color = (0.6, 0.4, 0.9, self.preview_alpha)  # –§–∏–æ–ª–µ—Ç–æ–≤—ã–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                    print(f"   ‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω fallback —Ü–≤–µ—Ç –¥–ª—è preview spore")
            
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤ zoom manager
            self.zoom_manager.register_object(self.preview_spore, name='manual_preview')
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–≤—å—é —Å–ø–æ—Ä—ã: {e}")
    
    def _update_predictions(self) -> None:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –ø—Ä–∏ min/max —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏."""
        if not self.preview_spore:
            return
            
        try:
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
            self._clear_predictions()
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –¥–ª—è min –∏ max —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è


            prediction_configs = [
                {'control': self.min_control, 'name': 'min', 'color': 'ghost_min'},  # üîµ –ì–æ–ª—É–±–æ–π
                {'control': self.max_control, 'name': 'max', 'color': 'ghost_max'}   # üî¥ –ö—Ä–∞—Å–Ω—ã–π
            ]
            
            for i, config in enumerate(prediction_configs):
                # –í—ã—á–∏—Å–ª—è–µ–º –±—É–¥—É—â—É—é –ø–æ–∑–∏—Ü–∏—é
                future_pos_2d = self.pendulum.scipy_rk45_step(
                    self.preview_position_2d, 
                    config['control'], 
                    self.config.get('pendulum', {}).get('dt', 0.1)
                )
                
                # –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
                prediction_viz = PredictionVisualizer(
                    parent_spore=self.preview_spore,
                    color_manager=self.color_manager,
                    zoom_manager=self.zoom_manager,
                    cost_function=None,  # –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º cost –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
                    config={'spore': {'show_ghosts': True}, 'angel': {'show_angels': False, 'show_pillars': False}},
                    spore_id=f'manual_prediction_{config["name"]}'
                )
                
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—ã—á–Ω—ã–π —Ü–≤–µ—Ç –¥–ª—è –ø—Ä–∏–∑—Ä–∞–∫–∞ (–∫–∞–∫ —É —Ä–µ–∞–ª—å–Ω—ã—Ö —Å–ø–æ—Ä)
                if prediction_viz.ghost_spore:
                    prediction_viz.ghost_spore.color = self.color_manager.get_color('spore', config['color'])
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
                prediction_viz.update(future_pos_2d)
                
                # –°–æ–∑–¥–∞–µ–º –ª–∏–Ω–∫ –æ—Ç –ø—Ä–µ–≤—å—é —Å–ø–æ—Ä—ã –∫ –ø—Ä–∏–∑—Ä–∞–∫—É —Å –æ–±—ã—á–Ω—ã–º —Ü–≤–µ—Ç–æ–º
                if prediction_viz.ghost_spore:
                    prediction_link = Link(
                        parent_spore=self.preview_spore,
                        child_spore=prediction_viz.ghost_spore,
                        color_manager=self.color_manager,
                        zoom_manager=self.zoom_manager,
                        config=self.config
                    )
                    
                    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—ã—á–Ω—ã–π —Ü–≤–µ—Ç –¥–ª—è –ª–∏–Ω–∫–∞ (–∫–∞–∫ —É —Ä–µ–∞–ª—å–Ω—ã—Ö)
                    link_color = 'ghost_min' if config['name'] == 'min' else 'ghost_max'
                    prediction_link.color = self.color_manager.get_color('link', link_color)
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –≥–µ–æ–º–µ—Ç—Ä–∏—é –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤ zoom manager
                    prediction_link.update_geometry()
                    self.zoom_manager.register_object(prediction_link, f'manual_prediction_link_{config["name"]}')
                    
                    self.prediction_links.append(prediction_link)
                
                self.prediction_visualizers.append(prediction_viz)
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π: {e}")
    
    def _clear_predictions(self) -> None:
        """–û—á–∏—â–∞–µ—Ç –≤—Å–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –∏ –∏—Ö –ª–∏–Ω–∫–∏."""
        # –û—á–∏—â–∞–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä—ã –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
        for viz in self.prediction_visualizers:
            viz.destroy()
        self.prediction_visualizers.clear()
        
        # –û—á–∏—â–∞–µ–º –ª–∏–Ω–∫–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
        for i, link in enumerate(self.prediction_links):
            link_name = f'manual_prediction_link_{["min", "max"][i] if i < 2 else i}'
            try:
                self.zoom_manager.unregister_object(link_name)
            except:
                pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –µ—Å–ª–∏ –æ–±—ä–µ–∫—Ç —É–∂–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
            destroy(link)
        self.prediction_links.clear()
    
    def create_spore_at_cursor(self) -> Optional[List[Spore]]:
        """
        –°–æ–∑–¥–∞–µ—Ç —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é —Å–ø–æ—Ä—É –≤ –ø–æ–∑–∏—Ü–∏–∏ –∫—É—Ä—Å–æ—Ä–∞ + 2 –¥–æ—á–µ—Ä–Ω–∏–µ —Å–ø–æ—Ä—ã (min –∏ max control).
        
        Returns:
            –°–ø–∏—Å–æ–∫ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Å–ø–æ—Ä [parent, min_child, max_child] –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        if not self.preview_enabled or not self.preview_spore:
            return None
            
        try:
            goal_position = self.config.get('spore', {}).get('goal_position', [0, 0])
            spore_config = self.config.get('spore', {})
            pendulum_config = self.config.get('pendulum', {})
            dt = pendulum_config.get('dt', 0.1)
            
            created_spores = []
            
            # 1. –°–æ–∑–¥–∞–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é —Å–ø–æ—Ä—É –≤ –ø–æ–∑–∏—Ü–∏–∏ –∫—É—Ä—Å–æ—Ä–∞

            parent_id = self._get_next_spore_id()

            parent_spore = Spore(
                pendulum=self.pendulum,
                dt=dt,
                goal_position=goal_position,
                scale=spore_config.get('scale', 0.1),
                position=(self.preview_position_2d[0], 0.0, self.preview_position_2d[1]),
                color_manager=self.color_manager,
                config=spore_config
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—è –≤ —Å–∏—Å—Ç–µ–º—É –ë–ï–ó –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–∏–∑—Ä–∞–∫–æ–≤
            self.spore_manager.add_spore_manual(parent_spore)
            self.zoom_manager.register_object(parent_spore, f'manual_parent_{parent_id}')
            created_spores.append(parent_spore)
            print(f"   ‚úì –°–æ–∑–¥–∞–Ω–∞ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è —Å–ø–æ—Ä–∞ –≤ –ø–æ–∑–∏—Ü–∏–∏ ({self.preview_position_2d[0]:.3f}, {self.preview_position_2d[1]:.3f})")
            
            # 2. –°–æ–∑–¥–∞–µ–º –¥–æ—á–µ—Ä–Ω–∏–µ —Å–ø–æ—Ä—ã –≤ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏—è—Ö
            child_configs = [
                {'control': self.min_control, 'name': 'min'},
                {'control': self.max_control, 'name': 'max'}
            ]
            
            created_links = []
            
            for config in child_configs:
                child_id = self._get_next_spore_id()

                # –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –¥–æ—á–µ—Ä–Ω–µ–π —Å–ø–æ—Ä—ã
                child_pos_2d = self.pendulum.scipy_rk45_step(
                    self.preview_position_2d, 
                    config['control'], 
                    dt
                )
                
                # –°–æ–∑–¥–∞–µ–º –¥–æ—á–µ—Ä–Ω—é—é —Å–ø–æ—Ä—É
                child_spore = Spore(
                    pendulum=self.pendulum,
                    dt=dt,
                    goal_position=goal_position,
                    scale=spore_config.get('scale', 0.1),
                    position=(child_pos_2d[0], 0.0, child_pos_2d[1]),
                    color_manager=self.color_manager,
                    config=spore_config
                )
                
                # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ—á–µ—Ä–Ω—é—é —Å–ø–æ—Ä—É –≤ —Å–∏—Å—Ç–µ–º—É –ë–ï–ó –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–∏–∑—Ä–∞–∫–æ–≤
                self.spore_manager.add_spore_manual(child_spore)
                self.zoom_manager.register_object(child_spore, f'manual_child_{child_id}_{config["name"]}')
                
                # –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                child_spore.logic.optimal_control = np.array([config['control']])
                
                created_spores.append(child_spore)
                print(f"   ‚úì –°–æ–∑–¥–∞–Ω–∞ –¥–æ—á–µ—Ä–Ω—è—è —Å–ø–æ—Ä–∞ ({config['name']}) –≤ –ø–æ–∑–∏—Ü–∏–∏ ({child_pos_2d[0]:.3f}, {child_pos_2d[1]:.3f}) —Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º {config['control']:.2f}")
                
                # 3. –°–æ–∑–¥–∞–µ–º –ª–∏–Ω–∫ –æ—Ç —Ä–æ–¥–∏—Ç–µ–ª—è –∫ —Ä–µ–±—ë–Ω–∫—É

                link_id = self._get_next_link_id()
                unique_link_name = f'manual_link_{link_id}_{config["name"]}'

                child_link = Link(
                    parent_spore=parent_spore,
                    child_spore=child_spore,
                    color_manager=self.color_manager,
                    zoom_manager=self.zoom_manager,
                    config=self.config
                )
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –≥–µ–æ–º–µ—Ç—Ä–∏—é –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ª–∏–Ω–∫
                child_link.update_geometry()
                self.zoom_manager.register_object(child_link, unique_link_name)
                
                created_links.append(child_link)
                self.created_links.append(child_link)

                print(f"   ‚úì –°–æ–∑–¥–∞–Ω –ª–∏–Ω–∫: —Ä–æ–¥–∏—Ç–µ–ª—å ‚Üí {config['name']} —Ä–µ–±—ë–Ω–æ–∫")
            
            print(f"   üéØ –ò—Ç–æ–≥–æ —Å–æ–∑–¥–∞–Ω–æ: 1 —Ä–æ–¥–∏—Ç–µ–ª—å + 2 —Ä–µ–±—ë–Ω–∫–∞ + 2 –ª–∏–Ω–∫–∞")
            self.zoom_manager.update_transform()

            print(f"   üìä –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è:")
            print(f"      üßÆ –í—Å–µ–≥–æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Å–ø–æ—Ä: {self._spore_counter}")
            print(f"      üîó –í—Å–µ–≥–æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ª–∏–Ω–∫–æ–≤: {self._link_counter}")
            print(f"      üìã –û–±—ä–µ–∫—Ç–æ–≤ –≤ ZoomManager: {len(self.zoom_manager.objects)}")
            
            # –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –ª–∏–Ω–∫–∏ –≤ ZoomManager
            link_count = 0
            for name, obj in self.zoom_manager.objects.items():
                if 'link' in name.lower():
                    link_count += 1
            print(f"      üîç –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ª–∏–Ω–∫–æ–≤: {link_count}")

            return created_spores
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–ø–æ—Ä: {e}")
            return None
    
    def _destroy_preview(self) -> None:
        """–£–Ω–∏—á—Ç–æ–∂–∞–µ—Ç –ø—Ä–µ–≤—å—é —Å–ø–æ—Ä—É, –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –∏ –∏—Ö –ª–∏–Ω–∫–∏."""
        if self.preview_spore:
            self.zoom_manager.unregister_object('manual_preview')
            destroy(self.preview_spore)
            self.preview_spore = None
            
        self._clear_predictions()  # –≠—Ç–æ –æ—á–∏—Å—Ç–∏—Ç –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä—ã, –∏ –ª–∏–Ω–∫–∏
    
    def destroy(self) -> None:
        """–û—á–∏—â–∞–µ—Ç –≤—Å–µ —Ä–µ—Å—É—Ä—Å—ã –º–µ–Ω–µ–¥–∂–µ—Ä–∞."""
        self._destroy_preview()
        print("   ‚úì Manual Spore Manager —É–Ω–∏—á—Ç–æ–∂–µ–Ω") 

    def clear_all(self) -> None:
        """–û—á–∏—â–∞–µ—Ç –≤—Å–µ —Ä–µ—Å—É—Ä—Å—ã —Å–æ–∑–¥–∞–Ω–Ω—ã–µ ManualSporeManager."""
        print("üßπ ManualSporeManager: –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —Ä–µ—Å—É—Ä—Å–æ–≤...")
        
        # üÜï –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ —É–¥–∞–ª–µ–Ω–∏—è
        print(f"   üìä –õ–∏–Ω–∫–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: {len(self.created_links)}")
        
        # 1. –£–Ω–∏—á—Ç–æ–∂–∞–µ–º –≤—Å–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –ª–∏–Ω–∫–∏
        for i, link in enumerate(self.created_links):
            try:
                # üÜï –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ª–∏–Ω–∫–∞
                print(f"   üîç –õ–∏–Ω–∫ {i+1}: enabled={getattr(link, 'enabled', 'N/A')}, visible={getattr(link, 'visible', 'N/A')}")
                print(f"            parent={getattr(link, 'parent', 'N/A')}, model={getattr(link, 'model', 'N/A')}")
                
                # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã —É–¥–∞–ª–µ–Ω–∏—è
                link.enabled = False  # –û—Ç–∫–ª—é—á–∞–µ–º
                link.visible = False  # –°–∫—Ä—ã–≤–∞–µ–º
                link.parent = None    # –û—Ç–≤—è–∑—ã–≤–∞–µ–º –æ—Ç —Ä–æ–¥–∏—Ç–µ–ª—è
                
                destroy(link)  # –£–Ω–∏—á—Ç–æ–∂–∞–µ–º
                print(f"   ‚úÖ –õ–∏–Ω–∫ {i+1} –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
                
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å –ª–∏–Ω–∫–æ–º {i+1}: {e}")
        
        # üÜï –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ Ursina
        try:
            from ursina import scene, camera
            all_entities = [e for e in scene.entities if hasattr(e, 'model') and e.model]
            arrow_entities = [e for e in all_entities if 'arrow' in str(e.model).lower()]
            print(f"   üìä –í—Å–µ–≥–æ entities –≤ —Å—Ü–µ–Ω–µ: {len(scene.entities)}")
            print(f"   üèπ Entities —Å–æ —Å—Ç—Ä–µ–ª–∫–∞–º–∏: {len(arrow_entities)}")
        except Exception as e:
            print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Å—Ü–µ–Ω—ã: {e}")
        
        self.created_links.clear()

    def destroy(self) -> None:
        """–û—á–∏—â–∞–µ—Ç –≤—Å–µ —Ä–µ—Å—É—Ä—Å—ã –º–µ–Ω–µ–¥–∂–µ—Ä–∞."""
        self.clear_all()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥
        print("   ‚úì Manual Spore Manager —É–Ω–∏—á—Ç–æ–∂–µ–Ω")