from ursina import held_keys, mouse
import time
from typing import Optional

# –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Å–æ–≤ –¥–ª—è –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π —Ç–∏–ø–æ–≤
# –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
from ..visual.scene_setup import SceneSetup
from ..managers.zoom_manager import ZoomManager
from ..managers.spore_manager import SporeManager
from ..managers.spawn_area_manager import SpawnAreaManager
from ..managers.param_manager import ParamManager
from ..visual.ui_setup import UI_setup

# Forward declaration –¥–ª—è ManualSporeManager
from typing import TYPE_CHECKING
if TYPE_CHECKING:
    from ..managers.manual_spore_manager import ManualSporeManager
    
from ..utils.debug_output import always_print


class InputManager:
    """
    –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞.
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–µ–Ω–µ–¥–∂–µ—Ä—ã –∏ –æ–±—ä–µ–∫—Ç—ã —Å—Ü–µ–Ω—ã,
    –∏ –¥–µ–ª–µ–≥–∏—Ä—É–µ—Ç –∏–º –∫–æ–º–∞–Ω–¥—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–∂–∞—Ç–æ–π –∫–ª–∞–≤–∏—à–∏.
    """
    def __init__(self, 
                 scene_setup: Optional[SceneSetup] = None, 
                 zoom_manager: Optional[ZoomManager] = None, 
                 spore_manager: Optional[SporeManager] = None, 
                 spawn_area_manager: Optional[SpawnAreaManager] = None, 
                 param_manager: Optional[ParamManager] = None, 
                 ui_setup: Optional[UI_setup] = None,
                 angel_manager: Optional['AngelManager'] = None,
                 cost_visualizer: Optional['CostVisualizer'] = None,
                 manual_spore_manager: Optional["ManualSporeManager"] = None):
        
        self.scene_setup: Optional[SceneSetup] = scene_setup
        self.zoom_manager: Optional[ZoomManager] = zoom_manager
        self.spore_manager: Optional[SporeManager] = spore_manager
        self.spawn_area_manager: Optional[SpawnAreaManager] = spawn_area_manager
        self.param_manager: Optional[ParamManager] = param_manager
        self.ui_setup: Optional[UI_setup] = ui_setup
        self.angel_manager: Optional['AngelManager'] = angel_manager
        self.cost_visualizer: Optional['CostVisualizer'] = cost_visualizer
        self.manual_spore_manager: Optional["ManualSporeManager"] = manual_spore_manager

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ø–æ—Ä –ø–æ –∫–ª–∞–≤–∏—à–µ 'f'
        self.f_key_down_time: float = 0
        self.long_press_threshold: float = 0.4
        self.spawn_interval: float = 0.1
        self.next_spawn_time: float = 0  # –í—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–ø–∞–≤–Ω–∞
        
        # v13_manual: –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∫–ª–∏–∫–æ–≤ –º—ã—à–∏
        self.previous_mouse_left = False

    def update(self) -> None:
        """
        –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –¥–æ–ª–∂–µ–Ω –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –∫–∞–∂–¥—ã–π –∫–∞–¥—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –≤–≤–æ–¥–∞.
        """
        # v13_manual: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–æ–≤ –º—ã—à–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–ø–æ—Ä
        if self.manual_spore_manager:
            current_mouse_left = mouse.left
            # –û–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –õ–ö–ú (–ø–µ—Ä–µ—Ö–æ–¥ —Å False –Ω–∞ True)
            if current_mouse_left and not self.previous_mouse_left:
                created_spores = self.manual_spore_manager.create_spore_at_cursor()
                if created_spores:
                    print(f"   üñ±Ô∏è –õ–ö–ú: –°–æ–∑–¥–∞–Ω–æ {len(created_spores)} —Å–ø–æ—Ä (1 —Ä–æ–¥–∏—Ç–µ–ª—å + 2 —Ä–µ–±—ë–Ω–∫–∞ + 2 –ª–∏–Ω–∫–∞)")
            self.previous_mouse_left = current_mouse_left
        
        # –õ–æ–≥–∏–∫–∞ –¥–ª—è –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ø–æ—Ä –ø—Ä–∏ —É–¥–µ—Ä–∂–∞–Ω–∏–∏ 'f'
        if held_keys['f']:
            if self.f_key_down_time > 0:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞–∂–∞—Ç–∏–µ –±—ã–ª–æ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ
                now = time.time()
                if now >= self.next_spawn_time:
                    if self.spore_manager:
                        self.spore_manager.generate_new_spore()
                    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
                    self.next_spawn_time = now + self.spawn_interval
        else:
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –µ—Å–ª–∏ –∫–ª–∞–≤–∏—à–∞ –Ω–µ –Ω–∞–∂–∞—Ç–∞
            self.f_key_down_time = 0

    def handle_input(self, key: str) -> None:
        """
        –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫. –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
        """
        # –û—Ç–ª–∞–¥–∫–∞: –≤—ã–≤–æ–¥–∏–º –ø–æ–ª—É—á–µ–Ω–Ω—É—é –∫–ª–∞–≤–∏—à—É –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫—É—Ä—Å–æ—Ä–∞
        # print(f"[InputManager] handle_input called with key: '{key}'. Cursor locked: {self.scene_setup.cursor_locked if self.scene_setup else 'N/A'}")

        # –ë–∞–∑–æ–≤–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (–≤—ã—Ö–æ–¥) –±—ã–ª–æ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –Ω–∞ –≥–ª–æ–±–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å
        # –≤ main_demo.py, —á—Ç–æ–±—ã —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –∑–∞–º–æ—Ä–æ–∑–∫–∏ –≤–≤–æ–¥–∞.
        # if key == 'q' or key == 'escape':
        #     application.quit()
        #     return

        # –û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã —Ä–∞–±–æ—Ç–∞—é—Ç —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –∫—É—Ä—Å–æ—Ä —Å–≤–æ–±–æ–¥–µ–Ω
        # if self.scene_setup and self.scene_setup.cursor_locked:
        #     # –û—Ç–ª–∞–¥–∫–∞: –≤—ã–≤–æ–¥–∏–º, –ø–æ—á–µ–º—É –º—ã –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
        #     print(f"[InputManager] Aborting: Cursor is locked.")
        #     return
        
        # –≠—Ç–æ—Ç –ø—Ä–∏–Ω—Ç –±—ã–ª –≤ —Ñ–∞–π–ª–µ, –Ω–æ —è –µ–≥–æ –æ—Å—Ç–∞–≤–ª—é –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –æ—Ç–ª–∞–¥–∫–∏
        # print(f"[InputManager] Passed lock check. Processing key '{key}'...")
        # # 1. UI –∫–æ–º–∞–Ω–¥—ã (—Å–∞–º—ã–π –≤—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
        # if self.ui_setup:
        #     # –û—Ç–ª–∞–¥–∫–∞: —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ UI?
        #     print(f"[InputManager] Calling ui_setup.handle_demo_commands('{key}')...")
        #     processed = self.ui_setup.handle_demo_commands(key)
        #     print(f"[InputManager] ...ui_setup.handle_demo_commands returned: {processed}")
        #     # handle_demo_commands –≤–µ—Ä–Ω–µ—Ç True, –µ—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –±—ã–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞
        #     if processed:
        #         return

        # 2. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ø–æ—Ä–∞–º–∏
        if key == 'f':
            if self.spore_manager:
                self.spore_manager.generate_new_spore()
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä—ã –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–π –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            now = time.time()
            self.f_key_down_time = now
            self.next_spawn_time = now + self.long_press_threshold
            return
        
        if key == 'g':
            if self.spore_manager:
                self.spore_manager.activate_random_candidate()
            return
        
        if key == 'v':
            if self.spore_manager:
                self.spore_manager.evolve_all_candidates_to_completion()
            return
        
        if key == 'u':
            if self.scene_setup and hasattr(self.scene_setup, 'frame'):
                self.scene_setup.frame.toggle_visibility()
            return
            
        # 3. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        if self.zoom_manager:
            if key == 'e' or key == 'scroll up':  # E –∏–ª–∏ –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫–æ–ª—ë—Å–∏–∫–∞ –≤–≤–µ—Ä—Ö
                self.zoom_manager.zoom_in()
            elif key == 't' or key == 'scroll down':  # T –∏–ª–∏ –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫–æ–ª—ë—Å–∏–∫–∞ –≤–Ω–∏–∑
                self.zoom_manager.zoom_out()
            elif key == 'r': 
                self.zoom_manager.reset_zoom()
            elif key == '1': 
                self.zoom_manager.increase_spores_scale()
            elif key == '2': 
                self.zoom_manager.decrease_spores_scale()
        
        # 4. –û—á–∏—Å—Ç–∫–∞ –æ–±—ä–µ–∫—Ç–æ–≤ (v13_manual)
        if key == 'c' and self.spore_manager:
            print("üßπ –ö–ª–∞–≤–∏—à–∞ C: –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —Å–ø–æ—Ä –∏ –æ–±—ä–µ–∫—Ç–æ–≤")
            
            # üÜï –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ manual_spore_manager
            if self.manual_spore_manager:
                print(f"   üîç ManualSporeManager –Ω–∞–π–¥–µ–Ω: {type(self.manual_spore_manager)}")
                if hasattr(self.manual_spore_manager, 'clear_all'):
                    print(f"   üîç –ú–µ—Ç–æ–¥ clear_all –Ω–∞–π–¥–µ–Ω")
                    print(f"   üìä created_links –¥–æ –æ—á–∏—Å—Ç–∫–∏: {len(self.manual_spore_manager.created_links)}")
                    self.manual_spore_manager.clear_all()  
                else:
                    print(f"   ‚ùå –ú–µ—Ç–æ–¥ clear_all –ù–ï –Ω–∞–π–¥–µ–Ω!")
            else:
                print(f"   ‚ùå ManualSporeManager –ù–ï –Ω–∞–π–¥–µ–Ω!")
            
            self.spore_manager.clear_all_manual()
            
        # 5. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º
        if self.param_manager:
            if key == 'z': 
                self.param_manager.increase()
            elif key == 'x': 
                self.param_manager.decrease()

        # 5. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±–ª–∞—Å—Ç—å—é —Å–ø–∞–≤–Ω–∞
        if self.spawn_area_manager:
            if key == '3' or key == 'arrow_up': 
                self.spawn_area_manager.decrease_eccentricity()
            elif key == '4' or key == 'arrow_down': 
                self.spawn_area_manager.increase_eccentricity()
        
        # 6. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–¥–∏—É—Å–æ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
        if self.spore_manager:
            if key == '5':
                self.spore_manager.adjust_min_radius(1/1.2)  # –£–º–µ–Ω—å—à–∏—Ç—å —Ä–∞–¥–∏—É—Å (√∑1.2)
            elif key == '6':
                self.spore_manager.adjust_min_radius(1.2)    # –£–≤–µ–ª–∏—á–∏—Ç—å —Ä–∞–¥–∏—É—Å (√ó1.2)
        
        # 7. –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∞–Ω–≥–µ–ª–æ–≤
        if key == 'y':
            if self.angel_manager:
                self.angel_manager.toggle_angels()
            else:
                always_print("‚ö†Ô∏è Angel Manager –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # # 8. –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
        # if key == 'c':
        #     if self.cost_visualizer:
        #         self.cost_visualizer.toggle()
        #     else:
        #         always_print("‚ö†Ô∏è Cost Visualizer –Ω–µ –Ω–∞–π–¥–µ–Ω")

    # def handle_input(self, key):
    #     """
    #     –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –∫–ª–∞–≤–∏—à. 
    #     –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ `input()` Ursina.
    #     """
    #     # --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º ---
    #     if key == 'q':
    #         application.quit()

    #     # --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏–º—É–ª—è—Ü–∏–µ–π ---
    #     if key == '8':  # –ö–ª–∞–≤–∏—à–∞ –¥–ª—è —Å–ø–∞–≤–Ω–∞ –Ω–æ–≤–æ–π —Å–ø–æ—Ä—ã
    #         self.engine.spawn_spore()

    #     # --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç—å—é ---
    #     if key == '5':  # –ö–ª–∞–≤–∏—à–∞ –¥–ª—è –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
    #         self.is_cost_surface_visible = not self.is_cost_surface_visible
    #         self.visual_manager.toggle_cost_surface(self.is_cost_surface_visible)
        
    #     if key == '6':  # –ö–ª–∞–≤–∏—à–∞ –¥–ª—è –æ–±–ª–∞—Å—Ç–∏ —Å–ø–∞–≤–Ω–∞
    #         self.is_spawn_area_visible = not self.is_spawn_area_visible
    #         self.visual_manager.toggle_spawn_area(self.is_spawn_area_visible)
            
    #     if key == '7':  # –ö–ª–∞–≤–∏—à–∞ –¥–ª—è "–ø—Ä–∏–∑—Ä–∞–∫–æ–≤"
    #         self.is_ghosts_visible = not self.is_ghosts_visible
    #         self.visual_manager.toggle_ghosts(self.is_ghosts_visible) 