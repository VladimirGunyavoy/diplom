"""
–î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø UI_SETUP
====================

–≠—Ç–æ—Ç —Ñ–∞–π–ª –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞ UI_setup –¥–ª—è —É–¥–æ–±–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ UI:
- –í—Å—è –ª–æ–≥–∏–∫–∞ UI –∏–Ω–∫–∞–ø—Å—É–ª–∏—Ä–æ–≤–∞–Ω–∞ –≤ –æ–¥–Ω–æ–º –∫–ª–∞—Å—Å–µ
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
- –ì–æ—Ç–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥
- –ü—Ä–æ—Å—Ç–æ–π –∏–º–ø–æ—Ä—Ç –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–¥–Ω–æ–π –∫–æ–º–∞–Ω–¥–æ–π
- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å UI Manager –∏ Color Manager

–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:
‚úÖ –ú–∏–Ω–∏–º—É–º –∫–æ–¥–∞ –≤ –¥–µ–º–æ —Å–∫—Ä–∏–ø—Ç–∞—Ö
‚úÖ –ì–æ—Ç–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ç–∏–ø–∏—á–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ–º–∏ UI —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
‚úÖ –õ–µ–≥–∫–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏
‚úÖ –ö–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤–æ –≤—Å–µ—Ö –¥–µ–º–æ
"""

import sys
import os
from ursina import *
import numpy as np
import time
from colorsys import hsv_to_rgb
from matplotlib.colors import LinearSegmentedColormap
import matplotlib.pyplot as plt
import json
import collections.abc

# --- –ü–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –≥–ª—É–±–æ–∫–æ–≥–æ —Å–ª–∏—è–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–æ–≤ ---
def deep_merge(d, u):
    """–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç —Å–ª–æ–≤–∞—Ä–∏."""
    for k, v in u.items():
        if isinstance(v, collections.abc.Mapping):
            d[k] = deep_merge(d.get(k, {}), v)
        else:
            d[k] = v
    return d

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—É—Ç–µ–π –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ ---
# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞ 'spores/9', —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –¥–µ–ª–∞—Ç—å –∏–º–ø–æ—Ä—Ç—ã –æ—Ç 'src'
script_dir = os.path.dirname(os.path.abspath(__file__))
# –ü–æ–¥–Ω–∏–º–∞–µ–º—Å—è –æ—Ç spores/9/scripts/run –¥–æ spores/9
project_root = os.path.abspath(os.path.join(script_dir, '..', '..'))
if project_root not in sys.path:
    sys.path.append(project_root)

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ---
# –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥
with open(os.path.join(project_root, 'config', 'json', 'config.json'), 'r') as f:
    config = json.load(f)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥ —Å —Ä–∞–∑–º–µ—Ä–∞–º–∏ –∏ –æ–±—ä–µ–¥–∏–Ω—è–µ–º
with open(os.path.join(project_root, 'config', 'json', 'sizes.json'), 'r') as f:
    sizes_config = json.load(f)
    config = deep_merge(config, sizes_config)

# ColorManager –∑–∞–≥—Ä—É–∂–∞–µ—Ç —Å–≤–æ–π –∫–æ–Ω—Ñ–∏–≥ 'colors.json' —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ

# --- –û—Å–Ω–æ–≤–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã –∏–∑ –Ω–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ ---
from src.visual.spawn_area_visualizer import SpawnAreaVisualizer
from src.logic.spawn_area import SpawnArea as SpawnAreaLogic
from src.logic.cost_function import CostFunction
from src.visual.cost_visualizer import CostVisualizer
from src.managers.color_manager import ColorManager
from src.visual.scene_setup import SceneSetup
from src.visual.frame import Frame
from src.managers.zoom_manager import ZoomManager
from src.utils.scalable import Scalable, ScalableFrame, ScalableFloor
from src.logic.pendulum import PendulumSystem
from src.managers.window_manager import WindowManager
from src.core.spore import Spore
from src.managers.spore_manager import SporeManager
from src.managers.param_manager import ParamManager
from src.visual.ui_setup import UI_setup
from src.managers.angel_manager import AngelManager
from src.managers.input_manager import InputManager
from src.managers.update_manager import UpdateManager
from src.managers.spawn_area_manager import SpawnAreaManager

print("=== –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø UI_SETUP ===")
print("üé® –ì–æ—Ç–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ UI –¥–ª—è –¥–µ–º–æ —Å–∫—Ä–∏–ø—Ç–æ–≤")
print("üì¶ –ò–Ω–∫–∞–ø—Å—É–ª—è—Ü–∏—è –≤—Å–µ–π –ª–æ–≥–∏–∫–∏ –≤ –æ–¥–Ω–æ–º –∫–ª–∞—Å—Å–µ")
print("üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏")
print("=" * 40)

# ===== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø =====
app = Ursina()

# ===== –°–û–ó–î–ê–ù–ò–ï –ú–ï–ù–ï–î–ñ–ï–†–û–í =====
color_manager = ColorManager()

# ===== –°–û–ó–î–ê–ù–ò–ï –°–¶–ï–ù–´ –ò –î–†–£–ì–ò–• –°–ò–°–¢–ï–ú =====
scene_config = config['scene_setup']
scene_setup = SceneSetup(
    init_position=scene_config['init_position'], 
    init_rotation_x=scene_config['init_rotation_x'], 
    init_rotation_y=scene_config['init_rotation_y'], 
    color_manager=color_manager
)
frame = Frame(color_manager=color_manager)
scene_setup.frame = frame
window_manager = WindowManager(color_manager=color_manager)

print("\nüåç 2. –°—Ü–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∞")

# ===== –°–û–ó–î–ê–ù–ò–ï ZOOM MANAGER =====
zoom_manager = ZoomManager(scene_setup, color_manager=color_manager)
angel_manager = AngelManager(color_manager=color_manager, zoom_manager=zoom_manager, config=config)

print("   ‚úì Zoom Manager —Å–æ–∑–¥–∞–Ω")

# –†–ï–ì–ò–°–¢–†–ò–†–£–ï–ú FRAME –í ZOOM MANAGER
zoom_manager.register_object(frame, name='frame')

# --- –°–û–ó–î–ê–ù–ò–ï –ú–ê–°–®–¢–ê–ë–ò–†–£–ï–ú–û–ì–û –ü–û–õ–ê ---
floor = ScalableFloor(
    model='quad',
    scale=config['scene']['floor_scale'],
    rotation_x=90,
    color=color_manager.get_color('scene', 'floor'),
    texture='white_cube',
    texture_scale=(40, 40)
)
zoom_manager.register_object(floor, name='floor')
# ------------------------------------

# ===== –°–û–ó–î–ê–ù–ò–ï PARAM MANAGER =====
settings_param = ParamManager(0, show=False, color_manager=color_manager)

print("   ‚úì Param Manager —Å–æ–∑–¥–∞–Ω")

# ===== –°–û–ó–î–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´ –ú–ê–Ø–¢–ù–ò–ö–ê –ò –ú–ï–ù–ï–î–ñ–ï–†–ê –°–ü–û–† =====
pendulum_config = config['pendulum']
pendulum = PendulumSystem(
    damping=pendulum_config['damping']
)
spore_manager = SporeManager(
    pendulum=pendulum, 
    zoom_manager=zoom_manager, 
    settings_param=settings_param, 
    color_manager=color_manager,
    angel_manager=angel_manager,
    config=config
)

# ===== –°–û–ó–î–ê–ù–ò–ï –¢–ï–°–¢–û–í–´–• –°–ü–û–† =====
print("\nüåü 4. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–ø–æ—Ä...")

goal_position = config['spore']['goal_position']
goal = Spore(
    pendulum=pendulum,
    dt=pendulum_config['dt'],
    scale=config['spore']['scale'],
    position=(goal_position[0], 0, goal_position[1]),
    goal_position=goal_position,
    is_goal=True,
    color_manager=color_manager
)

spore_config = config['spore']
spore = Spore(
    pendulum=pendulum,
    dt=pendulum_config['dt'],
    goal_position=goal_position,
    scale=config['spore']['scale'],
    link_thickness=spore_config.get('link_thickness', 1),
    position=spore_config['initial_position'],
    color_manager=color_manager,
    config=spore_config
)

# ===== –°–û–ó–î–ê–ù–ò–ï –û–ö–†–£–ñ–ï–ù–ò–Ø (SPAWN AREA –ò COST SURFACE) =====
spawn_area_config = config['spawn_area']

# –°–æ–∑–¥–∞–µ–º –ª–æ–≥–∏–∫—É –æ–±–ª–∞—Å—Ç–∏ —Å–ø–∞–≤–Ω–∞
spawn_area_logic = SpawnAreaLogic(
    focus1=spore.logic.position_2d,
    focus2=goal.logic.position_2d,
    eccentricity=spawn_area_config['eccentricity']
)

# –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é –æ–±–ª–∞—Å—Ç–∏ —Å–ø–∞–≤–Ω–∞
spawn_area_visualizer = SpawnAreaVisualizer(
    spawn_area=spawn_area_logic,
    resolution=spawn_area_config['resolution'],
    color=color_manager.get_color('spawn_area', 'default')
)

# --- –ü–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç–∏ (Cost) ---
# –°–æ–∑–¥–∞–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π Entity –¥–ª—è –≤—Å–µ–π –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
cost_surface_parent = Scalable()

# –°–æ–∑–¥–∞–µ–º –ª–æ–≥–∏–∫—É
cost_logic = CostFunction(
    goal_position_2d=np.array([goal.position[0], goal.position[2]]),
)
# –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é
cost_surface = CostVisualizer(
    cost_function=cost_logic,
    spawn_area=spawn_area_logic, # <-- –ü–µ—Ä–µ–¥–∞–µ–º –ª–æ–≥–∏—á–µ—Å–∫–∏–π –æ–±—ä–µ–∫—Ç
    parent_entity=cost_surface_parent, # <--- –£–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤–æ–≥–æ —Ä–æ–¥–∏—Ç–µ–ª—è
    color_manager=color_manager,
    config=config['cost_surface']
)
angel_manager.cost_function = cost_logic # <-- –ü–µ—Ä–µ–¥–∞–µ–º –ª–æ–≥–∏—á–µ—Å–∫–∏–π –æ–±—ä–µ–∫—Ç

# ===== –ù–ê–°–¢–†–û–ô–ö–ê UI –ß–ï–†–ï–ó UI_SETUP –° –ö–û–õ–ë–≠–ö–ê–ú–ò =====
print("\nüìä 3. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª–Ω–æ–≥–æ UI —á–µ—Ä–µ–∑ UI_setup —Å –∫–æ–ª–±—ç–∫–∞–º–∏...")

# --- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø UI_SETUP ---
ui_setup = UI_setup(color_manager=color_manager)

# ===== –°–û–ó–î–ê–ù–ò–ï SPAWN AREA MANAGER =====
spawn_area_manager = SpawnAreaManager(
    spawn_area_logic=spawn_area_logic,
    spawn_area_visualizer=spawn_area_visualizer,
    cost_visualizer=cost_surface
)

# ===== –°–û–ó–î–ê–ù–ò–ï INPUT MANAGER =====
input_manager = InputManager(
    scene_setup=scene_setup,
    zoom_manager=zoom_manager,
    spore_manager=spore_manager,
    spawn_area_manager=spawn_area_manager,
    param_manager=settings_param,
    ui_setup=ui_setup
)

# ===== –°–û–ó–î–ê–ù–ò–ï UPDATE MANAGER =====
update_manager = UpdateManager(
    scene_setup=scene_setup,
    zoom_manager=zoom_manager,
    param_manager=settings_param,
    ui_setup=ui_setup
)

# –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Å –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö
data_providers = {
    'get_spore_count': lambda: len(spore_manager.objects),
    'get_camera_info': lambda: (
        scene_setup.player.position.x,
        scene_setup.player.position.y,
        scene_setup.player.position.z,
        scene_setup.player.camera_pivot.rotation_x,
        scene_setup.player.rotation_y,
        0  # rot_z
    ),
    'get_cursor_status': lambda: scene_setup.cursor_locked,
    'get_look_point_info': lambda: (
        *zoom_manager.identify_invariant_point(),
        getattr(zoom_manager.scene_setup.frame.x_axis, 'scale', [1])[0],
        getattr(zoom_manager, 'spores_scale', 1)
    ),
    'get_param_info': lambda: (settings_param.param, settings_param.show)
}

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤–µ—Å—å UI –æ–¥–Ω–æ–π –∫–æ–º–∞–Ω–¥–æ–π, –ø–µ—Ä–µ–¥–∞–≤–∞—è –∫–æ–ª–±—ç–∫–∏
ui_elements = ui_setup.setup_demo_ui(data_providers, spawn_area=spawn_area_logic)

# ===== –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –û–ë–™–ï–ö–¢–û–í –í –ú–ï–ù–ï–î–ñ–ï–†–ê–• =====
spore_manager.add_spore(goal)
spore_manager.add_spore(spore)

zoom_manager.register_object(goal)
zoom_manager.register_object(spore)
zoom_manager.register_object(spawn_area_visualizer)
# cost_surface –±–æ–ª—å—à–µ –Ω–µ Scalable, —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –µ–≥–æ –æ–±—â–∏–π —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π Entity
zoom_manager.register_object(cost_surface_parent)

zoom_manager.update_transform()

print(f"   ‚úì –°–æ–∑–¥–∞–Ω–æ —Å–ø–æ—Ä: {len(spore_manager.objects)}")
print(f"   üìç –°—Ç–∞—Ä—Ç–æ–≤–∞—è —Å–ø–æ—Ä–∞ –≤ –ø–æ–∑–∏—Ü–∏–∏: {spore.position}")
print(f"   üéØ –¶–µ–ª–µ–≤–∞—è —Å–ø–æ—Ä–∞ –≤ –ø–æ–∑–∏—Ü–∏–∏: {goal.position}")
print(f"   üì∑ –ö–∞–º–µ—Ä–∞ –≤ –ø–æ–∑–∏—Ü–∏–∏: {scene_setup.player.position}")

# ===== –§–£–ù–ö–¶–ò–ò –û–ë–ù–û–í–õ–ï–ù–ò–Ø –î–ï–õ–ï–ì–ò–†–û–í–ê–ù–´ UI_SETUP =====
# –í—Å—è –ª–æ–≥–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI —Ç–µ–ø–µ—Ä—å –≤–Ω—É—Ç—Ä–∏ UI_setup!

# ===== –ö–û–ú–ê–ù–î–´ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–ò =====
print("\nüéÆ 5. –ö–æ–º–∞–Ω–¥—ã –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ UI:")
ui_setup.show_demo_commands_help()

# ===== –û–ë–†–ê–ë–û–¢–ö–ê –ö–û–ú–ê–ù–î –î–ï–õ–ï–ì–ò–†–û–í–ê–ù–ê UI_SETUP =====
# –í—Å—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥ UI —Ç–µ–ø–µ—Ä—å –≤–Ω—É—Ç—Ä–∏ UI_setup!

# ===== –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò =====
def update():
    """–û–±—â–∏–π –∞–ø–¥–µ–π—Ç, –≤—ã–∑—ã–≤–∞–µ–º—ã–π –∫–∞–∂–¥—ã–π –∫–∞–¥—Ä"""
    update_manager.update_all()

def input(key):
    """
    –ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞.
    –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –Ω–∞–∂–∞—Ç–∏—è –∫–ª–∞–≤–∏—à –∏ –¥–µ–ª–µ–≥–∏—Ä—É–µ—Ç –∏—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º.
    """
    # –ï—Å–ª–∏ –≤–≤–æ–¥ –∑–∞–º–æ—Ä–æ–∂–µ–Ω, –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ª—é–±—ã–µ –Ω–∞–∂–∞—Ç–∏—è.
    # –õ–æ–≥–∏–∫–∞ —Ä–∞–∑–º–æ—Ä–æ–∑–∫–∏ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ SceneSetup.update()
    if scene_setup.input_frozen:
        return

    # –ü–µ—Ä–µ–¥–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ InputManager
    input_manager.handle_input(key)

# ===== –§–ò–ù–ê–õ–¨–ù–ê–Ø –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø =====
print("\nüéâ 6. UI_setup –≥–æ—Ç–æ–≤ –∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏!")
print("\nüìã –î–û–°–¢–£–ü–ù–´–ï –ö–û–ú–ê–ù–î–´:")
print("   –û–ë–´–ß–ù–´–ï: WASD, Space/Shift, –º—ã—à—å, Alt, Q")
print("   ZOOM: E/T (–∑—É–º), R (—Å–±—Ä–æ—Å), 1/2 (—Å–ø–æ—Ä—ã)")
print("   PARAM: Z/X (–ø–∞—Ä–∞–º–µ—Ç—Ä)")
print("   UI: H (—Å–∫—Ä—ã—Ç—å/–ø–æ–∫–∞–∑–∞—Ç—å –≤–µ—Å—å UI)")
print("\n" + "="*40)
print("ÔøΩÔøΩ UI_SETUP DEMO –ó–ê–ü–£–©–ï–ù–ê!")
print("="*40)

# ===== –ó–ê–ü–£–°–ö =====
if __name__ == '__main__':
    app.run() 