from typing import Optional, Tuple, List
import numpy as np
from ursina import Vec3, color, destroy, mouse, camera, raycast, Vec2

from ..core.spore import Spore
from ..managers.zoom_manager import ZoomManager
from ..managers.spore_manager import SporeManager
from ..managers.color_manager import ColorManager
from ..logic.pendulum import PendulumSystem
from ..visual.prediction_visualizer import PredictionVisualizer
from ..visual.link import Link


class ManualSporeManager:
    """
    –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è —Å–ø–æ—Ä —Å –ø—Ä–µ–≤—å—é –ø–æ –∫—É—Ä—Å–æ—Ä—É.
    
    –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:
    - –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω—É—é —Å–ø–æ—Ä—É –≤ –ø–æ–∑–∏—Ü–∏–∏ –∫—É—Ä—Å–æ—Ä–∞ –º—ã—à–∏
    - –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –ø—Ä–∏ min/max —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏
    - –°–æ–∑–¥–∞–µ—Ç —Å–ø–æ—Ä—ã + —Ü–µ–ø–æ—á–∫–∏ —Ä–æ–¥–∏—Ç–µ–ª–µ–π –ø–æ –õ–ö–ú
    """
    
    def __init__(self, 
                 spore_manager: SporeManager,
                 zoom_manager: ZoomManager,
                 pendulum: PendulumSystem,
                 color_manager: ColorManager,
                 config: dict):
        
        self.spore_manager = spore_manager
        self.zoom_manager = zoom_manager
        self.pendulum = pendulum
        self.color_manager = color_manager
        self.config = config
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–µ–≤—å—é
        self.preview_enabled = True
        self.preview_alpha = 0.5  # –ü–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å
        
        # –ü—Ä–µ–≤—å—é —Å–ø–æ—Ä–∞
        self.preview_spore: Optional[Spore] = None
        self.preview_position_2d = np.array([0.0, 0.0], dtype=float)
        
        # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è min/max —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        self.prediction_visualizers: List[PredictionVisualizer] = []
        self.prediction_links: List[Link] = []  # –õ–∏–Ω–∫–∏ –æ—Ç –ø—Ä–µ–≤—å—é —Å–ø–æ—Ä—ã –∫ –ø—Ä–∏–∑—Ä–∞–∫–∞–º
        self.created_links: List[Link] = []
        self.show_predictions = True
        
        # –ü–æ–ª—É—á–∞–µ–º –≥—Ä–∞–Ω–∏—Ü—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–∑ –º–∞—è—Ç–Ω–∏–∫–∞
        control_bounds = self.pendulum.get_control_bounds()
        self.min_control = float(control_bounds[0])
        self.max_control = float(control_bounds[1])

        self._link_counter = 0
        self._spore_counter = 0

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ dt –≤–µ–∫—Ç–æ—Ä–∞ –æ—Ç –ø—Ä–∏–∑—Ä–∞—á–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞
        self.ghost_tree_dt_vector = None

        # –ò—Å—Ç–æ—Ä–∏—è —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø —Å–ø–æ—Ä –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —É–¥–∞–ª–µ–Ω–∏—è
        self.spore_groups_history: List[List[Spore]] = []  # –ò—Å—Ç–æ—Ä–∏—è –≥—Ä—É–ø–ø —Å–ø–æ—Ä
        self.group_links_history: List[List[Link]] = []    # –ò—Å—Ç–æ—Ä–∏—è –ª–∏–Ω–∫–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã

        self.creation_mode = 'spores'  # 'spores' –∏–ª–∏ 'tree'
        self.tree_depth = 2 
        self._global_tree_counter = 0

        print(f"   ‚úì Manual Spore Manager —Å–æ–∑–¥–∞–Ω (—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {self.min_control} .. {self.max_control})")
        print(f"   üìö –ò—Å—Ç–æ—Ä–∏—è –≥—Ä—É–ø–ø –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")




    
        # üÜï –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É –¥–µ—Ä–µ–≤—å–µ–≤
        self.creation_mode = 'spores'  # 'spores' –∏–ª–∏ 'tree'
        self.tree_depth = 2  # 1 –∏–ª–∏ 2
        # –ù–ï –ù–£–ñ–ù–û: self.active_trees = [] - —Å–ø–æ—Ä—ã –∏–¥—É—Ç –≤ –æ–±—â–∏–π –≥—Ä–∞—Ñ!
    
    print(f"   üå≤ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –¥–µ—Ä–µ–≤—å–µ–≤ –¥–æ–±–∞–≤–ª–µ–Ω–∞")

# –í —Ç–æ–º –∂–µ —Ñ–∞–π–ª–µ –¥–æ–±–∞–≤–∏—Ç—å –º–µ—Ç–æ–¥—ã:

    def toggle_creation_mode(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Ä–µ–∂–∏–º —Å–æ–∑–¥–∞–Ω–∏—è."""
        if self.creation_mode == 'spores':
            self.creation_mode = 'tree'
            print("üå≤ –†–µ–∂–∏–º: –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ—Ä–µ–≤—å–µ–≤")
        else:
            self.creation_mode = 'spores'
            print("üåü –†–µ–∂–∏–º: –°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–æ—Ä")

    def set_tree_depth(self, depth: int):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≥–ª—É–±–∏–Ω—É –¥–µ—Ä–µ–≤–∞."""
        self.tree_depth = max(1, min(depth, 2))
        print(f"üå≤ –ì–ª—É–±–∏–Ω–∞ –¥–µ—Ä–µ–≤–∞: {self.tree_depth}")

    def create_tree_at_cursor(self):
        """
        –°–æ–∑–¥–∞–µ—Ç –¥–µ—Ä–µ–≤–æ –≤ –ø–æ–∑–∏—Ü–∏–∏ –∫—É—Ä—Å–æ—Ä–∞.
        
        –õ–û–ì–ò–ö–ê: –¥–µ—Ä–µ–≤–æ ‚Üí —Å–ø–æ—Ä—ã –∏ –ª–∏–Ω–∫–∏ ‚Üí –¥–æ–±–∞–≤–ª—è–µ–º –≤ –æ–±—â–∏–π –≥—Ä–∞—Ñ ‚Üí –∑–∞–±—ã–≤–∞–µ–º –¥–µ—Ä–µ–≤–æ
        """
        if not self.preview_enabled or not self.preview_spore:
            return None
            
        try:
            from ..visual.spore_tree_visual import SporeTreeVisual
            from ..logic.tree.spore_tree import SporeTree
            from ..logic.tree.spore_tree_config import SporeTreeConfig

            self._global_tree_counter += 1
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π dt
            dt = self._get_current_dt()
            
            # –°–æ–∑–¥–∞–µ–º –ª–æ–≥–∏–∫—É –¥–µ—Ä–µ–≤–∞
            tree_config = SporeTreeConfig(
                initial_position=self.preview_position_2d.copy(),
                dt_base=dt,
                dt_grandchildren_factor=0.05,
                show_debug=False
            )
            
            tree_logic = SporeTree(
                pendulum=self.pendulum,
                config=tree_config,
                auto_create=False
            )
            
            # –°–æ–∑–¥–∞–µ–º –¥–µ—Ç–µ–π –≤—Å–µ–≥–¥–∞
            tree_logic.create_children()
            
            # –°–æ–∑–¥–∞–µ–º –≤–Ω—É–∫–æ–≤ —Ç–æ–ª—å–∫–æ –¥–ª—è –≥–ª—É–±–∏–Ω—ã 2
            if self.tree_depth >= 2:
                tree_logic.create_grandchildren()

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º dt –≤–µ–∫—Ç–æ—Ä –æ—Ç –ø—Ä–∏–∑—Ä–∞—á–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
            if self.ghost_tree_dt_vector is not None:
                print(f"üéØ –ò—Å–ø–æ–ª—å–∑—É–µ–º dt –≤–µ–∫—Ç–æ—Ä –æ—Ç –ø—Ä–∏–∑—Ä–∞—á–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞: {self.ghost_tree_dt_vector}")

            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π dt –≤–µ–∫—Ç–æ—Ä –æ—Ç –ø—Ä–∏–∑—Ä–∞—á–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞
            if self.ghost_tree_dt_vector is not None and len(self.ghost_tree_dt_vector) == 12:
                try:
                    # –ü–µ—Ä–≤—ã–µ 4 —ç–ª–µ–º–µ–Ω—Ç–∞ - dt –¥–ª—è –¥–µ—Ç–µ–π, —Å–ª–µ–¥—É—é—â–∏–µ 8 - –¥–ª—è –≤–Ω—É–∫–æ–≤
                    dt_children = self.ghost_tree_dt_vector[:4]
                    dt_grandchildren = self.ghost_tree_dt_vector[4:12]

                    # –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º dt –¥–ª—è –¥–µ—Ç–µ–π
                    for i, child in enumerate(tree_logic.children):
                        if i < len(dt_children):
                            child['dt'] = dt_children[i]

                    # –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º dt –¥–ª—è –≤–Ω—É–∫–æ–≤
                    for i, grandchild in enumerate(tree_logic.grandchildren):
                        if i < len(dt_grandchildren):
                            grandchild['dt'] = dt_grandchildren[i]

                    print(f"‚úÖ –ü—Ä–∏–º–µ–Ω–µ–Ω dt –≤–µ–∫—Ç–æ—Ä –ø—Ä–∏–∑—Ä–∞—á–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞ –∫ —Ä–µ–∞–ª—å–Ω–æ–º—É –¥–µ—Ä–µ–≤—É")
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è dt –≤–µ–∫—Ç–æ—Ä–∞: {e}")
            
            # –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é (–í–†–ï–ú–ï–ù–ù–û)
            tree_visual = SporeTreeVisual(
                color_manager=self.color_manager,
                zoom_manager=self.zoom_manager,
                config=self.config
            )
            
            tree_visual.set_tree_logic(tree_logic)
            tree_visual.create_visual()
            
            # =============================================
            # –ó–ê–ë–ò–†–ê–ï–ú –°–û–ó–î–ê–ù–ù–´–ï –û–ë–™–ï–ö–¢–´ –í –û–ë–©–ò–ô –ì–†–ê–§
            # =============================================
            
            created_spores = []
            created_links = []
            
            # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Å–ø–æ—Ä—ã
            all_spores = [tree_visual.root_spore] + tree_visual.child_spores + tree_visual.grandchild_spores
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–æ—Ä—ã –≤ –æ–±—â—É—é —Å–∏—Å—Ç–µ–º—É (–∫–∞–∫ –æ–±—ã—á–Ω—ã–µ —Å–ø–æ—Ä—ã)  
            for i, spore in enumerate(all_spores):
                if spore:
                    self.spore_manager.add_spore_manual(spore)
                    created_spores.append(spore)
                    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å–ø–æ—Ä—É –≤ ZoomManager —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –∏–º–µ–Ω–µ–º
                    self.zoom_manager.register_object(spore, f"tree_spore_{self._global_tree_counter}_{i}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ª–∏–Ω–∫–∏ –≤ –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫ (–∫–∞–∫ –æ–±—ã—á–Ω—ã–µ –ª–∏–Ω–∫–∏)
            all_links = tree_visual.child_links + tree_visual.grandchild_links
            for i, link in enumerate(all_links):
                if link:
                    self.created_links.append(link)
                    created_links.append(link)
                    # ‚úÖ –î–û–ë–ê–í–ò–¢–¨ –†–ï–ì–ò–°–¢–†–ê–¶–ò–Æ:
                    self.zoom_manager.register_object(link, f"tree_link_{self._global_tree_counter}_{i}")
            
            # =============================================
            # –û–°–í–û–ë–û–ñ–î–ê–ï–ú SporeTreeVisual
            # =============================================
            
            # –û—á–∏—â–∞–µ–º —Å—Å—ã–ª–∫–∏ —á—Ç–æ–±—ã tree_visual –Ω–µ —É–Ω–∏—á—Ç–æ–∂–∏–ª –æ–±—ä–µ–∫—Ç—ã
            tree_visual.root_spore = None
            tree_visual.child_spores.clear()
            tree_visual.grandchild_spores.clear()
            tree_visual.child_links.clear()
            tree_visual.grandchild_links.clear()
            tree_visual.visual_created = False
            
            # tree_visual –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω
            tree_visual = None
            tree_logic = None
            
            # =============================================
            # –°–û–•–†–ê–ù–Ø–ï–ú –í –ò–°–¢–û–†–ò–Æ (–∫–∞–∫ –æ–±—ã—á–Ω—É—é –≥—Ä—É–ø–ø—É —Å–ø–æ—Ä)
            # =============================================
            
            self.spore_groups_history.append(created_spores.copy())
            self.group_links_history.append(created_links.copy())
            
            print(f"üå≤ –î–µ—Ä–µ–≤–æ —Å–æ–∑–¥–∞–Ω–æ –≤ ({self.preview_position_2d[0]:.3f}, {self.preview_position_2d[1]:.3f})")
            print(f"   üìä –ì–ª—É–±–∏–Ω–∞: {self.tree_depth}, dt: {dt:.4f}")
            print(f"   üéØ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä–∞—Ñ: {len(created_spores)} —Å–ø–æ—Ä + {len(created_links)} –ª–∏–Ω–∫–æ–≤")
            print(f"   üìö –ì—Ä—É–ø–ø–∞ #{len(self.spore_groups_history)} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –∏—Å—Ç–æ—Ä–∏–∏")
            
            return created_spores  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω—É—é –≥—Ä—É–ø–ø—É —Å–ø–æ—Ä
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ—Ä–µ–≤–∞: {e}")
            import traceback
            traceback.print_exc()
            return None

    def _get_current_dt(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π dt –∏–∑ DTManager –∏–ª–∏ –∫–æ–Ω—Ñ–∏–≥–∞."""
        if hasattr(self, 'dt_manager') and self.dt_manager:
            return self.dt_manager.get_current_dt()
        return self.config.get('pendulum', {}).get('dt', 0.1)

    def _get_next_link_id(self) -> int:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –ª–∏–Ω–∫–∞"""
        self._link_counter += 1
        return self._link_counter
    
    def _get_next_spore_id(self) -> int:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è —Å–ø–æ—Ä—ã"""
        self._spore_counter += 1
        return self._spore_counter
    
    def get_mouse_world_position(self) -> Optional[Tuple[float, float]]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –ø–æ–∑–∏—Ü–∏—é –∫—É—Ä—Å–æ—Ä–∞ –º—ã—à–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –∑—É–º–∞.
        
        –ê–ª–≥–æ—Ä–∏—Ç–º:
        1. –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–æ—á–∫—É –Ω–∞ –∫–æ—Ç–æ—Ä—É—é —Å–º–æ—Ç—Ä–∏—Ç –∫–∞–º–µ—Ä–∞ (–±–µ–∑ –∑—É–º–∞)
        2. –û—Ç–Ω—è—Ç—å –ø–æ–∑–∏—Ü–∏—é frame origin_cube
        3. –ü–æ–¥–µ–ª–∏—Ç—å –Ω–∞ common_scale
        
        Returns:
            (x, z) –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫—É—Ä—Å–æ—Ä–∞ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
        """
        try:
            # 1. –ü–æ–ª—É—á–∞–µ–º —Ç–æ—á–∫—É –≤–∑–≥–ª—è–¥–∞ –∫–∞–º–µ—Ä—ã (–±–µ–∑ –∑—É–º–∞)
            look_point_x, look_point_z = self.zoom_manager.identify_invariant_point()
            
            # 2. –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—É—é –ø–æ–∑–∏—Ü–∏—é origin_cube –∏–∑ frame
            frame = getattr(self.zoom_manager.scene_setup, 'frame', None)
            if frame and hasattr(frame, 'origin_cube'):
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—É—é position (–ø–æ—Å–ª–µ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–π) –∞ –Ω–µ real_position
                origin_pos = frame.origin_cube.position
                if hasattr(origin_pos, 'x'):
                    origin_x, origin_z = origin_pos.x, origin_pos.z
                else:
                    origin_x, origin_z = origin_pos[0], origin_pos[2]
            else:
                # Fallback –µ—Å–ª–∏ frame –Ω–µ –Ω–∞–π–¥–µ–Ω
                origin_x, origin_z = 0.0, 0.0
            
            # 3. –ü–æ–ª—É—á–∞–µ–º –º–∞—Å—à—Ç–∞–± —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏
            transform_scale = getattr(self.zoom_manager, 'a_transformation', 1.0)
            
            # 4. –ü–†–ê–í–ò–õ–¨–ù–ê–Ø –§–û–†–ú–£–õ–ê: (look_point - frame_origin_cube) / scale
            corrected_x = (look_point_x - origin_x) / transform_scale
            corrected_z = (look_point_z - origin_z) / transform_scale
            
            return (corrected_x, corrected_z)
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ –º—ã—à–∏: {e}")
            return (0.0, 0.0)
    
    def update_cursor_position(self) -> None:
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ–∑–∏—Ü–∏—é –ø—Ä–µ–≤—å—é —Å–ø–æ—Ä—ã –ø–æ –ø–æ–∑–∏—Ü–∏–∏ –∫—É—Ä—Å–æ—Ä–∞ –º—ã—à–∏.
        """
        if not self.preview_enabled:
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –∫—É—Ä—Å–æ—Ä–∞ –º—ã—à–∏
        mouse_pos = self.get_mouse_world_position()
        if mouse_pos is None:
            return
            
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é
        self.preview_position_2d[0] = mouse_pos[0]
        self.preview_position_2d[1] = mouse_pos[1]
        
        # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–≤—å—é —Å–ø–æ—Ä—É
        self._update_preview_spore()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
        if self.show_predictions:
            self._update_predictions()
    
    def set_preview_enabled(self, enabled: bool) -> None:
        """–í–∫–ª—é—á–∞–µ—Ç/–≤—ã–∫–ª—é—á–∞–µ—Ç –ø—Ä–µ–≤—å—é —Å–ø–æ—Ä."""
        self.preview_enabled = enabled
        if not enabled:
            self._destroy_preview()
    
    def _update_preview_spore(self) -> None:
        """–°–æ–∑–¥–∞–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–µ–≤—å—é —Å–ø–æ—Ä—É."""
        if not self.preview_spore:
            self._create_preview_spore()
        else:
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–ø–æ—Ä—ã
            self.preview_spore.real_position = Vec3(
                self.preview_position_2d[0], 
                0.0, 
                self.preview_position_2d[1]
            )
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ zoom manager
            self.preview_spore.apply_transform(
                self.zoom_manager.a_transformation,
                self.zoom_manager.b_translation,
                spores_scale=self.zoom_manager.spores_scale
            )
    
    def _create_preview_spore(self) -> None:
        """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –ø—Ä–µ–≤—å—é —Å–ø–æ—Ä—É."""
        try:
            goal_position = self.config.get('spore', {}).get('goal_position', [0, 0])
            spore_config = self.config.get('spore', {})
            pendulum_config = self.config.get('pendulum', {})
            
            self.preview_spore = Spore(
                pendulum=self.pendulum,
                dt=pendulum_config.get('dt', 0.1),
                goal_position=goal_position,
                scale=spore_config.get('scale', 0.1),
                position=(self.preview_position_2d[0], 0.0, self.preview_position_2d[1]),
                color_manager=self.color_manager,
                is_ghost=True  # –î–µ–ª–∞–µ–º —Å–ø–æ—Ä—É-–ø—Ä–∏–∑—Ä–∞–∫
            )
            
            base_color = self.color_manager.get_color('spore', 'default')
            
            # –°–ø–æ—Å–æ–± 1: –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã r, g, b
            try:
                self.preview_spore.color = (base_color.r, base_color.g, base_color.b, self.preview_alpha)
            except AttributeError:
                # –°–ø–æ—Å–æ–± 2: –ï—Å–ª–∏ —ç—Ç–æ Vec4 –∏–ª–∏ tuple
                try:
                    self.preview_spore.color = (base_color[0], base_color[1], base_color[2], self.preview_alpha)
                except (TypeError, IndexError):
                    # –°–ø–æ—Å–æ–± 3: Fallback –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ü–≤–µ—Ç
                    self.preview_spore.color = (0.6, 0.4, 0.9, self.preview_alpha)  # –§–∏–æ–ª–µ—Ç–æ–≤—ã–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                    print(f"   ‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω fallback —Ü–≤–µ—Ç –¥–ª—è preview spore")
            
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤ zoom manager
            self.zoom_manager.register_object(self.preview_spore, name='manual_preview')
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–≤—å—é —Å–ø–æ—Ä—ã: {e}")
    

    def _update_predictions(self) -> None:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è."""
        if self.creation_mode == 'tree':
            self._update_tree_preview()
        else:
            self._update_spore_predictions()

    def _update_spore_predictions(self) -> None:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è: 2 –≤–ø–µ—Ä–µ–¥ (min/max) + 2 –Ω–∞–∑–∞–¥ (min/max)."""
        if not self.preview_spore:
            return

        try:
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
            self._clear_predictions()

            if hasattr(self, 'dt_manager') and self.dt_manager:
                dt = self.dt_manager.get_dt()
            else:
                dt = self.config.get('pendulum', {}).get('dt', 0.1)

            # 4 –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è: 2 –≤–ø–µ—Ä–µ–¥ + 2 –Ω–∞–∑–∞–¥
            prediction_configs = [
                # –í–ø–µ—Ä–µ–¥
                {'control': self.min_control, 'name': 'forward_min', 'color': 'ghost_min', 'direction': 'forward'},
                {'control': self.max_control, 'name': 'forward_max', 'color': 'ghost_max', 'direction': 'forward'},
                # –ù–∞–∑–∞–¥
                {'control': self.min_control, 'name': 'backward_min', 'color': 'ghost_min', 'direction': 'backward'},
                {'control': self.max_control, 'name': 'backward_max', 'color': 'ghost_max', 'direction': 'backward'}
            ]

            for i, config in enumerate(prediction_configs):
                # –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                if config['direction'] == 'forward':
                    # –û–±—ã—á–Ω—ã–π —à–∞–≥ –≤–ø–µ—Ä–µ–¥
                    predicted_pos_2d = self.pendulum.step(
                        self.preview_position_2d,
                        config['control'],
                        dt,
                        method='jit'
                    )
                else:  # backward
                    # –®–∞–≥ –Ω–∞–∑–∞–¥ –≤–æ –≤—Ä–µ–º–µ–Ω–∏
                    predicted_pos_2d = self.pendulum.step(
                        self.preview_position_2d,
                        config['control'],
                        -dt,
                        method='jit'
                    )

                # –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
                prediction_viz = PredictionVisualizer(
                    parent_spore=self.preview_spore,
                    color_manager=self.color_manager,
                    zoom_manager=self.zoom_manager,
                    cost_function=None,  # –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º cost –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
                    config={
                        'spore': {'show_ghosts': True},
                        'angel': {'show_angels': False, 'show_pillars': False}
                    },
                    spore_id=f'manual_prediction_{config["name"]}'
                )

                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–≤–µ—Ç –ø—Ä–∏–∑—Ä–∞–∫–∞
                if prediction_viz.ghost_spore:
                    base_color = self.color_manager.get_color('spore', config['color'])

                    # –î–ª—è –ø—Ä–∏–∑—Ä–∞–∫–æ–≤ –Ω–∞–∑–∞–¥ –¥–µ–ª–∞–µ–º —Ü–≤–µ—Ç –±–æ–ª–µ–µ —Ç—É—Å–∫–ª—ã–º
                    if config['direction'] == 'backward':
                        # –£–º–µ–Ω—å—à–∞–µ–º —è—Ä–∫–æ—Å—Ç—å –¥–ª—è –ø—Ä–∏–∑—Ä–∞–∫–æ–≤ –Ω–∞–∑–∞–¥
                        if hasattr(base_color, 'r'):
                            r, g, b = base_color.r * 0.6, base_color.g * 0.6, base_color.b * 0.6
                            prediction_viz.ghost_spore.color = (r, g, b, 0.7)
                        else:
                            # Fallback
                            prediction_viz.ghost_spore.color = (0.3, 0.3, 0.6, 0.7)  # –¢—É—Å–∫–ª—ã–π —Å–∏–Ω–∏–π
                    else:
                        # –û–±—ã—á–Ω—ã–π —Ü–≤–µ—Ç –¥–ª—è –ø—Ä–∏–∑—Ä–∞–∫–æ–≤ –≤–ø–µ—Ä–µ–¥
                        prediction_viz.ghost_spore.color = base_color

                # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
                prediction_viz.update(predicted_pos_2d)

                # # –°–æ–∑–¥–∞–µ–º –ª–∏–Ω–∫ –æ—Ç –ø—Ä–µ–≤—å—é —Å–ø–æ—Ä—ã –∫ –ø—Ä–∏–∑—Ä–∞–∫—É
                # if prediction_viz.ghost_spore:
                #     prediction_link = Link(
                #         parent_spore=self.preview_spore,
                #         child_spore=prediction_viz.ghost_spore,
                #         color_manager=self.color_manager,
                #         zoom_manager=self.zoom_manager,
                #         config=self.config
                #     )

                # –°–æ–∑–¥–∞–µ–º –ª–∏–Ω–∫ –æ—Ç –ø—Ä–µ–≤—å—é —Å–ø–æ—Ä—ã –∫ –ø—Ä–∏–∑—Ä–∞–∫—É
                if prediction_viz.ghost_spore:
                    # –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–µ–Ω—è–µ–º –º–µ—Å—Ç–∞–º–∏ parent –∏ child
                    if config['direction'] == 'forward':
                        # –í–ø–µ—Ä–µ–¥: –ø—Ä–µ–≤—å—é ‚Üí –±—É–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                        parent_spore = self.preview_spore
                        child_spore = prediction_viz.ghost_spore
                    else:  # backward
                        # –ù–∞–∑–∞–¥: –ø—Ä–æ—à–ª–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ‚Üí –ø—Ä–µ–≤—å—é (–ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–ª–∏)
                        parent_spore = prediction_viz.ghost_spore
                        child_spore = self.preview_spore

                    prediction_link = Link(
                        parent_spore=parent_spore,
                        child_spore=child_spore,
                        color_manager=self.color_manager,
                        zoom_manager=self.zoom_manager,
                        config=self.config
                    )

                    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–≤–µ—Ç –ª–∏–Ω–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                    if config['direction'] == 'forward':
                        # –û–±—ã—á–Ω—ã–µ —Ü–≤–µ—Ç–∞ –¥–ª—è –ª–∏–Ω–∫–æ–≤ –≤–ø–µ—Ä–µ–¥
                        if 'min' in config['name']:
                            link_color_name = 'ghost_min'  # –°–∏–Ω–∏–π –¥–ª—è min
                        else:  # max
                            link_color_name = 'ghost_max'  # –ö—Ä–∞—Å–Ω—ã–π –¥–ª—è max
                    else:  # backward
                        # –¢–µ –∂–µ —Ü–≤–µ—Ç–∞ –¥–ª—è –ª–∏–Ω–∫–æ–≤ –Ω–∞–∑–∞–¥
                        if 'min' in config['name']:
                            link_color_name = 'ghost_min'  # –°–∏–Ω–∏–π –¥–ª—è min
                        else:  # max
                            link_color_name = 'ghost_max'  # –ö—Ä–∞—Å–Ω—ã–π –¥–ª—è max

                    prediction_link.color = self.color_manager.get_color('link', link_color_name)

                    # –î–ª—è –ª–∏–Ω–∫–æ–≤ –Ω–∞–∑–∞–¥ –¥–µ–ª–∞–µ–º –±–æ–ª–µ–µ —Ç–æ–Ω–∫–∏–º–∏ –∏–ª–∏ –ø—É–Ω–∫—Ç–∏—Ä–Ω—ã–º–∏
                    if config['direction'] == 'backward':
                        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é —Å—Ç–∏–ª–∏–∑–∞—Ü–∏—é –ª–∏–Ω–∫–æ–≤ –Ω–∞–∑–∞–¥
                        pass

                    # –û–±–Ω–æ–≤–ª—è–µ–º –≥–µ–æ–º–µ—Ç—Ä–∏—é –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤ zoom manager
                    prediction_link.update_geometry()
                    self.zoom_manager.register_object(
                        prediction_link,
                        f'manual_prediction_link_{config["name"]}'
                    )

                    self.prediction_links.append(prediction_link)

                self.prediction_visualizers.append(prediction_viz)

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π: {e}")
            import traceback
            traceback.print_exc()

    def _clear_predictions(self) -> None:
        """–û—á–∏—â–∞–µ—Ç –≤—Å–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –∏ –∏—Ö –ª–∏–Ω–∫–∏."""
        # –°–Ω–∞—á–∞–ª–∞ –¥–µ—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∏–∑ zoom_manager, –ü–û–¢–û–ú —É–Ω–∏—á—Ç–æ–∂–∞–µ–º
        for i, viz in enumerate(self.prediction_visualizers):
            if viz.ghost_spore:
                # –ò—â–µ–º –∏ –¥–µ—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º ghost_spore
                ghost_id = getattr(viz.ghost_spore, 'id', f'tree_ghost_{i}')
                try:
                    self.zoom_manager.unregister_object(ghost_id)
                except:
                    pass
            viz.destroy()
        self.prediction_visualizers.clear()

        # –û—á–∏—â–∞–µ–º –ª–∏–Ω–∫–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
        for i, link in enumerate(self.prediction_links):
            # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–ª—é—á —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            possible_keys = [
                f'manual_prediction_link_{["forward_min", "forward_max", "backward_min", "backward_max"][i] if i < 4 else i}',
                f'ghost_link_root_to_child_{i}',
                f'ghost_link_child_{i//2}_to_grandchild_{i}'
            ]

            for key in possible_keys:
                try:
                    self.zoom_manager.unregister_object(key)
                    break
                except:
                    continue

            try:
                destroy(link)
            except:
                pass
        self.prediction_links.clear()

    def _update_tree_preview(self) -> None:
        """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–∏–∑—Ä–∞—á–Ω–æ–µ –¥–µ—Ä–µ–≤–æ –¥–ª—è –ø—Ä–µ–≤—å—é."""
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
        self._clear_predictions()

        if not self.preview_spore:
            return

        try:
            # –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è –¥–µ—Ä–µ–≤–∞
            from ..logic.tree.spore_tree import SporeTree
            from ..logic.tree.spore_tree_config import SporeTreeConfig

            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π dt
            dt = self._get_current_dt()

            # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥ –¥–µ—Ä–µ–≤–∞
            tree_config = SporeTreeConfig(
                initial_position=self.preview_position_2d.copy(),
                dt_base=dt,
                dt_grandchildren_factor=0.2,
                show_debug=False
            )

            # –°–æ–∑–¥–∞–µ–º –ª–æ–≥–∏–∫—É –¥–µ—Ä–µ–≤–∞
            tree_logic = SporeTree(
                pendulum=self.pendulum,
                config=tree_config,
                auto_create=False
            )

            # –°–æ–∑–¥–∞–µ–º –¥–µ—Ç–µ–π
            tree_logic.create_children()

            # –°–æ–∑–¥–∞–µ–º –≤–Ω—É–∫–æ–≤ –µ—Å–ª–∏ –Ω—É–∂–Ω–∞ –≥–ª—É–±–∏–Ω–∞ 2
            if self.tree_depth >= 2:
                tree_logic.create_grandchildren()

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º dt –≤–µ–∫—Ç–æ—Ä –æ—Ç –ø—Ä–∏–∑—Ä–∞—á–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞ –¥–ª—è –±—É–¥—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            if hasattr(tree_logic, 'children') and hasattr(tree_logic, 'grandchildren'):
                try:
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º dt –∏–∑ –¥–µ—Ä–µ–≤–∞
                    dt_children = [child.get('dt', dt) for child in tree_logic.children]
                    dt_grandchildren = [gc.get('dt', dt * 0.2) for gc in tree_logic.grandchildren]
                    self.ghost_tree_dt_vector = np.hstack([dt_children, dt_grandchildren])
                    print(f"üîÆ –°–æ—Ö—Ä–∞–Ω–µ–Ω dt –≤–µ–∫—Ç–æ—Ä –ø—Ä–∏–∑—Ä–∞—á–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞: {len(self.ghost_tree_dt_vector)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è dt –≤–µ–∫—Ç–æ—Ä–∞: {e}")
                    self.ghost_tree_dt_vector = None

            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –ø—Ä–∏–∑—Ä–∞—á–Ω—ã–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
            self._create_ghost_tree_from_logic(tree_logic)

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–∑—Ä–∞—á–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞: {e}")

    def _create_ghost_tree_from_logic(self, tree_logic):
        """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–∏–∑—Ä–∞—á–Ω—ã–µ —Å–ø–æ—Ä—ã –∏ –ª–∏–Ω–∫–∏ –∏–∑ –ª–æ–≥–∏–∫–∏ –¥–µ—Ä–µ–≤–∞."""
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–∑—Ä–∞—á–Ω—ã–µ —Å–ø–æ—Ä—ã –¥–ª—è –¥–µ—Ç–µ–π
        child_ghosts = []
        for i, child_data in enumerate(tree_logic.children):
            ghost_viz = self._create_ghost_spore_from_data(child_data, f"tree_child_{i}", 0.4)
            if ghost_viz and ghost_viz.ghost_spore:
                child_ghosts.append(ghost_viz.ghost_spore)

        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–∑—Ä–∞—á–Ω—ã–µ —Å–ø–æ—Ä—ã –¥–ª—è –≤–Ω—É–∫–æ–≤ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        grandchild_ghosts = []
        if hasattr(tree_logic, 'grandchildren') and tree_logic.grandchildren:
            for i, grandchild_data in enumerate(tree_logic.grandchildren):
                ghost_viz = self._create_ghost_spore_from_data(grandchild_data, f"tree_grandchild_{i}", 0.3)
                if ghost_viz and ghost_viz.ghost_spore:
                    grandchild_ghosts.append(ghost_viz.ghost_spore)

        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–∑—Ä–∞—á–Ω—ã–µ –ª–∏–Ω–∫–∏ –æ—Ç –∫–æ—Ä–Ω—è –∫ –¥–µ—Ç—è–º —Å —Ü–≤–µ—Ç–æ–º –ø–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é
        for i, child_ghost in enumerate(child_ghosts):
            if child_ghost and i < len(tree_logic.children):
                # –ü–æ–ª—É—á–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–±–µ–Ω–∫–∞ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –¥–µ—Ä–µ–≤–∞
                child_control = tree_logic.children[i]['control']

                # –í—ã–±–∏—Ä–∞–µ–º —Ü–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∑–Ω–∞–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                if child_control >= 0:
                    link_color = 'ghost_max'  # –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ - –∫—Ä–∞—Å–Ω—ã–π
                else:
                    link_color = 'ghost_min'  # –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ - —Å–∏–Ω–∏–π

                self._create_ghost_link(
                    self.preview_spore,
                    child_ghost,
                    f"root_to_child_{i}",
                    link_color
                )

        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–∑—Ä–∞—á–Ω—ã–µ –ª–∏–Ω–∫–∏ –æ—Ç –¥–µ—Ç–µ–π –∫ –≤–Ω—É–∫–∞–º (–µ—Å–ª–∏ tree_depth >= 2)
        if self.tree_depth >= 2 and grandchild_ghosts:
            for i, grandchild_ghost in enumerate(grandchild_ghosts):
                if grandchild_ghost:
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—è –≤–Ω—É–∫–∞ –∏–∑ –¥–∞–Ω–Ω—ã—Ö
                    grandchild_data = tree_logic.grandchildren[i]
                    parent_idx = grandchild_data['parent_idx']

                    if parent_idx < len(child_ghosts) and child_ghosts[parent_idx]:
                        self._create_ghost_link(
                            child_ghosts[parent_idx],
                            grandchild_ghost,
                            f"child_{parent_idx}_to_grandchild_{i}",
                            'ghost_min' if i % 2 == 0 else 'ghost_max'  # –ß–µ—Ä–µ–¥—É–µ–º —Ü–≤–µ—Ç–∞
                        )

    def _create_ghost_spore_from_data(self, spore_data, name_suffix, alpha):
        """–°–æ–∑–¥–∞–µ—Ç –æ–¥–Ω—É –ø—Ä–∏–∑—Ä–∞—á–Ω—É—é —Å–ø–æ—Ä—É –∏–∑ –¥–∞–Ω–Ω—ã—Ö –¥–µ—Ä–µ–≤–∞."""
        from ..visual.prediction_visualizer import PredictionVisualizer

        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é —Å–ø–æ—Ä—ã
        final_position = spore_data['position']  # –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å [x, z]

        # –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
        prediction_viz = PredictionVisualizer(
            parent_spore=self.preview_spore,
            color_manager=self.color_manager,
            zoom_manager=self.zoom_manager,
            cost_function=None,
            config={
                'spore': {'show_ghosts': True},
                'angel': {'show_angels': False, 'show_pillars': False}
            },
            spore_id=f'tree_ghost_{name_suffix}'
        )

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –ø—Ä–∏–∑—Ä–∞–∫–∞
        if prediction_viz.ghost_spore:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å
            base_color = self.color_manager.get_color('spore', 'default')
            try:
                prediction_viz.ghost_spore.color = (base_color.r, base_color.g, base_color.b, alpha)
            except:
                prediction_viz.ghost_spore.color = (0.6, 0.4, 0.9, alpha)

            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é
            prediction_viz.update(final_position)

            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø—Ä–∏–∑—Ä–∞–∫–∞ –≤ zoom_manager
            try:
                ghost_id = f'tree_ghost_{name_suffix}'
                prediction_viz.ghost_spore.id = ghost_id
                self.zoom_manager.register_object(prediction_viz.ghost_spore, ghost_id)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–∏–∑—Ä–∞–∫–∞ {name_suffix}: {e}")

        # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
        self.prediction_visualizers.append(prediction_viz)
        return prediction_viz

    def _create_ghost_link(self, parent_spore, child_spore, link_suffix, color_name):
        """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–∏–∑—Ä–∞—á–Ω—ã–π –ª–∏–Ω–∫ –º–µ–∂–¥—É –¥–≤—É–º—è —Å–ø–æ—Ä–∞–º–∏."""
        try:
            from ..visual.link import Link

            ghost_link = Link(
                parent_spore=parent_spore,
                child_spore=child_spore,
                color_manager=self.color_manager,
                zoom_manager=self.zoom_manager,
                config=self.config
            )

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–≤–µ—Ç –ª–∏–Ω–∫–∞
            ghost_link.color = self.color_manager.get_color('link', color_name)

            # –î–µ–ª–∞–µ–º –ª–∏–Ω–∫ –ø–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–º
            if hasattr(ghost_link, 'alpha'):
                ghost_link.alpha = 0.6

            # –û–±–Ω–æ–≤–ª—è–µ–º –≥–µ–æ–º–µ—Ç—Ä–∏—é –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º
            ghost_link.update_geometry()
            link_id = f'ghost_link_{link_suffix}'
            self.zoom_manager.register_object(ghost_link, link_id)

            # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
            self.prediction_links.append(ghost_link)

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–∑—Ä–∞—á–Ω–æ–≥–æ –ª–∏–Ω–∫–∞ {link_suffix}: {e}")

    def create_spore_at_cursor(self):
        """–°–æ–∑–¥–∞–µ—Ç —Å–ø–æ—Ä—ã –∏–ª–∏ –¥–µ—Ä–µ–≤–æ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞."""
        if self.creation_mode == 'tree':
            return self.create_tree_at_cursor()
        else:
            # ... –≤–µ—Å—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥ —Å–æ–∑–¥–∞–Ω–∏—è —Å–ø–æ—Ä ...
            return self._create_spore_at_cursor_original()
    def _create_spore_at_cursor_original(self) -> Optional[List[Spore]]:
        """
        –°–æ–∑–¥–∞–µ—Ç –ø–æ–ª–Ω—É—é —Å–µ–º—å—é —Å–ø–æ—Ä:
        - –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è —Å–ø–æ—Ä–∞ –≤ –ø–æ–∑–∏—Ü–∏–∏ –∫—É—Ä—Å–æ—Ä–∞
        - 2 –¥–æ—á–µ—Ä–Ω–∏–µ —Å–ø–æ—Ä—ã (forward min/max control)  
        - 2 —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–µ —Å–ø–æ—Ä—ã (backward min/max control)
        - –í—Å–µ —Å–æ–µ–¥–∏–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ª–∏–Ω–∫–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Ü–≤–µ—Ç–∞–º–∏
        
        Returns:
            –°–ø–∏—Å–æ–∫ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Å–ø–æ—Ä [center, forward_min, forward_max, backward_min, backward_max] –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        if not self.preview_enabled or not self.preview_spore:
            return None
            
        try:
            goal_position = self.config.get('spore', {}).get('goal_position', [0, 0])
            spore_config = self.config.get('spore', {})
            pendulum_config = self.config.get('pendulum', {})
            dt = pendulum_config.get('dt', 0.1)
            
            created_spores = []
            created_links = []
            
            # 1. –°–æ–∑–¥–∞–µ–º –¶–ï–ù–¢–†–ê–õ–¨–ù–£–Æ —Å–ø–æ—Ä—É –≤ –ø–æ–∑–∏—Ü–∏–∏ –∫—É—Ä—Å–æ—Ä–∞
            center_id = self._get_next_spore_id()
            center_spore = Spore(
                pendulum=self.pendulum,
                dt=dt,
                goal_position=goal_position,
                scale=spore_config.get('scale', 0.1),
                position=(self.preview_position_2d[0], 0.0, self.preview_position_2d[1]),
                color_manager=self.color_manager,
                config=spore_config
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—É—é —Å–ø–æ—Ä—É –≤ —Å–∏—Å—Ç–µ–º—É
            self.spore_manager.add_spore_manual(center_spore)
            self.zoom_manager.register_object(center_spore, f'manual_center_{center_id}')
            created_spores.append(center_spore)
            print(f"   ‚úì –°–æ–∑–¥–∞–Ω–∞ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è —Å–ø–æ—Ä–∞ –≤ –ø–æ–∑–∏—Ü–∏–∏ ({self.preview_position_2d[0]:.3f}, {self.preview_position_2d[1]:.3f})")
            
            # 2. –°–æ–∑–¥–∞–µ–º –î–û–ß–ï–†–ù–ò–ï —Å–ø–æ—Ä—ã (forward) + –†–û–î–ò–¢–ï–õ–¨–°–ö–ò–ï —Å–ø–æ—Ä—ã (backward)
            spore_configs = [
                # –î–æ—á–µ—Ä–Ω–∏–µ (forward)
                {'control': self.min_control, 'name': 'forward_min', 'color': 'ghost_min', 'direction': 'forward'},
                {'control': self.max_control, 'name': 'forward_max', 'color': 'ghost_max', 'direction': 'forward'},
                # –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–µ (backward) 
                {'control': self.min_control, 'name': 'backward_min', 'color': 'ghost_min', 'direction': 'backward'},
                {'control': self.max_control, 'name': 'backward_max', 'color': 'ghost_max', 'direction': 'backward'}
            ]
            
            for config in spore_configs:
                child_id = self._get_next_spore_id()
                
                # –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                if config['direction'] == 'forward':
                    # –û–±—ã—á–Ω—ã–π —à–∞–≥ –≤–ø–µ—Ä–µ–¥
                    child_pos_2d = self.pendulum.step(
                        self.preview_position_2d, 
                        config['control'], 
                        dt,
                        method='jit'
                    )
                else:  # backward
                    # –®–∞–≥ –Ω–∞–∑–∞–¥ –≤–æ –≤—Ä–µ–º–µ–Ω–∏
                    child_pos_2d = self.pendulum.step(
                        self.preview_position_2d, 
                        config['control'], 
                        -dt,
                        method='jit'
                    )
                
                # –°–æ–∑–¥–∞–µ–º —Å–ø–æ—Ä—É
                child_spore = Spore(
                    pendulum=self.pendulum,
                    dt=dt,
                    goal_position=goal_position,
                    scale=spore_config.get('scale', 0.1),
                    position=(child_pos_2d[0], 0.0, child_pos_2d[1]),
                    color_manager=self.color_manager,
                    config=spore_config
                )
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–æ—Ä—É –≤ —Å–∏—Å—Ç–µ–º—É –ë–ï–ó –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–∏–∑—Ä–∞–∫–æ–≤
                self.spore_manager.add_spore_manual(child_spore)
                self.zoom_manager.register_object(child_spore, f'manual_{config["name"]}_{child_id}')
                
                # –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                child_spore.logic.optimal_control = np.array([config['control']])
                
                created_spores.append(child_spore)
                print(f"   ‚úì –°–æ–∑–¥–∞–Ω–∞ —Å–ø–æ—Ä–∞ {config['name']} –≤ –ø–æ–∑–∏—Ü–∏–∏ ({child_pos_2d[0]:.3f}, {child_pos_2d[1]:.3f}) —Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º {config['control']:.2f}")
                
                # 3. –°–æ–∑–¥–∞–µ–º –õ–ò–ù–ö —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –∏ —Ü–≤–µ—Ç–æ–º
                link_id = self._get_next_link_id()
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–µ–ª–∫–∏
                if config['direction'] == 'forward':
                    # –í–ø–µ—Ä–µ–¥: —Ü–µ–Ω—Ç—Ä ‚Üí –¥–æ—á–µ—Ä–Ω—è—è
                    parent_spore = center_spore
                    child_link_spore = child_spore
                else:  # backward
                    # –ù–∞–∑–∞–¥: —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è ‚Üí —Ü–µ–Ω—Ç—Ä (–ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–ª–∏)
                    parent_spore = child_spore
                    child_link_spore = center_spore
                
                # –°–æ–∑–¥–∞–µ–º –ª–∏–Ω–∫
                spore_link = Link(
                    parent_spore=parent_spore,
                    child_spore=child_link_spore,
                    color_manager=self.color_manager,
                    zoom_manager=self.zoom_manager,
                    config=self.config
                )
                
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–≤–µ—Ç –ª–∏–Ω–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                if 'min' in config['name']:
                    # –°–∏–Ω–∏–π —Ü–≤–µ—Ç –¥–ª—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                    link_color_name = 'ghost_min'
                else:  # max
                    # –ö—Ä–∞—Å–Ω—ã–π —Ü–≤–µ—Ç –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è  
                    link_color_name = 'ghost_max'
                
                spore_link.color = self.color_manager.get_color('link', link_color_name)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –≥–µ–æ–º–µ—Ç—Ä–∏—é –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ª–∏–Ω–∫
                spore_link.update_geometry()
                self.zoom_manager.register_object(spore_link, f'manual_link_{config["name"]}_{link_id}')
                
                created_links.append(spore_link)
                self.created_links.append(spore_link)
                
                print(f"   ‚úì –°–æ–∑–¥–∞–Ω {link_color_name} –ª–∏–Ω–∫ –¥–ª—è {config['name']} (–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {config['direction']})")
            
            print(f"   üéØ –°–æ–∑–¥–∞–Ω–æ –í–°–ï–ì–û: {len(created_spores)} —Å–ø–æ—Ä + {len(created_links)} –ª–∏–Ω–∫–æ–≤")
            print(f"   üìä –°–æ—Å—Ç–∞–≤: 1 —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è + 2 –¥–æ—á–µ—Ä–Ω–∏–µ (forward) + 2 —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–µ (backward)")

            print(f"   üéØ –°–æ–∑–¥–∞–Ω–æ –í–°–ï–ì–û: {len(created_spores)} —Å–ø–æ—Ä + {len(created_links)} –ª–∏–Ω–∫–æ–≤")
            print(f"   üìä –°–æ—Å—Ç–∞–≤: 1 —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è + 2 –¥–æ—á–µ—Ä–Ω–∏–µ (forward) + 2 —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–µ (backward)")
            
            # üÜï –°–û–•–†–ê–ù–ï–ù–ò–ï –í –ò–°–¢–û–†–ò–Æ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —É–¥–∞–ª–µ–Ω–∏—è
            self.spore_groups_history.append(created_spores.copy())
            self.group_links_history.append(created_links.copy())
            print(f"   üìö –ì—Ä—É–ø–ø–∞ #{len(self.spore_groups_history)} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –∏—Å—Ç–æ—Ä–∏–∏")
            
            return created_spores
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ–º—å–∏ —Å–ø–æ—Ä: {e}")
            import traceback
            traceback.print_exc()
            return None


    def _destroy_preview(self) -> None:
        """–£–Ω–∏—á—Ç–æ–∂–∞–µ—Ç –ø—Ä–µ–≤—å—é —Å–ø–æ—Ä—É, –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –∏ –∏—Ö –ª–∏–Ω–∫–∏."""
        if self.preview_spore:
            self.zoom_manager.unregister_object('manual_preview')
            destroy(self.preview_spore)
            self.preview_spore = None
            
        self._clear_predictions()  # –≠—Ç–æ –æ—á–∏—Å—Ç–∏—Ç –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä—ã, –∏ –ª–∏–Ω–∫–∏
    
    def destroy(self) -> None:
        """–û—á–∏—â–∞–µ—Ç –≤—Å–µ —Ä–µ—Å—É—Ä—Å—ã –º–µ–Ω–µ–¥–∂–µ—Ä–∞."""
        self._destroy_preview()
        print("   ‚úì Manual Spore Manager —É–Ω–∏—á—Ç–æ–∂–µ–Ω") 

    def clear_all(self) -> None:
        """–û—á–∏—â–∞–µ—Ç –≤—Å–µ —Ä–µ—Å—É—Ä—Å—ã —Å–æ–∑–¥–∞–Ω–Ω—ã–µ ManualSporeManager."""
        print("üßπ ManualSporeManager: –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —Ä–µ—Å—É—Ä—Å–æ–≤...")
        
        # üÜï –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ —É–¥–∞–ª–µ–Ω–∏—è
        print(f"   üìä –õ–∏–Ω–∫–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: {len(self.created_links)}")
        
        # 1. –£–Ω–∏—á—Ç–æ–∂–∞–µ–º –≤—Å–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –ª–∏–Ω–∫–∏
        for i, link in enumerate(self.created_links):
            try:
                # üÜï –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ª–∏–Ω–∫–∞
                print(f"   üîç –õ–∏–Ω–∫ {i+1}: enabled={getattr(link, 'enabled', 'N/A')}, visible={getattr(link, 'visible', 'N/A')}")
                print(f"            parent={getattr(link, 'parent', 'N/A')}, model={getattr(link, 'model', 'N/A')}")
                
                # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã —É–¥–∞–ª–µ–Ω–∏—è
                link.enabled = False  # –û—Ç–∫–ª—é—á–∞–µ–º
                link.visible = False  # –°–∫—Ä—ã–≤–∞–µ–º
                link.parent = None    # –û—Ç–≤—è–∑—ã–≤–∞–µ–º –æ—Ç —Ä–æ–¥–∏—Ç–µ–ª—è
                
                destroy(link)  # –£–Ω–∏—á—Ç–æ–∂–∞–µ–º
                print(f"   ‚úÖ –õ–∏–Ω–∫ {i+1} –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
                
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å –ª–∏–Ω–∫–æ–º {i+1}: {e}")
        
        # üÜï –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ Ursina
        try:
            from ursina import scene, camera
            all_entities = [e for e in scene.entities if hasattr(e, 'model') and e.model]
            arrow_entities = [e for e in all_entities if 'arrow' in str(e.model).lower()]
            print(f"   üìä –í—Å–µ–≥–æ entities –≤ —Å—Ü–µ–Ω–µ: {len(scene.entities)}")
            print(f"   üèπ Entities —Å–æ —Å—Ç—Ä–µ–ª–∫–∞–º–∏: {len(arrow_entities)}")
        except Exception as e:
            print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Å—Ü–µ–Ω—ã: {e}")

        # üÜï –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –≥—Ä—É–ø–ø
        cleared_groups = len(self.spore_groups_history)
        self.spore_groups_history.clear()
        self.group_links_history.clear()
        print(f"   üìö –û—á–∏—â–µ–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è: {cleared_groups} –≥—Ä—É–ø–ø")
        
        self.created_links.clear()

    def destroy(self) -> None:
        """–û—á–∏—â–∞–µ—Ç –≤—Å–µ —Ä–µ—Å—É—Ä—Å—ã –º–µ–Ω–µ–¥–∂–µ—Ä–∞."""
        self.clear_all()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥
        print("   ‚úì Manual Spore Manager —É–Ω–∏—á—Ç–æ–∂–µ–Ω")

    def delete_last_spore_group(self) -> bool:
        """
        –£–¥–∞–ª—è–µ—Ç –ø–æ—Å–ª–µ–¥–Ω—é—é —Å–æ–∑–¥–∞–Ω–Ω—É—é –≥—Ä—É–ø–ø—É —Å–ø–æ—Ä –∏ –∏—Ö –ª–∏–Ω–∫–∏.
        
        Returns:
            True –µ—Å–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ, False –µ—Å–ª–∏ –Ω–µ—á–µ–≥–æ —É–¥–∞–ª—è—Ç—å
        """
        if not self.spore_groups_history:
            print("   ‚ö†Ô∏è –ù–µ—Ç –≥—Ä—É–ø–ø –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return False
            
        try:
            # 1. –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –≥—Ä—É–ø–ø—É –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
            last_spores = self.spore_groups_history.pop()
            last_links = self.group_links_history.pop()
            
            print(f"   üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã #{len(self.spore_groups_history) + 1}")
            print(f"   üìä –ö —É–¥–∞–ª–µ–Ω–∏—é: {len(last_spores)} —Å–ø–æ—Ä + {len(last_links)} –ª–∏–Ω–∫–æ–≤")
            
            # 2. –£–î–ê–õ–Ø–ï–ú –õ–ò–ù–ö–ò (–≤–∞–∂–Ω–æ –¥–µ–ª–∞—Ç—å –î–û —É–¥–∞–ª–µ–Ω–∏—è —Å–ø–æ—Ä)
            deleted_links = 0
            for i, link in enumerate(last_links):
                try:
                    # –î–µ—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∏–∑ zoom_manager
                    # –ù—É–∂–Ω–æ –Ω–∞–π—Ç–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–ª—é—á - –ø—Ä–æ–≤–µ—Ä—è–µ–º registered objects
                    if hasattr(self.zoom_manager, 'objects'):
                        for key, obj in list(self.zoom_manager.objects.items()):
                            if obj is link:
                                self.zoom_manager.unregister_object(key)
                                print(f"   ‚úì –õ–∏–Ω–∫ {i+1} –¥–µ—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {key}")
                                break
                    
                    # –£–¥–∞–ª—è–µ–º –∏–∑ created_links
                    if link in self.created_links:
                        self.created_links.remove(link)
                        
                    # –£–Ω–∏—á—Ç–æ–∂–∞–µ–º –æ–±—ä–µ–∫—Ç Ursina
                    destroy(link)
                    deleted_links += 1
                    print(f"   ‚úÖ –õ–∏–Ω–∫ {i+1} —É–¥–∞–ª–µ–Ω")
                    
                except Exception as e:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ª–∏–Ω–∫–∞ {i+1}: {e}")
            
            # 3. –£–î–ê–õ–Ø–ï–ú –°–ü–û–†–´  
            deleted_spores = 0
            for i, spore in enumerate(last_spores):
                try:
                    # –£–¥–∞–ª—è–µ–º –∏–∑ SporeManager
                    if hasattr(self.spore_manager, 'remove_spore'):
                        removed = self.spore_manager.remove_spore(spore)
                        if removed:
                            print(f"   ‚úì –°–ø–æ—Ä–∞ {i+1} —É–¥–∞–ª–µ–Ω–∞ –∏–∑ SporeManager")
                    else:
                        # Fallback –µ—Å–ª–∏ remove_spore –µ—â–µ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω
                        if hasattr(self.spore_manager, 'objects') and spore in self.spore_manager.objects:
                            self.spore_manager.objects.remove(spore)
                            print(f"   ‚úì –°–ø–æ—Ä–∞ {i+1} —É–¥–∞–ª–µ–Ω–∞ –∏–∑ objects (fallback)")
                    
                    # –î–µ—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∏–∑ zoom_manager
                    if hasattr(self.zoom_manager, 'objects'):
                        for key, obj in list(self.zoom_manager.objects.items()):
                            if obj is spore:
                                self.zoom_manager.unregister_object(key)
                                print(f"   ‚úì –°–ø–æ—Ä–∞ {i+1} –¥–µ—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞: {key}")
                                break
                    
                    # –£–Ω–∏—á—Ç–æ–∂–∞–µ–º –æ–±—ä–µ–∫—Ç Ursina
                    destroy(spore)
                    deleted_spores += 1
                    print(f"   ‚úÖ –°–ø–æ—Ä–∞ {i+1} —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∞")
                    
                except Exception as e:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–ø–æ—Ä—ã {i+1}: {e}")
            
            # 4. –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê
            print(f"   üéØ –£–î–ê–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û:")
            print(f"      üìä –°–ø–æ—Ä —É–¥–∞–ª–µ–Ω–æ: {deleted_spores}/{len(last_spores)}")
            print(f"      üîó –õ–∏–Ω–∫–æ–≤ —É–¥–∞–ª–µ–Ω–æ: {deleted_links}/{len(last_links)}")
            print(f"      üìö –ì—Ä—É–ø–ø –æ—Å—Ç–∞–ª–æ—Å—å –≤ –∏—Å—Ç–æ—Ä–∏–∏: {len(self.spore_groups_history)}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —É–¥–∞–ª–µ–Ω–∏–µ –±—ã–ª–æ —É—Å–ø–µ—à–Ω—ã–º
            if deleted_spores == len(last_spores) and deleted_links == len(last_links):
                print(f"   ‚úÖ –ì—Ä—É–ø–ø–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!")
                return True
            else:
                print(f"   ‚ö†Ô∏è –£–¥–∞–ª–µ–Ω–∏–µ —á–∞—Å—Ç–∏—á–Ω–æ –Ω–µ—É—Å–ø–µ—à–Ω–æ")
                return False
                
        except Exception as e:
            print(f"   ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã: {e}")
            import traceback
            traceback.print_exc()
            return False
        
    def get_groups_history_stats(self) -> dict:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø.
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –≥—Ä—É–ø–ø, —Å–ø–æ—Ä –∏ –ª–∏–Ω–∫–æ–≤ –≤ –∏—Å—Ç–æ—Ä–∏–∏
        """
        total_groups = len(self.spore_groups_history)
        total_spores = sum(len(group) for group in self.spore_groups_history)
        total_links = sum(len(links) for links in self.group_links_history)
        
        return {
            'total_groups': total_groups,
            'total_spores': total_spores,
            'total_links': total_links,
            'can_delete': total_groups > 0
        }

    def print_groups_history_stats(self) -> None:
        """–í—ã–≤–æ–¥–∏—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å—Ç–æ—Ä–∏–∏ –≥—Ä—É–ø–ø."""
        stats = self.get_groups_history_stats()
        
        print(f"\nüìö –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ò–°–¢–û–†–ò–ò –ì–†–£–ü–ü:")
        print(f"   üî¢ –í—Å–µ–≥–æ –≥—Ä—É–ø–ø: {stats['total_groups']}")
        print(f"   üß¨ –í—Å–µ–≥–æ —Å–ø–æ—Ä: {stats['total_spores']}")
        print(f"   üîó –í—Å–µ–≥–æ –ª–∏–Ω–∫–æ–≤: {stats['total_links']}")
        print(f"   üóëÔ∏è –ú–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å: {'–î–∞' if stats['can_delete'] else '–ù–µ—Ç'}")
        
        if stats['total_groups'] > 0:
            print(f"   üìã –ü–æ—Å–ª–µ–¥–Ω—è—è –≥—Ä—É–ø–ø–∞: {len(self.spore_groups_history[-1])} —Å–ø–æ—Ä + {len(self.group_links_history[-1])} –ª–∏–Ω–∫–æ–≤")
        print("========================")

    def _get_current_dt(self) -> float:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π dt –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."""
        return self.config.get('pendulum', {}).get('dt', 0.1)
