"""
–ú–æ–¥—É–ª—å –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–π —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ —Å—Ö–æ–∂–¥–µ–Ω–∏–µ–º.
–§–∞–π–ª: spores/v14_back/src/logic/control_tree.py
"""

import numpy as np
from typing import Dict, List, Tuple, Optional, Any
from dataclasses import dataclass, field


@dataclass
class Trajectory:
    """–¢—Ä–∞–µ–∫—Ç–æ—Ä–∏—è –∏–∑ –¥–≤—É—Ö —à–∞–≥–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è."""
    id: int
    sequence: List[Tuple[float, float]]  # [(u1, dt1), (u2, dt2)]
    points: List[np.ndarray]  # [–Ω–∞—á–∞–ª—å–Ω–∞—è, –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–∞—è, –∫–æ–Ω–µ—á–Ω–∞—è]
    convergence_group: int  # –ù–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã —Å—Ö–æ–∂–¥–µ–Ω–∏—è (0-3)
    
    def __repr__(self):
        seq_str = " ‚Üí ".join([f"({u:+.0f}u, {dt:+.0f}T)" for u, dt in self.sequence])
        return f"Traj{self.id}: {seq_str}"


class ControlTreeBuilder:
    """
    –ü–æ—Å—Ç—Ä–æ–∏—Ç–µ–ª—å —Å–∏—Å—Ç–µ–º—ã —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–π —Å–æ —Å—Ö–æ–∂–¥–µ–Ω–∏–µ–º.
    
    –°–æ–∑–¥–∞–µ—Ç 8 —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–π –¥–ª–∏–Ω—ã 2, –≥–¥–µ –ø–∞—Ä—ã —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–π —Å—Ö–æ–¥—è—Ç—Å—è –≤ 4 —Ç–æ—á–∫–∏.
    
    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ dt_vector:
    - dt[0], dt[1] - –¥–ª—è –≥—Ä—É–ø–ø—ã 0 (—Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ 0-1)
    - dt[2], dt[3] - –¥–ª—è –≥—Ä—É–ø–ø—ã 1 (—Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ 2-3)
    - dt[4], dt[5] - –¥–ª—è –≥—Ä—É–ø–ø—ã 2 (—Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ 4-5)
    - dt[6], dt[7] - –¥–ª—è –≥—Ä—É–ø–ø—ã 3 (—Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ 6-7)
    
    –í –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø–µ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ dt –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ –¥–ª—è —Å—Ö–æ–∂–¥–µ–Ω–∏—è.
    """
    
    def __init__(self, pendulum_system, dt_vector: Optional[np.ndarray] = None):
        """
        Args:
            pendulum_system: –°–∏—Å—Ç–µ–º–∞ –º–∞—è—Ç–Ω–∏–∫–∞ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –¥–∏–Ω–∞–º–∏–∫–∏
            dt_vector: –í–µ–∫—Ç–æ—Ä –∏–∑ 8 –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —à–∞–≥–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é np.ones(8) * 0.1)
        """
        self.pendulum = pendulum_system
        
        # –í–µ–∫—Ç–æ—Ä –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —à–∞–≥–æ–≤ –¥–ª—è 8 —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–π
        if dt_vector is None:
            self.dt_vector = np.ones(8) * 0.05
        else:
            assert len(dt_vector) == 8, "dt_vector –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ä–æ–≤–Ω–æ 8 —ç–ª–µ–º–µ–Ω—Ç–æ–≤"
            self.dt_vector = np.array(dt_vector)
        
        # –ü–æ–ª—É—á–∞–µ–º –≥—Ä–∞–Ω–∏—Ü—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        control_bounds = self.pendulum.get_control_bounds()
        self.u_max = control_bounds[1]  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ max, min = -max
        
        # –•—Ä–∞–Ω–∏–ª–∏—â–µ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–π
        self.trajectories: List[Trajectory] = []
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º 8 –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π —É–ø—Ä–∞–≤–ª–µ–Ω–∏–π (u –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω –Ω–∞ ¬±1)
        # –ö–∞–∂–¥–∞—è –ø–∞—Ä–∞ –¥–æ–ª–∂–Ω–∞ —Å—Ö–æ–¥–∏—Ç—å—Å—è –≤ –æ–¥–Ω—É —Ç–æ—á–∫—É
        self.control_sequences = [
            # –ì—Ä—É–ø–ø–∞ 0: —Å—Ö–æ–¥—è—Ç—Å—è –≤ —Ç–æ—á–∫—É —á–µ—Ä–µ–∑ forward-forward
            [(1, 1), (-1, 1)],   # –¢—Ä–∞–µ–∫—Ç–æ—Ä–∏—è 0: (+u, +T) ‚Üí (-u, +T)
            [(-1, 1), (1, 1)],   # –¢—Ä–∞–µ–∫—Ç–æ—Ä–∏—è 1: (-u, +T) ‚Üí (+u, +T)
            
            # –ì—Ä—É–ø–ø–∞ 1: —Å—Ö–æ–¥—è—Ç—Å—è —á–µ—Ä–µ–∑ forward-backward 
            [(-1, 1), (1, -1)],  # –¢—Ä–∞–µ–∫—Ç–æ—Ä–∏—è 2: (-u, +T) ‚Üí (+u, -T)
            [(1, -1), (-1, 1)],  # –¢—Ä–∞–µ–∫—Ç–æ—Ä–∏—è 3: (+u, -T) ‚Üí (-u, +T)
            
            # –ì—Ä—É–ø–ø–∞ 2: —Å—Ö–æ–¥—è—Ç—Å—è —á–µ—Ä–µ–∑ backward-backward
            [(1, -1), (-1, -1)], # –¢—Ä–∞–µ–∫—Ç–æ—Ä–∏—è 4: (+u, -T) ‚Üí (-u, -T)
            [(-1, -1), (1, -1)], # –¢—Ä–∞–µ–∫—Ç–æ—Ä–∏—è 5: (-u, -T) ‚Üí (+u, -T)
            
            # –ì—Ä—É–ø–ø–∞ 3: —Å—Ö–æ–¥—è—Ç—Å—è —á–µ—Ä–µ–∑ forward-backward –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ
            [(1, 1), (-1, -1)],  # –¢—Ä–∞–µ–∫—Ç–æ—Ä–∏—è 6: (+u, +T) ‚Üí (-u, -T)
            [(-1, -1), (1, 1)],  # –¢—Ä–∞–µ–∫—Ç–æ—Ä–∏—è 7: (-u, -T) ‚Üí (+u, +T)
        ]
        
        # –ì—Ä—É–ø–ø—ã —Å—Ö–æ–∂–¥–µ–Ω–∏—è (–∫–∞–∫–∏–µ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ –¥–æ–ª–∂–Ω—ã –ø—Ä–∏–π—Ç–∏ –≤ –æ–¥–Ω—É —Ç–æ—á–∫—É)
        self.convergence_groups = [
            [0, 1],  # –ì—Ä—É–ø–ø–∞ 0
            [2, 3],  # –ì—Ä—É–ø–ø–∞ 1  
            [4, 5],  # –ì—Ä—É–ø–ø–∞ 2
            [6, 7],  # –ì—Ä—É–ø–ø–∞ 3
        ]
    
    def _apply_control(self, state_2d: np.ndarray, control: float, dt: float) -> np.ndarray:
        """
        –ü—Ä–∏–º–µ–Ω—è–µ—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é.
        
        Args:
            state_2d: –¢–µ–∫—É—â–µ–µ 2D —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            control: –£–ø—Ä–∞–≤–ª—è—é—â–µ–µ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏–µ (—É–∂–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ)
            dt: –í—Ä–µ–º–µ–Ω–Ω–æ–π —à–∞–≥ (–º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º)
            
        Returns:
            –ù–æ–≤–æ–µ 2D —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        """
        return self.pendulum.scipy_rk45_step(state_2d, control, dt)
    
    def build_tree(self, initial_position_2d: np.ndarray, show: bool = False) -> Dict[str, Any]:
        """
        –°—Ç—Ä–æ–∏—Ç –≤—Å–µ 8 —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–π –∏–∑ –Ω–∞—á–∞–ª—å–Ω–æ–π —Ç–æ—á–∫–∏.
        
        Args:
            initial_position_2d: –ù–∞—á–∞–ª—å–Ω–∞—è 2D –ø–æ–∑–∏—Ü–∏—è
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—è–º–∏ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å—Ö–æ–∂–¥–µ–Ω–∏–∏
        """
        # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏
        self.trajectories.clear()
        
        if show:
            print(f"üöÄ –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ 8 —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–π –∏–∑ —Ç–æ—á–∫–∏ ({initial_position_2d[0]:.3f}, {initial_position_2d[1]:.3f})")
            print("=" * 60)
        
        # –ú–∞–ø–ø–∏–Ω–≥: –∫–∞–∫–æ–π —ç–ª–µ–º–µ–Ω—Ç dt_vector –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–æ—Ä—Ç–µ–∂–∞
        # –ì—Ä—É–ø–ø–∞ 0: —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ 0-1, –∏—Å–ø–æ–ª—å–∑—É—é—Ç dt[0-1]
        # –ì—Ä—É–ø–ø–∞ 1: —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ 2-3, –∏—Å–ø–æ–ª—å–∑—É—é—Ç dt[2-3]  
        # –ì—Ä—É–ø–ø–∞ 2: —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ 4-5, –∏—Å–ø–æ–ª—å–∑—É—é—Ç dt[4-5]
        # –ì—Ä—É–ø–ø–∞ 3: —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ 6-7, –∏—Å–ø–æ–ª—å–∑—É—é—Ç dt[6-7]
        dt_mapping = {
            0: [0, 1],  # –¢—Ä–∞–µ–∫—Ç–æ—Ä–∏—è 0: dt[0] –¥–ª—è 1-–≥–æ —à–∞–≥–∞, dt[1] –¥–ª—è 2-–≥–æ
            1: [1, 0],  # –¢—Ä–∞–µ–∫—Ç–æ—Ä–∏—è 1: dt[1] –¥–ª—è 1-–≥–æ —à–∞–≥–∞, dt[0] –¥–ª—è 2-–≥–æ (–æ–±—Ä–∞—Ç–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫)
            2: [2, 3],  # –¢—Ä–∞–µ–∫—Ç–æ—Ä–∏—è 2: dt[2] –¥–ª—è 1-–≥–æ —à–∞–≥–∞, dt[3] –¥–ª—è 2-–≥–æ
            3: [3, 2],  # –¢—Ä–∞–µ–∫—Ç–æ—Ä–∏—è 3: dt[3] –¥–ª—è 1-–≥–æ —à–∞–≥–∞, dt[2] –¥–ª—è 2-–≥–æ (–æ–±—Ä–∞—Ç–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫)
            4: [4, 5],  # –¢—Ä–∞–µ–∫—Ç–æ—Ä–∏—è 4: dt[4] –¥–ª—è 1-–≥–æ —à–∞–≥–∞, dt[5] –¥–ª—è 2-–≥–æ
            5: [5, 4],  # –¢—Ä–∞–µ–∫—Ç–æ—Ä–∏—è 5: dt[5] –¥–ª—è 1-–≥–æ —à–∞–≥–∞, dt[4] –¥–ª—è 2-–≥–æ (–æ–±—Ä–∞—Ç–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫)
            6: [6, 7],  # –¢—Ä–∞–µ–∫—Ç–æ—Ä–∏—è 6: dt[6] –¥–ª—è 1-–≥–æ —à–∞–≥–∞, dt[7] –¥–ª—è 2-–≥–æ
            7: [7, 6],  # –¢—Ä–∞–µ–∫—Ç–æ—Ä–∏—è 7: dt[7] –¥–ª—è 1-–≥–æ —à–∞–≥–∞, dt[6] –¥–ª—è 2-–≥–æ (–æ–±—Ä–∞—Ç–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫)
        }
        
        # –°—Ç—Ä–æ–∏–º –∫–∞–∂–¥—É—é —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—é
        for traj_id in range(8):
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–π –¥–ª—è —ç—Ç–æ–π —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏
            control_seq = self.control_sequences[traj_id]
            dt_indices = dt_mapping[traj_id]
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥—Ä—É–ø–ø—É —Å—Ö–æ–∂–¥–µ–Ω–∏—è
            convergence_group = traj_id // 2  # 0-1 ‚Üí 0, 2-3 ‚Üí 1, 4-5 ‚Üí 2, 6-7 ‚Üí 3
            
            # –í—ã—á–∏—Å–ª—è–µ–º —Ç–æ—á–∫–∏ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏
            points = [initial_position_2d.copy()]  # –ù–∞—á–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞
            current_pos = initial_position_2d.copy()
            
            # –°—Ç—Ä–æ–∏–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–º–∏ dt –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —à–∞–≥–∞
            actual_sequence = []
            for step_idx, (u_sign, dt_sign) in enumerate(control_seq):
                # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
                u = self.u_max * u_sign
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π dt –∏–∑ –≤–µ–∫—Ç–æ—Ä–∞
                dt = self.dt_vector[dt_indices[step_idx]]
                step_dt = dt * dt_sign  # dt_sign –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
                
                # –ü—Ä–∏–º–µ–Ω—è–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
                next_pos = self._apply_control(current_pos, u, step_dt)
                points.append(next_pos.copy())
                current_pos = next_pos
                
                actual_sequence.append((u, step_dt))
            
            # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏
            trajectory = Trajectory(
                id=traj_id,
                sequence=actual_sequence,
                points=points,
                convergence_group=convergence_group
            )
            
            self.trajectories.append(trajectory)
            
            if show:
            # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                seq_str = " ‚Üí ".join([f"({u:+.1f}, {dt:+.3f})" for u, dt in actual_sequence])
                dt_idx_str = f"dt[{dt_indices[0]}], dt[{dt_indices[1]}]"
                print(f"–¢—Ä–∞–µ–∫—Ç–æ—Ä–∏—è {traj_id} (–≥—Ä—É–ø–ø–∞ {convergence_group}, {dt_idx_str}): {seq_str}")
                print(f"  –¢–æ—á–∫–∏: –Ω–∞—á–∞–ª–æ ‚Üí ({points[1][0]:.3f}, {points[1][1]:.3f}) ‚Üí "
                    f"({points[2][0]:.3f}, {points[2][1]:.3f})")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ö–æ–∂–¥–µ–Ω–∏–µ
        convergence_info = self._analyze_convergence(show)
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–µ–π
        nodes, edges = self._create_graph_structure()
        
        return {
            'trajectories': self.trajectories,
            'convergence_info': convergence_info,
            'dt_vector': self.dt_vector.copy(),
            'nodes': nodes,  # –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–µ–π
            'edges': edges,   # –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–µ–π
        }
    
    def _analyze_convergence(self, show: bool = False) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ —Å—Ö–æ–∂–¥–µ–Ω–∏—è —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–π."""
        if show:
            print("\n" + "=" * 60)
            print("üìä –ê–ù–ê–õ–ò–ó –°–•–û–ñ–î–ï–ù–ò–Ø")
            print("=" * 60)
        
        convergence_quality = []
        
        for group_id, traj_indices in enumerate(self.convergence_groups):
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω–µ—á–Ω—ã–µ —Ç–æ—á–∫–∏ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–π –≤ –≥—Ä—É–ø–ø–µ
            endpoints = [self.trajectories[i].points[-1] for i in traj_indices]
            
            # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω—é—é —Ç–æ—á–∫—É –∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
            mean_point = np.mean(endpoints, axis=0)
            distances = [np.linalg.norm(p - mean_point) for p in endpoints]
            max_distance = max(distances)
            
            if show:
                print(f"\n–ì—Ä—É–ø–ø–∞ {group_id} (—Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ {traj_indices}):")
            for i, idx in enumerate(traj_indices):
                traj = self.trajectories[idx]
                endpoint = endpoints[i]

                if show:
                    print(f"  –¢—Ä–∞–µ–∫—Ç–æ—Ä–∏—è {idx}: –∫–æ–Ω–µ—á–Ω–∞—è —Ç–æ—á–∫–∞ ({endpoint[0]:.4f}, {endpoint[1]:.4f})")
            if show:
                print(f"  –°—Ä–µ–¥–Ω—è—è —Ç–æ—á–∫–∞: ({mean_point[0]:.4f}, {mean_point[1]:.4f})")
                print(f"  –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {max_distance:.6f}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ —Å—Ö–æ–∂–¥–µ–Ω–∏—è
            converged = max_distance < 1e-4  # –ü–æ—Ä–æ–≥ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ö–æ–∂–¥–µ–Ω–∏—è
            status = "‚úÖ –°–û–®–õ–ò–°–¨" if converged else "‚ö†Ô∏è –ù–ï –°–û–®–õ–ò–°–¨"
            if show:
                print(f"  –°—Ç–∞—Ç—É—Å: {status}")
            
            convergence_quality.append({
                'group_id': group_id,
                'trajectories': traj_indices,
                'mean_point': mean_point,
                'max_deviation': max_distance,
                'converged': converged,
                'endpoints': endpoints
            })
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        num_converged = sum(1 for g in convergence_quality if g['converged'])
        if show:
            print(f"\nüìà –ò–¢–û–ì–û: {num_converged}/4 –≥—Ä—É–ø–ø —Å–æ—à–ª–∏—Å—å")
        
        return {
            'groups': convergence_quality,
            'num_converged': num_converged,
            'total_groups': len(self.convergence_groups)
        }
    
    def _create_graph_structure(self) -> Tuple[Dict, List]:
        """
        –°–æ–∑–¥–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É —É–∑–ª–æ–≤ –∏ —Ä—ë–±–µ—Ä –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–µ–π.
        """
        from dataclasses import dataclass
        
        @dataclass
        class SimpleNode:
            id: str
            level: int
            position_2d: np.ndarray
            
        @dataclass  
        class SimpleEdge:
            parent_id: str
            child_id: str
            control: float
            dt: float
            is_forward: bool
            control_type: str
        
        nodes = {}
        edges = []
        
        # –ö–æ—Ä–Ω–µ–≤–æ–π —É–∑–µ–ª
        nodes['root'] = SimpleNode('root', 0, self.trajectories[0].points[0])
        
        # –î–ª—è –∫–∞–∂–¥–æ–π —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ —Å–æ–∑–¥–∞–µ–º —É–∑–ª—ã –∏ —Ä—ë–±—Ä–∞
        for traj in self.trajectories:
            # –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π —É–∑–µ–ª
            mid_id = f'mid_{traj.id}'
            nodes[mid_id] = SimpleNode(mid_id, 1, traj.points[1])
            
            # –ö–æ–Ω–µ—á–Ω—ã–π —É–∑–µ–ª
            end_id = f'end_{traj.id}'
            nodes[end_id] = SimpleNode(end_id, 2, traj.points[2])
            
            # –†–µ–±—Ä–æ –æ—Ç –∫–æ—Ä–Ω—è –∫ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–º—É —É–∑–ª—É
            u1, dt1 = traj.sequence[0]
            edges.append(SimpleEdge(
                'root', mid_id, u1, dt1,
                is_forward=(dt1 > 0),
                control_type='max' if u1 > 0 else 'min'
            ))
            
            # –†–µ–±—Ä–æ –æ—Ç –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–≥–æ –∫ –∫–æ–Ω–µ—á–Ω–æ–º—É —É–∑–ª—É
            u2, dt2 = traj.sequence[1]
            edges.append(SimpleEdge(
                mid_id, end_id, u2, dt2,
                is_forward=(dt2 > 0),
                control_type='max' if u2 > 0 else 'min'
            ))
        
        return nodes, edges
    
    def get_convergent_endpoints(self) -> Dict[int, np.ndarray]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ä–µ–¥–Ω–∏–µ —Ç–æ—á–∫–∏ —Å—Ö–æ–∂–¥–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã.
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å {group_id: mean_endpoint}
        """
        result = {}
        for group_id, traj_indices in enumerate(self.convergence_groups):
            endpoints = [self.trajectories[i].points[-1] for i in traj_indices]
            result[group_id] = np.mean(endpoints, axis=0)
        return result
    
    def update_dt_vector(self, new_dt_vector: np.ndarray):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –≤–µ–∫—Ç–æ—Ä –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —à–∞–≥–æ–≤."""
        assert len(new_dt_vector) == 8, "new_dt_vector –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ä–æ–≤–Ω–æ 8 —ç–ª–µ–º–µ–Ω—Ç–æ–≤"
        self.dt_vector = np.array(new_dt_vector)
        print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω dt_vector: {self.dt_vector}")
    
    def get_trajectory_by_id(self, traj_id: int) -> Optional[Trajectory]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—é –ø–æ ID."""
        if 0 <= traj_id < len(self.trajectories):
            return self.trajectories[traj_id]
        return None
    
    def print_summary(self):
        """–í—ã–≤–æ–¥–∏—Ç –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É –æ –ø–æ—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—è—Ö."""
        print("\nüìã –°–í–û–î–ö–ê –ü–û –¢–†–ê–ï–ö–¢–û–†–ò–Ø–ú")
        print("=" * 60)
        
        for group_id, traj_indices in enumerate(self.convergence_groups):
            print(f"\n–ì—Ä—É–ø–ø–∞ —Å—Ö–æ–∂–¥–µ–Ω–∏—è {group_id}:")
            for idx in traj_indices:
                traj = self.trajectories[idx]
                print(f"  {traj}")
        
        print(f"\n–í–µ–∫—Ç–æ—Ä dt: {self.dt_vector}")