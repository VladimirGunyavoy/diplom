#!/usr/bin/env python3
"""
–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä CSV –º–∞—Ç—Ä–∏—Ü—ã —Å–≤—è–∑–µ–π –º–µ–∂–¥—É —Å–ø–æ—Ä–∞–º–∏ –∏–∑ JSON –¥–∞–Ω–Ω—ã—Ö.

–ü–†–ê–í–ò–õ–¨–ù–ê–Ø –õ–û–ì–ò–ö–ê:
- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (control) –æ—Å—Ç–∞–µ—Ç—Å—è —Ç–µ–º –∂–µ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
- –í—Ä–µ–º—è (dt) –∏–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏

–ü—Ä–∏–º–µ—Ä:
- –ü—Ä—è–º–∞—è —Å–≤—è–∑—å A‚ÜíB: control=+2.0, dt=+0.05
- –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å B‚ÜíA: control=+2.0, dt=-0.05
"""

import json
import csv
import os
from typing import Dict, List, Tuple, Optional


def load_json_data(json_path: str) -> Optional[dict]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON —Ñ–∞–π–ª–∞."""
    try:
        with open(json_path, 'r', encoding='utf-8') as f:
            return json.load(f)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ JSON: {e}")
        return None


def extract_spores_info(graph_data: dict) -> List[Dict]:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ø–æ—Ä–∞—Ö."""
    spores = graph_data.get('spores', [])
    print(f"üìä –ù–∞–π–¥–µ–Ω–æ —Å–ø–æ—Ä: {len(spores)}")
    return spores


def extract_links_info(graph_data: dict) -> List[Dict]:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–≤—è–∑—è—Ö."""
    links = graph_data.get('links', [])
    print(f"üîó –ù–∞–π–¥–µ–Ω–æ —Å–≤—è–∑–µ–π: {len(links)}")
    return links


def build_links_matrix(spores: List[Dict], links: List[Dict]) -> Tuple[List[str], List[List[str]]]:
    """
    –°—Ç—Ä–æ–∏—Ç –º–∞—Ç—Ä–∏—Ü—É —Å–≤—è–∑–µ–π –º–µ–∂–¥—É —Å–ø–æ—Ä–∞–º–∏.
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –í–°–ï —Å–≤—è–∑–∏ + –∏—Ö –¥—É–±–ª–∏–∫–∞—Ç—ã —Å –æ–±—Ä–∞—Ç–Ω—ã–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º.
    
    –õ–û–ì–ò–ö–ê:
    - –ë–µ—Ä–µ–º —Å–≤—è–∑–∏ –∏–∑ JSON
    - –î–ª—è –∫–∞–∂–¥–æ–π —Å–≤—è–∑–∏ —Å–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é + –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å –æ–±—Ä–∞—Ç–Ω—ã–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º
    - –û—Å–Ω–æ–≤–Ω–∞—è: –∏—Å—Ö–æ–¥–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ, –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
    - –î—É–±–ª–∏–∫–∞—Ç: –æ–±—Ä–∞—Ç–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ, –∏–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
    
    Returns:
        Tuple[List[str], List[List[str]]]: (–∑–∞–≥–æ–ª–æ–≤–∫–∏, –º–∞—Ç—Ä–∏—Ü–∞)
    """
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∏–Ω–¥–µ–∫—Å—ã —Å–ø–æ—Ä –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º
    spore_indices = sorted([spore['index'] for spore in spores])
    max_index = max(spore_indices) if spore_indices else 0
    
    print(f"üìà –ò–Ω–¥–µ–∫—Å—ã —Å–ø–æ—Ä: {spore_indices}")
    print(f"üìà –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å: {max_index}")
    
    # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Å–≤—è–∑–µ–π: (from_index, to_index) -> link_info
    links_dict = {}
    
    for link in links:
        parent_spore_id = link.get('parent_spore_id')
        child_spore_id = link.get('child_spore_id')
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º parent_spore_id –∏ child_spore_id –∫–∞–∫ –∏–Ω–¥–µ–∫—Å—ã –Ω–∞–ø—Ä—è–º—É—é
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–Ω–¥–µ–∫—Å—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ —Å–ø–∏—Å–∫–µ —Å–ø–æ—Ä
        parent_index = None
        child_index = None
        
        # –ò—â–µ–º —Å–ø–æ—Ä—ã —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º–∏ –∏–Ω–¥–µ–∫—Å–∞–º–∏
        spore_indices_set = {spore['index'] for spore in spores}
        
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è
        # –í–∞—Ä–∏–∞–Ω—Ç 1: parent_spore_id –∫–∞–∫ index –Ω–∞–ø—Ä—è–º—É—é
        if (parent_spore_id - 1) in spore_indices_set:
            parent_index = parent_spore_id - 1
        # –í–∞—Ä–∏–∞–Ω—Ç 2: –∏—â–µ–º –ø–æ spore_id
        else:
            for spore in spores:
                if spore['spore_id'] == str(parent_spore_id):
                    parent_index = spore['index']
                    break
        
        # –¢–æ –∂–µ –¥–ª—è child_spore_id
        if (child_spore_id - 1) in spore_indices_set:
            child_index = child_spore_id - 1
        else:
            for spore in spores:
                if spore['spore_id'] == str(child_spore_id):
                    child_index = spore['index']
                    break
        
        if parent_index is not None and child_index is not None:
            control = link.get('control', 0)
            dt = link.get('dt', 0)
            dt_sign = link.get('dt_sign', 1)
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º raw_dt –∏–∑ JSON, –Ω–æ –∏–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –æ–±—Ä–∞—Ç–Ω—ã—Ö —Å–≤—è–∑–µ–π
            raw_dt = link.get('raw_dt', dt * dt_sign)
            direction = link.get('direction', 'forward')
            
            # –î–ª—è –æ–±—Ä–∞—Ç–Ω—ã—Ö —Å–≤—è–∑–µ–π –∏–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∑–Ω–∞–∫ –≤—Ä–µ–º–µ–Ω–∏
            if direction == 'backward':
                dt_value = -raw_dt  # –ò–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
            else:
                dt_value = raw_dt
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            control_str = f"+{control}" if control >= 0 else str(control)
            
            # ‚úÖ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –í–°–ï —Å–≤—è–∑–∏ –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
            # –û—Å–Ω–æ–≤–Ω–∞—è —Å–≤—è–∑—å: parent ‚Üí child (–≤—Ä–µ–º—è –∏–∑ JSON)
            dt_str = f"{dt_value:+.3f}"
            link_text = f"{control_str} {dt_str}"
            links_dict[(parent_index, child_index)] = link_text
            
            print(f"üîó –°–≤—è–∑—å: {parent_index+1} ‚Üí {child_index+1} = '{link_text}' (–≤—Ä–µ–º—è: {dt_value:+.3f}) [—Å—Ç—Ä–æ–∫–∞ {parent_index+1}, —Å—Ç–æ–ª–±–µ—Ü {child_index+1}]")
            
            # üîÑ –î–æ–±–∞–≤–ª—è–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å–≤—è–∑—å —Å –æ–±—Ä–∞—Ç–Ω—ã–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º, –∏–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Ç–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–µ–º
            reverse_dt_str = f"{-dt_value:+.3f}"
            reverse_link_text = f"{control_str} {reverse_dt_str}"
            links_dict[(child_index, parent_index)] = reverse_link_text
            
            print(f"üîÑ –î—É–±–ª–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ: {child_index+1} ‚Üí {parent_index+1} = '{reverse_link_text}' (control: {control}, –≤—Ä–µ–º—è: {-dt_value:+.3f}) [—Å—Ç—Ä–æ–∫–∞ {child_index+1}, —Å—Ç–æ–ª–±–µ—Ü {parent_index+1}]")
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ (–∏–Ω–¥–µ–∫—Å—ã + 1 –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è)
    headers = [''] + [str(idx + 1) for idx in spore_indices]
    
    # –°–æ–∑–¥–∞–µ–º –º–∞—Ç—Ä–∏—Ü—É
    matrix = []
    for row_idx in spore_indices:
        row = [str(row_idx + 1)]  # –ü–µ—Ä–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü - –∏–Ω–¥–µ–∫—Å —Å—Ç—Ä–æ–∫–∏
        
        for col_idx in spore_indices:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Å–≤—è–∑—å –æ—Ç row_idx –∫ col_idx
            link_text = links_dict.get((row_idx, col_idx), '')
            row.append(link_text)
        
        matrix.append(row)
    
    return headers, matrix


def save_csv_matrix(headers: List[str], matrix: List[List[str]], output_path: str):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –º–∞—Ç—Ä–∏—Ü—É –≤ CSV —Ñ–∞–π–ª."""
    try:
        with open(output_path, 'w', newline='', encoding='utf-8') as csvfile:
            writer = csv.writer(csvfile)
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
            writer.writerow(headers)
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –º–∞—Ç—Ä–∏—Ü—ã
            writer.writerows(matrix)
        
        print(f"‚úÖ CSV –º–∞—Ç—Ä–∏—Ü–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {output_path}")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è CSV: {e}")
        return False


def print_matrix_preview(headers: List[str], matrix: List[List[str]]):
    """–í—ã–≤–æ–¥–∏—Ç –ø—Ä–µ–≤—å—é –º–∞—Ç—Ä–∏—Ü—ã –≤ –∫–æ–Ω—Å–æ–ª—å."""
    print("\nüìã –ü–†–ï–í–¨–Æ CSV –ú–ê–¢–†–ò–¶–´:")
    print("=" * 50)
    
    # –í—ã–≤–æ–¥–∏–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
    header_line = " | ".join(f"{h:>8}" for h in headers)
    print(header_line)
    print("-" * len(header_line))
    
    # –í—ã–≤–æ–¥–∏–º —Å—Ç—Ä–æ–∫–∏ (–æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è –ø—Ä–µ–≤—å—é)
    for i, row in enumerate(matrix[:10]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10 —Å—Ç—Ä–æ–∫
        row_line = " | ".join(f"{cell:>8}" for cell in row)
        print(row_line)
        
        if i >= 9 and len(matrix) > 10:
            print(f"... (–µ—â–µ {len(matrix) - 10} —Å—Ç—Ä–æ–∫)")
            break


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    print("üöÄ –ì–ï–ù–ï–†–ê–¢–û–† CSV –ú–ê–¢–†–ò–¶–´ –°–í–Ø–ó–ï–ô –°–ü–û–†")
    print("=" * 60)
    print("‚úÖ –õ–û–ì–ò–ö–ê: –í—Å–µ —Å–≤—è–∑–∏ + –¥—É–±–ª–∏–∫–∞—Ç—ã, –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏")
    print("   - –°—Ç—Ä–æ–∫–∏ = –∏—Å—Ö–æ–¥–Ω—ã–µ —Å–ø–æ—Ä—ã (–æ—Ç–∫—É–¥–∞)")  
    print("   - –°—Ç–æ–ª–±—Ü—ã = —Ü–µ–ª–µ–≤—ã–µ —Å–ø–æ—Ä—ã (–∫—É–¥–∞)")
    print("   - –Ø—á–µ–π–∫–∞ [i,j] = —Å–≤—è–∑—å i ‚Üí j")
    print("=" * 60)
    
    # –ü—É—Ç—å –∫ JSON —Ñ–∞–π–ª—É
    json_path = "spores/v16_picker/scripts/run/buffer/real_graph_latest.json"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
    if not os.path.exists(json_path):
        print(f"‚ùå JSON —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {json_path}")
        return
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º JSON –¥–∞–Ω–Ω—ã–µ
    print(f"üìÅ –ó–∞–≥—Ä—É–∂–∞–µ–º: {json_path}")
    graph_data = load_json_data(json_path)
    if not graph_data:
        return
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    spores = extract_spores_info(graph_data)
    links = extract_links_info(graph_data)
    
    if not spores:
        print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å–ø–æ—Ä–∞—Ö")
        return
    
    # –°—Ç—Ä–æ–∏–º –º–∞—Ç—Ä–∏—Ü—É
    print("\nüîß –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü—ã —Å–≤—è–∑–µ–π...")
    headers, matrix = build_links_matrix(spores, links)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é
    print_matrix_preview(headers, matrix)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º CSV
    output_path = "spores/v16_picker/scripts/run/buffer/spores_links_matrix_fixed.csv"
    print(f"\nüíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤: {output_path}")
    
    if save_csv_matrix(headers, matrix, output_path):
        print(f"\nüéâ –ì–û–¢–û–í–û! CSV –º–∞—Ç—Ä–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∞: {output_path}")
        print(f"üìä –†–∞–∑–º–µ—Ä –º–∞—Ç—Ä–∏—Ü—ã: {len(matrix)} x {len(headers)}")
        print(f"üîó –°–≤—è–∑–µ–π –Ω–∞–π–¥–µ–Ω–æ: {sum(1 for row in matrix for cell in row[1:] if cell.strip())}")
        print(f"\n‚úÖ –ü–û–ö–ê–ó–ê–ù–´ –í–°–ï –°–í–Ø–ó–ò: –ø—Ä—è–º—ã–µ –∏ –æ–±—Ä–∞—Ç–Ω—ã–µ —Å –ª—é–±—ã–º –≤—Ä–µ–º–µ–Ω–µ–º!")
    else:
        print("\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ CSV —Ñ–∞–π–ª–∞")


if __name__ == "__main__":
    main()
